{"config":{"lang":["fr"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Accueil Ce site contient l'ensemble des ressources des cours NSI (Num\u00e9rique et sciences informatiques), premi\u00e8re et terminale.","title":"Accueil"},{"location":"#accueil","text":"Ce site contient l'ensemble des ressources des cours NSI (Num\u00e9rique et sciences informatiques), premi\u00e8re et terminale.","title":"Accueil"},{"location":"memento/","text":"Avant-Propos Les fiches suivantes permettent de se rem\u00e9morer les notions essentielles autour des sujets suivants : D\u00e9nombrement Suite Puissance","title":"Avant-Propos"},{"location":"memento/#avant-propos","text":"Les fiches suivantes permettent de se rem\u00e9morer les notions essentielles autour des sujets suivants : D\u00e9nombrement Suite Puissance","title":"Avant-Propos"},{"location":"memento/COMBINATOIRE/","text":"D\u00e9nombrement Exemple introductif Les plaques d'immatriculation belges sont de la forme, 3 lettres - 3 chiffres : \\[\\color{red}{\\boxed{KMN - 326}}\\] Sachant qu'il y a 11 milions d'habitants en Belgique, y a-t-il assez de plaques d'immatriculation pour que chaque belge puisse imatriculer sa voiture ? Pour r\u00e9soudre ce probl\u00e8me, il est possible d'\u00e9num\u00e9rer l'ensemble des immatriculations possibles mais cela peut s'av\u00e9rer source d'erreurs et requiert un temps cons\u00e9quent... En math\u00e9matiques, le d\u00e9nombrement est la d\u00e9termination du nombre d'\u00e9l\u00e9ments d'un ensemble . Il s'obtient en g\u00e9n\u00e9ral par un comptage ou par un calcul de son cardinal \u00e0 l'aide de techniques combinatoires. Arrangement Dans ce type de d\u00e9nombrement, l' ordre est important. On cherche \u00e0 obtenir une liste de \\(k\\) \u00e9l\u00e9ments parmi un ensemble de \\(n\\) \u00e9l\u00e9ments. Sans r\u00e9p\u00e9tition Exemple introductif Vous \u00eates un amateur de courses de chevaux. Aujourd'hui, les chevaux A lpha, B \u00eata, G amma, D elta et O mega concourent et vous tentez de deviner le podium dans l'ordre. Combien y a-t-il de podiums possibles ? Lorsque l'on choisit \\(k\\) objets parmi \\(n\\) objets et que l\u2019ordre dans lequel les objets sont s\u00e9lectionn\u00e9s rev\u00eat une importance, on peut les repr\u00e9senter par un \\(k\\) -uplet d'\u00e9l\u00e9ments distincts et on en constitue une liste ordonn\u00e9e sans r\u00e9p\u00e9tition possible, c'est-\u00e0-dire dans laquelle l'ordre des \u00e9l\u00e9ments est pris en compte. Une telle liste est un arrangement . \\[ \\boxed{ \\begin{align} A_n^k = \\frac{n!}{(n - k) !} \\end{align} } \\] Soit \\(n\\) le nombre de chevaux, ici \\(n = 5\\) et \\(k\\) le nombre de chevaux sur le podium, ici \\(k = 3\\) . Le nombre de podiums possibles est : \\[ \\begin{align} A_5^3 = \\frac{5!}{(5 - 3)!} = \\frac{5 \\times 4 \\times 3 \\times \\cancel{2} \\times \\cancel{1}}{\\cancel{2} \\times \\cancel{1}} = 5 \\times 4 \\times 3 = 60 \\end{align} \\] Cas particulier : Permutation Exemple introductif Vous \u00eates toujours un amateur de courses de chevaux. Aujourd'hui, les chevaux A lpha, B \u00eata, G amma, D elta et O mega concourent et cette fois-ci vous tentez d'identifier l'ensemble des arriv\u00e9es possibles. Combien y a-t-il d'arriv\u00e9es possibles de ces 5 chevaux ? Soit \\(n\\) le nombre de chevaux, ici \\(n = 5\\) et \\(k\\) le nombre de chevaux \u00e0 l'arriv\u00e9e, ici \\(k = n = 5\\) . Le nombre d'arriv\u00e9es possibles est : \\[ \\begin{align} A_5^5 = \\frac{5!}{(5 - 5)!} = \\frac{5 \\times 4 \\times 3 \\times 2 \\times 1}{1} = 5 \\times 4 \\times 3 \\times 2 = 120 \\end{align} \\] Tous les m\u00e9langes possibles, d'un ensemble de \\(n\\) \u00e9l\u00e9ments, est not\u00e9 \\(P_n\\) . \\[ \\boxed{ \\begin{align} P_n = A_n^n = n! \\end{align} } \\] Avec r\u00e9p\u00e9tition Exemple introductif Vous \u00eates d\u00e9cid\u00e9ment un amateur inv\u00e9t\u00e9r\u00e9 de courses de chevaux. Aujourd'hui, les chevaux A lpha, B \u00eata, G amma, D elta et O mega concourent et cette fois-ci le r\u00e9sultat de la course importe peu. Vous devez remettre 3 prix, chaque cheval pouvant \u00e9ventuellement en recevoir plusieurs. Combien y a-t-il de remises de prix diff\u00e9rentes possibles ? Le nombre d'arrangements final est le produit du nombre de choix possibles pour chaque \u00e9tape. Comme il y a \\(k\\) choix, il y a \\(k\\) \u00e9tapes et l'on a donc : \\[ \\begin{align} & B_n^k = \\overbrace{n \\times n \\times \\dots \\ n}^{k \\mbox{ \u00e9tapes}} \\\\ &\\boxed{B_n^k = n^k} \\end{align} \\] Soit \\(n\\) le nombre de chevaux, ici \\(n = 5\\) et \\(k\\) le nombre de prix \u00e0 remettre, ici \\(k = 3\\) . Le nombre de remises de prix possibles est : \\[ \\begin{align} B_5^3 = 5 \\times 5 \\times 5 = 5^3 = 125 \\end{align} \\] Combinaison Dans ce type de d\u00e9nombrement, l' ordre n' est pas important. On cherche \u00e0 obtenir un sous-ensemble (une partie) de \\(k\\) \u00e9l\u00e9ments d'un ensemble de \\(n\\) \u00e9l\u00e9ments. Exemple introductif Vous \u00eates d\u00e9finitivement un professionnel de courses de chevaux. Aujourd'hui, les chevaux A lpha, B \u00eata, G amma, D elta et O mega concourent et cette fois-ci qu'importe l'ordre, les prix \u00e0 remettre, m\u00eame si les chevaux finissent la course. En effet, vous souhaitez connaitre combien de triplets de chevaux peuvent terminer la course parmi les 5 partants. Combien y a-t-il de combinaisons possibles ? \\[ \\begin{align} & C_n^k = \\frac{A_n^k}{P_k} \\\\ &\\boxed{C_n^k = \\frac{n!}{k!(n - k)!}} \\end{align} \\] Soit \\(n\\) le nombre de chevaux, ici \\(n = 5\\) et \\(k\\) le nombre de chevaux \u00e0 l'arriv\u00e9e, ici \\(k = 3\\) . Le nombre de triplets possibles est : \\[ \\begin{align} C_5^3 = \\frac{5!}{3!(5 - 3)!} = \\frac{5 \\times 4 \\times \\cancel{3} \\times \\cancel{2} \\times \\cancel{1}}{\\cancel{3} \\times 2 \\times \\cancel{2} \\times \\cancel{1}} = 5 \\times 2 = 10 \\end{align} \\] R\u00e9sum\u00e9 Pour identifier la nature du d\u00e9nombrement et la formule de calcul \u00e0 utiliser, il est possible de se poser 2 questions : L'ordre du d\u00e9nombrement est-il important ? Les objets sont-ils r\u00e9p\u00e9t\u00e9s lors du d\u00e9nombrement ? Y a-t-il remise des objets ? \\[ \\begin{array}{ c c c c c } & & & \\mbox{L'ordre du d\u00e9nombrement} & \\\\ & & & \\mbox{est-il important ?} & \\\\ & & oui\\swarrow & & \\searrow non \\\\ & \\mbox{Y a-t-il r\u00e9p\u00e9titions des objets ?} & & & \\boxed{C_n^k = \\frac{n!}{k!(n - k) !}} \\\\ oui\\swarrow & & \\searrow non \\\\ \\boxed{B_n^k = n^k} & & \\boxed{A_n^k = \\frac{n!}{(n - k) !}} \\\\ & & \\downarrow & & \\\\ & & \\mbox{cas o\u00f9 } k = n & & \\\\ & & \\boxed{P_n = A_n^n = n!} \\end{array}\\\\ \\mbox{Arbre de d\u00e9cision du d\u00e9nombrement de $k$ parmi $n$} \\] Bilan : Les plaques belges Reprenons l'exemple introductif concernant les plaques belges. Exemple introductif Les plaques d'immatriculation belges sont de la forme, 3 lettres - 3 chiffres : \\[\\color{red}{\\boxed{KMN - 326}}\\] Sachant qu'il y a 11 milions d'habitants en Belgique, y a-t-il assez de plaques d'immatriculation pour que chaque belge puisse imatriculer sa voiture ? R\u00e9ponse Ici, l' ordre des symboles importe . La plaque \\(\\color{red}{\\boxed{KMN - 326}}\\) n'est pas la m\u00eame que \\(\\color{red}{\\boxed{MKN - 236}}\\) . De plus, les symboles peuvent \u00eatre r\u00e9p\u00e9t\u00e9s . La plaque \\(\\color{red}{\\boxed{MMN - 336}}\\) est autoris\u00e9e, les symboles \\(\\color{red}{\\boxed{M}}\\) et \\(\\color{red}{\\boxed{3}}\\) se r\u00e9p\u00e9tant. Ainsi, le d\u00e9nombrement correspond \u00e0 un arrangement avec r\u00e9p\u00e9titions . Soient : \\(n\\) , le nombre de lettres possibles, \\(n = 26\\) , \\(m\\) , le nombre de chiffres possibles, \\(c = 10\\) , \\(k\\) , le nombre de lettres d'une plaque, \\(k = 3\\) , \\(l\\) , le nombre de chiffres d'une plaque, \\(l = 3\\) . Ainsi, le nombre \\(I\\) de plaques d'immatriculation possibles s'expriment par : \\[ \\begin{align} I & = B_n^k \\times B_m^l \\\\ & = B_{26}^3 \\times B_{10}^3 \\\\ & = 26 \\times 26 \\times 26 \\times 10 \\times 10 \\times 10 \\\\ & = 17576000 \\end{align} \\] Conclusion, avec le syst\u00e8me d'immatriculation actuel, il y a assez de plaques pour que chaque belge puisse immatriculer sa voiture (17576000 plaques pour 11000000 d'habitants) Ressources [1] Les bases de l'analyse combinatoire, Yvan Monka, Youtube [2] Arrangement, permutation, combinaison.. : lequel choisir ?, Yvan Monka, Youtube","title":"D\u00e9nombrement"},{"location":"memento/COMBINATOIRE/#denombrement","text":"Exemple introductif Les plaques d'immatriculation belges sont de la forme, 3 lettres - 3 chiffres : \\[\\color{red}{\\boxed{KMN - 326}}\\] Sachant qu'il y a 11 milions d'habitants en Belgique, y a-t-il assez de plaques d'immatriculation pour que chaque belge puisse imatriculer sa voiture ? Pour r\u00e9soudre ce probl\u00e8me, il est possible d'\u00e9num\u00e9rer l'ensemble des immatriculations possibles mais cela peut s'av\u00e9rer source d'erreurs et requiert un temps cons\u00e9quent... En math\u00e9matiques, le d\u00e9nombrement est la d\u00e9termination du nombre d'\u00e9l\u00e9ments d'un ensemble . Il s'obtient en g\u00e9n\u00e9ral par un comptage ou par un calcul de son cardinal \u00e0 l'aide de techniques combinatoires.","title":"D\u00e9nombrement"},{"location":"memento/COMBINATOIRE/#arrangement","text":"Dans ce type de d\u00e9nombrement, l' ordre est important. On cherche \u00e0 obtenir une liste de \\(k\\) \u00e9l\u00e9ments parmi un ensemble de \\(n\\) \u00e9l\u00e9ments.","title":"Arrangement"},{"location":"memento/COMBINATOIRE/#sans-repetition","text":"Exemple introductif Vous \u00eates un amateur de courses de chevaux. Aujourd'hui, les chevaux A lpha, B \u00eata, G amma, D elta et O mega concourent et vous tentez de deviner le podium dans l'ordre. Combien y a-t-il de podiums possibles ? Lorsque l'on choisit \\(k\\) objets parmi \\(n\\) objets et que l\u2019ordre dans lequel les objets sont s\u00e9lectionn\u00e9s rev\u00eat une importance, on peut les repr\u00e9senter par un \\(k\\) -uplet d'\u00e9l\u00e9ments distincts et on en constitue une liste ordonn\u00e9e sans r\u00e9p\u00e9tition possible, c'est-\u00e0-dire dans laquelle l'ordre des \u00e9l\u00e9ments est pris en compte. Une telle liste est un arrangement . \\[ \\boxed{ \\begin{align} A_n^k = \\frac{n!}{(n - k) !} \\end{align} } \\] Soit \\(n\\) le nombre de chevaux, ici \\(n = 5\\) et \\(k\\) le nombre de chevaux sur le podium, ici \\(k = 3\\) . Le nombre de podiums possibles est : \\[ \\begin{align} A_5^3 = \\frac{5!}{(5 - 3)!} = \\frac{5 \\times 4 \\times 3 \\times \\cancel{2} \\times \\cancel{1}}{\\cancel{2} \\times \\cancel{1}} = 5 \\times 4 \\times 3 = 60 \\end{align} \\]","title":"Sans r\u00e9p\u00e9tition"},{"location":"memento/COMBINATOIRE/#cas-particulier-permutation","text":"Exemple introductif Vous \u00eates toujours un amateur de courses de chevaux. Aujourd'hui, les chevaux A lpha, B \u00eata, G amma, D elta et O mega concourent et cette fois-ci vous tentez d'identifier l'ensemble des arriv\u00e9es possibles. Combien y a-t-il d'arriv\u00e9es possibles de ces 5 chevaux ? Soit \\(n\\) le nombre de chevaux, ici \\(n = 5\\) et \\(k\\) le nombre de chevaux \u00e0 l'arriv\u00e9e, ici \\(k = n = 5\\) . Le nombre d'arriv\u00e9es possibles est : \\[ \\begin{align} A_5^5 = \\frac{5!}{(5 - 5)!} = \\frac{5 \\times 4 \\times 3 \\times 2 \\times 1}{1} = 5 \\times 4 \\times 3 \\times 2 = 120 \\end{align} \\] Tous les m\u00e9langes possibles, d'un ensemble de \\(n\\) \u00e9l\u00e9ments, est not\u00e9 \\(P_n\\) . \\[ \\boxed{ \\begin{align} P_n = A_n^n = n! \\end{align} } \\]","title":"Cas particulier : Permutation"},{"location":"memento/COMBINATOIRE/#avec-repetition","text":"Exemple introductif Vous \u00eates d\u00e9cid\u00e9ment un amateur inv\u00e9t\u00e9r\u00e9 de courses de chevaux. Aujourd'hui, les chevaux A lpha, B \u00eata, G amma, D elta et O mega concourent et cette fois-ci le r\u00e9sultat de la course importe peu. Vous devez remettre 3 prix, chaque cheval pouvant \u00e9ventuellement en recevoir plusieurs. Combien y a-t-il de remises de prix diff\u00e9rentes possibles ? Le nombre d'arrangements final est le produit du nombre de choix possibles pour chaque \u00e9tape. Comme il y a \\(k\\) choix, il y a \\(k\\) \u00e9tapes et l'on a donc : \\[ \\begin{align} & B_n^k = \\overbrace{n \\times n \\times \\dots \\ n}^{k \\mbox{ \u00e9tapes}} \\\\ &\\boxed{B_n^k = n^k} \\end{align} \\] Soit \\(n\\) le nombre de chevaux, ici \\(n = 5\\) et \\(k\\) le nombre de prix \u00e0 remettre, ici \\(k = 3\\) . Le nombre de remises de prix possibles est : \\[ \\begin{align} B_5^3 = 5 \\times 5 \\times 5 = 5^3 = 125 \\end{align} \\]","title":"Avec r\u00e9p\u00e9tition"},{"location":"memento/COMBINATOIRE/#combinaison","text":"Dans ce type de d\u00e9nombrement, l' ordre n' est pas important. On cherche \u00e0 obtenir un sous-ensemble (une partie) de \\(k\\) \u00e9l\u00e9ments d'un ensemble de \\(n\\) \u00e9l\u00e9ments. Exemple introductif Vous \u00eates d\u00e9finitivement un professionnel de courses de chevaux. Aujourd'hui, les chevaux A lpha, B \u00eata, G amma, D elta et O mega concourent et cette fois-ci qu'importe l'ordre, les prix \u00e0 remettre, m\u00eame si les chevaux finissent la course. En effet, vous souhaitez connaitre combien de triplets de chevaux peuvent terminer la course parmi les 5 partants. Combien y a-t-il de combinaisons possibles ? \\[ \\begin{align} & C_n^k = \\frac{A_n^k}{P_k} \\\\ &\\boxed{C_n^k = \\frac{n!}{k!(n - k)!}} \\end{align} \\] Soit \\(n\\) le nombre de chevaux, ici \\(n = 5\\) et \\(k\\) le nombre de chevaux \u00e0 l'arriv\u00e9e, ici \\(k = 3\\) . Le nombre de triplets possibles est : \\[ \\begin{align} C_5^3 = \\frac{5!}{3!(5 - 3)!} = \\frac{5 \\times 4 \\times \\cancel{3} \\times \\cancel{2} \\times \\cancel{1}}{\\cancel{3} \\times 2 \\times \\cancel{2} \\times \\cancel{1}} = 5 \\times 2 = 10 \\end{align} \\]","title":"Combinaison"},{"location":"memento/COMBINATOIRE/#resume","text":"Pour identifier la nature du d\u00e9nombrement et la formule de calcul \u00e0 utiliser, il est possible de se poser 2 questions : L'ordre du d\u00e9nombrement est-il important ? Les objets sont-ils r\u00e9p\u00e9t\u00e9s lors du d\u00e9nombrement ? Y a-t-il remise des objets ? \\[ \\begin{array}{ c c c c c } & & & \\mbox{L'ordre du d\u00e9nombrement} & \\\\ & & & \\mbox{est-il important ?} & \\\\ & & oui\\swarrow & & \\searrow non \\\\ & \\mbox{Y a-t-il r\u00e9p\u00e9titions des objets ?} & & & \\boxed{C_n^k = \\frac{n!}{k!(n - k) !}} \\\\ oui\\swarrow & & \\searrow non \\\\ \\boxed{B_n^k = n^k} & & \\boxed{A_n^k = \\frac{n!}{(n - k) !}} \\\\ & & \\downarrow & & \\\\ & & \\mbox{cas o\u00f9 } k = n & & \\\\ & & \\boxed{P_n = A_n^n = n!} \\end{array}\\\\ \\mbox{Arbre de d\u00e9cision du d\u00e9nombrement de $k$ parmi $n$} \\]","title":"R\u00e9sum\u00e9"},{"location":"memento/COMBINATOIRE/#bilan-les-plaques-belges","text":"Reprenons l'exemple introductif concernant les plaques belges. Exemple introductif Les plaques d'immatriculation belges sont de la forme, 3 lettres - 3 chiffres : \\[\\color{red}{\\boxed{KMN - 326}}\\] Sachant qu'il y a 11 milions d'habitants en Belgique, y a-t-il assez de plaques d'immatriculation pour que chaque belge puisse imatriculer sa voiture ? R\u00e9ponse Ici, l' ordre des symboles importe . La plaque \\(\\color{red}{\\boxed{KMN - 326}}\\) n'est pas la m\u00eame que \\(\\color{red}{\\boxed{MKN - 236}}\\) . De plus, les symboles peuvent \u00eatre r\u00e9p\u00e9t\u00e9s . La plaque \\(\\color{red}{\\boxed{MMN - 336}}\\) est autoris\u00e9e, les symboles \\(\\color{red}{\\boxed{M}}\\) et \\(\\color{red}{\\boxed{3}}\\) se r\u00e9p\u00e9tant. Ainsi, le d\u00e9nombrement correspond \u00e0 un arrangement avec r\u00e9p\u00e9titions . Soient : \\(n\\) , le nombre de lettres possibles, \\(n = 26\\) , \\(m\\) , le nombre de chiffres possibles, \\(c = 10\\) , \\(k\\) , le nombre de lettres d'une plaque, \\(k = 3\\) , \\(l\\) , le nombre de chiffres d'une plaque, \\(l = 3\\) . Ainsi, le nombre \\(I\\) de plaques d'immatriculation possibles s'expriment par : \\[ \\begin{align} I & = B_n^k \\times B_m^l \\\\ & = B_{26}^3 \\times B_{10}^3 \\\\ & = 26 \\times 26 \\times 26 \\times 10 \\times 10 \\times 10 \\\\ & = 17576000 \\end{align} \\] Conclusion, avec le syst\u00e8me d'immatriculation actuel, il y a assez de plaques pour que chaque belge puisse immatriculer sa voiture (17576000 plaques pour 11000000 d'habitants)","title":"Bilan : Les plaques belges"},{"location":"memento/COMBINATOIRE/#ressources","text":"[1] Les bases de l'analyse combinatoire, Yvan Monka, Youtube [2] Arrangement, permutation, combinaison.. : lequel choisir ?, Yvan Monka, Youtube","title":"Ressources"},{"location":"memento/COMPLEXITE/","text":"Th\u00e9or\u00e8me sur les r\u00e9currences de partition \u00c9nonc\u00e9 Autrement nomm\u00e9, \"Master Theorem\", il permet d'obtenir une solution en termes asymptotiques pour des relations de r\u00e9currence d'un certain type rencontr\u00e9es dans l'analyse de complexit\u00e9 d'algorithmes qui sont r\u00e9gis par le paradigme \"diviser pour r\u00e9gner\". Soient \\(a \\ge 1, b > 1\\) et \\(T\\) la relation de r\u00e9currence suivante : \\[ \\begin{align} T(n)= a T(\\frac{n}{b})+ \\mathcal{O}(n^c) \\end{align} \\] Les diff\u00e9rents param\u00e8tres s'interpr\u00e8tent comme suit : \\(n\\) est la taille du probl\u00e8me, \\(a\\) est le nombre de sous-probl\u00e8mes, \\(\\frac{n}{b}\\) est la taille de chaque sous-probl\u00e8mes. \\(O(n^c)\\) est le co\u00fbt de la subdivision et de la combinaison des solutions des sous-probl\u00e8mes. Le \"Master Theorem\" permet d'obtenir une expression de la complexit\u00e9 de \\(T(n)\\) comme suit : Si \\(a < b^c\\) alors \\(T(n) = \\mathcal{O}(n^c)\\) . Si \\(a = b^c\\) alors \\(T(n) = \\mathcal{O}(n^c \\log \u2061n)\\) . Si \\(a > b^c\\) alors \\(T(n) = \\mathcal{O}(n^{\\log_b \u2061a})\\) . Application \u00e0 des algorithmes courants Algorithme Relation de r\u00e9currence Complexit\u00e9 en temps Commentaire Recherche dichotomique \\(T(n) = T(\\frac{n}{2}) + \\mathcal{O}(1)\\) \\(\\mathcal{O}(\\log n)\\) \\(a= 1, b = 2, c = 0 \\Rightarrow \\mbox{cas }2\\) Parcours d'un arbre binaire \\(T(n) = 2T(\\frac{n}{2}) + \\mathcal{O}(1)\\) \\(\\mathcal{O}(n)\\) \\(a= 2, b = 2, c = 0 \\Rightarrow \\mbox{cas }3\\) Trouver la valeur mediane \\(T(n) = T(\\frac{n}{2}) + \\mathcal{O}(n)\\) \\(\\mathcal{O}(n)\\) \\(a= 1, b = 2, c = 1 \\Rightarrow \\mbox{cas }1\\) Tri fusion \\(T(n) = 2T(\\frac{n}{2}) + \\mathcal{O}(n)\\) \\(\\mathcal{O}(n \\log n)\\) \\(a= 2, b = 2, c = 1 \\Rightarrow \\mbox{cas }2\\) Algorithme de Karatsuba \\(T(n) = 3T(\\frac{n}{2}) + \\mathcal{O}(1)\\) \\(\\mathcal{O}(n^{\\log_2 3})\\) \\(a= 3, b = 2, c = 0 \\Rightarrow \\mbox{cas }3\\)","title":"Th\u00e9or\u00e8me sur les r\u00e9currences de partition"},{"location":"memento/COMPLEXITE/#theoreme-sur-les-recurrences-de-partition","text":"","title":"Th\u00e9or\u00e8me sur les r\u00e9currences de partition"},{"location":"memento/COMPLEXITE/#enonce","text":"Autrement nomm\u00e9, \"Master Theorem\", il permet d'obtenir une solution en termes asymptotiques pour des relations de r\u00e9currence d'un certain type rencontr\u00e9es dans l'analyse de complexit\u00e9 d'algorithmes qui sont r\u00e9gis par le paradigme \"diviser pour r\u00e9gner\". Soient \\(a \\ge 1, b > 1\\) et \\(T\\) la relation de r\u00e9currence suivante : \\[ \\begin{align} T(n)= a T(\\frac{n}{b})+ \\mathcal{O}(n^c) \\end{align} \\] Les diff\u00e9rents param\u00e8tres s'interpr\u00e8tent comme suit : \\(n\\) est la taille du probl\u00e8me, \\(a\\) est le nombre de sous-probl\u00e8mes, \\(\\frac{n}{b}\\) est la taille de chaque sous-probl\u00e8mes. \\(O(n^c)\\) est le co\u00fbt de la subdivision et de la combinaison des solutions des sous-probl\u00e8mes. Le \"Master Theorem\" permet d'obtenir une expression de la complexit\u00e9 de \\(T(n)\\) comme suit : Si \\(a < b^c\\) alors \\(T(n) = \\mathcal{O}(n^c)\\) . Si \\(a = b^c\\) alors \\(T(n) = \\mathcal{O}(n^c \\log \u2061n)\\) . Si \\(a > b^c\\) alors \\(T(n) = \\mathcal{O}(n^{\\log_b \u2061a})\\) .","title":"\u00c9nonc\u00e9"},{"location":"memento/COMPLEXITE/#application-a-des-algorithmes-courants","text":"Algorithme Relation de r\u00e9currence Complexit\u00e9 en temps Commentaire Recherche dichotomique \\(T(n) = T(\\frac{n}{2}) + \\mathcal{O}(1)\\) \\(\\mathcal{O}(\\log n)\\) \\(a= 1, b = 2, c = 0 \\Rightarrow \\mbox{cas }2\\) Parcours d'un arbre binaire \\(T(n) = 2T(\\frac{n}{2}) + \\mathcal{O}(1)\\) \\(\\mathcal{O}(n)\\) \\(a= 2, b = 2, c = 0 \\Rightarrow \\mbox{cas }3\\) Trouver la valeur mediane \\(T(n) = T(\\frac{n}{2}) + \\mathcal{O}(n)\\) \\(\\mathcal{O}(n)\\) \\(a= 1, b = 2, c = 1 \\Rightarrow \\mbox{cas }1\\) Tri fusion \\(T(n) = 2T(\\frac{n}{2}) + \\mathcal{O}(n)\\) \\(\\mathcal{O}(n \\log n)\\) \\(a= 2, b = 2, c = 1 \\Rightarrow \\mbox{cas }2\\) Algorithme de Karatsuba \\(T(n) = 3T(\\frac{n}{2}) + \\mathcal{O}(1)\\) \\(\\mathcal{O}(n^{\\log_2 3})\\) \\(a= 3, b = 2, c = 0 \\Rightarrow \\mbox{cas }3\\)","title":"Application \u00e0 des algorithmes courants"},{"location":"memento/PUISSANCE/","text":"Puissances D\u00e9finition En alg\u00e8bre, une puissance d'un nombre est le r\u00e9sultat de la multiplication r\u00e9p\u00e9t\u00e9e de ce nombre avec lui-m\u00eame. \\[ \\begin{align} \\forall a \\in \\mathbb{R},& \\qquad a^0 = 1 \\\\ \\forall a \\in \\mathbb{R}, n \\in \\mathbb{N}^+, &\\qquad a^n = \\underbrace{a \\times a \\times a \\dots \\times a}_{n} = \\prod_{i = 1}^{n} a\\\\ \\forall a \\in \\mathbb{R}^*, n \\in \\mathbb{N}^-, &\\qquad a^n = \\frac{1}{a^{-n}} \\end{align} \\] R\u00e8gles de calcul Formule Domaine Exemple \\(a^n \\times a^m = a^{n + m}\\) \\(\\forall n, m \\in \\mathbb{N}, a \\in \\mathbb{R}\\) \\(2^2 \\times 2^3 = 2^5 = 32\\) \\(\\frac{a^m}{a^n} = a^{m - n}\\) \\(\\forall n, m \\in \\mathbb{N}, a \\in \\mathbb{R}^*\\) \\(\\frac{2^5}{2^2} = 2^3 = 8\\) \\(a^n \\times b^n = (a \\times b)^n\\) \\(\\forall n \\in \\mathbb{N}, a, b \\in \\mathbb{R}\\) \\(2^2 \\times 3^2 = (2\\times 3)^2 = 6^2 = 36\\) \\((a^n)^m = a^{n \\times m}\\) \\(\\forall n, m \\in \\mathbb{N}, a \\in \\mathbb{R}\\) \\((2^2)^3 = 2^{2 \\times 3} = 2^6 = 64\\)","title":"Puissances"},{"location":"memento/PUISSANCE/#puissances","text":"","title":"Puissances"},{"location":"memento/PUISSANCE/#definition","text":"En alg\u00e8bre, une puissance d'un nombre est le r\u00e9sultat de la multiplication r\u00e9p\u00e9t\u00e9e de ce nombre avec lui-m\u00eame. \\[ \\begin{align} \\forall a \\in \\mathbb{R},& \\qquad a^0 = 1 \\\\ \\forall a \\in \\mathbb{R}, n \\in \\mathbb{N}^+, &\\qquad a^n = \\underbrace{a \\times a \\times a \\dots \\times a}_{n} = \\prod_{i = 1}^{n} a\\\\ \\forall a \\in \\mathbb{R}^*, n \\in \\mathbb{N}^-, &\\qquad a^n = \\frac{1}{a^{-n}} \\end{align} \\]","title":"D\u00e9finition"},{"location":"memento/PUISSANCE/#regles-de-calcul","text":"Formule Domaine Exemple \\(a^n \\times a^m = a^{n + m}\\) \\(\\forall n, m \\in \\mathbb{N}, a \\in \\mathbb{R}\\) \\(2^2 \\times 2^3 = 2^5 = 32\\) \\(\\frac{a^m}{a^n} = a^{m - n}\\) \\(\\forall n, m \\in \\mathbb{N}, a \\in \\mathbb{R}^*\\) \\(\\frac{2^5}{2^2} = 2^3 = 8\\) \\(a^n \\times b^n = (a \\times b)^n\\) \\(\\forall n \\in \\mathbb{N}, a, b \\in \\mathbb{R}\\) \\(2^2 \\times 3^2 = (2\\times 3)^2 = 6^2 = 36\\) \\((a^n)^m = a^{n \\times m}\\) \\(\\forall n, m \\in \\mathbb{N}, a \\in \\mathbb{R}\\) \\((2^2)^3 = 2^{2 \\times 3} = 2^6 = 64\\)","title":"R\u00e8gles de calcul"},{"location":"memento/SUITE/","text":"Les suites Suite arithm\u00e9tique D\u00e9finition Une suite \\(u_n\\) est une suite arithm\u00e9tique s'il existe un nombre \\(r\\) tel que pour tout entier \\(n\\) , on a : \\[ \\begin{align} u_{n + 1} = u_n + r \\end{align} \\] Le nombre \\(r\\) est appel\u00e9 raison de la suite. Terme g\u00e9n\u00e9ral \\(u_n\\) est une suite arithm\u00e9tique de raison \\(r\\) et de premier terme \\(u_0\\) . Pour tout entier naturel \\(n\\) , on a : \\[ \\begin{align} u_n = u_0 + nr \\end{align} \\] Somme des termes cons\u00e9cutifs Soit \\(n\\) un entier naturel non nul, \\(u\\) une suite arithm\u00e9tique, la somme \\(S_n\\) des termes cons\u00e9cutifs s'exprime alors par : \\[ \\begin{align} S_n & = u_0 + u_1 + \\dots + u_n \\\\ & = \\sum_{i = 0}^{n} u_i \\\\ & = (n + 1) \\frac{u_0 + u_n}{2} \\\\ & = \\boxed{\\mbox{nombre de termes} \\times \\frac{\\mbox{premier terme} + \\mbox{dernier terme}}{2}} \\end{align} \\] Exemple : Somme de la suite des \\(n\\) premiers entiers naturels \\[ \\begin{align} S_n & = 1 + 2 + 3 + \\dots + n \\\\ & = \\sum_{i = 1}^{n} i \\\\ & = n \\times \\frac{1 + n}{2} \\\\ & = \\frac{n + n^2}{2} \\end{align} \\] Suite g\u00e9om\u00e9trique D\u00e9finition Une suite \\(u_n\\) est une suite g\u00e9om\u00e9trique s'il existe un nombre \\(q\\) tel que pout tout entier \\(n\\) , on a : \\[ \\begin{align} u_{n + 1} = q \\times u_n \\end{align} \\] Le nombre \\(q\\) est appel\u00e9 raison de la suite. Terme g\u00e9n\u00e9ral \\(u_n\\) est une suite g\u00e9om\u00e9trique de raison \\(q\\) et de premier terme \\(u_0\\) . Pour tout entier naturel \\(n\\) , on a : \\[ \\begin{align} u_n = u_0 \\times q^n \\end{align} \\] Somme des termes cons\u00e9cutifs Soit \\(n\\) un entier naturel non nul, \\(u\\) une suite g\u00e9om\u00e9trique, \\(q\\) un r\u00e9el diff\u00e9rent de 1, la somme \\(S_n\\) des termes cons\u00e9cutifs s'exprime alors par : \\[ \\begin{align} S_n & = u_0 + u_1 + u_2 + \\dots + u_n \\\\ & = \\sum_{i = 0}^{n} u_i \\\\ & = u_0 + (u_0 \\times q) + (u_0 \\times q^2) + \\dots + (u_0 \\times q^n) \\\\ & = u_0 \\times (1 + q + q^2 + \\dots + q^n) \\\\ & = u_0 \\times (q^0 + q^1 + q^2 + \\dots + q^n) \\\\ & = u_0 \\times \\frac{1 - q^{n + 1}}{1 - q} \\\\ & = \\boxed{\\mbox{premier terme} \\times \\frac{1 - \\mbox{raison}^\\mbox{nombre de termes}}{1 - \\mbox{raison}}} \\end{align} \\]","title":"Les suites"},{"location":"memento/SUITE/#les-suites","text":"","title":"Les suites"},{"location":"memento/SUITE/#suite-arithmetique","text":"","title":"Suite arithm\u00e9tique"},{"location":"memento/SUITE/#definition","text":"Une suite \\(u_n\\) est une suite arithm\u00e9tique s'il existe un nombre \\(r\\) tel que pour tout entier \\(n\\) , on a : \\[ \\begin{align} u_{n + 1} = u_n + r \\end{align} \\] Le nombre \\(r\\) est appel\u00e9 raison de la suite.","title":"D\u00e9finition"},{"location":"memento/SUITE/#terme-general","text":"\\(u_n\\) est une suite arithm\u00e9tique de raison \\(r\\) et de premier terme \\(u_0\\) . Pour tout entier naturel \\(n\\) , on a : \\[ \\begin{align} u_n = u_0 + nr \\end{align} \\]","title":"Terme g\u00e9n\u00e9ral"},{"location":"memento/SUITE/#somme-des-termes-consecutifs","text":"Soit \\(n\\) un entier naturel non nul, \\(u\\) une suite arithm\u00e9tique, la somme \\(S_n\\) des termes cons\u00e9cutifs s'exprime alors par : \\[ \\begin{align} S_n & = u_0 + u_1 + \\dots + u_n \\\\ & = \\sum_{i = 0}^{n} u_i \\\\ & = (n + 1) \\frac{u_0 + u_n}{2} \\\\ & = \\boxed{\\mbox{nombre de termes} \\times \\frac{\\mbox{premier terme} + \\mbox{dernier terme}}{2}} \\end{align} \\]","title":"Somme des termes cons\u00e9cutifs"},{"location":"memento/SUITE/#suite-geometrique","text":"","title":"Suite g\u00e9om\u00e9trique"},{"location":"memento/SUITE/#definition_1","text":"Une suite \\(u_n\\) est une suite g\u00e9om\u00e9trique s'il existe un nombre \\(q\\) tel que pout tout entier \\(n\\) , on a : \\[ \\begin{align} u_{n + 1} = q \\times u_n \\end{align} \\] Le nombre \\(q\\) est appel\u00e9 raison de la suite.","title":"D\u00e9finition"},{"location":"memento/SUITE/#terme-general_1","text":"\\(u_n\\) est une suite g\u00e9om\u00e9trique de raison \\(q\\) et de premier terme \\(u_0\\) . Pour tout entier naturel \\(n\\) , on a : \\[ \\begin{align} u_n = u_0 \\times q^n \\end{align} \\]","title":"Terme g\u00e9n\u00e9ral"},{"location":"memento/SUITE/#somme-des-termes-consecutifs_1","text":"Soit \\(n\\) un entier naturel non nul, \\(u\\) une suite g\u00e9om\u00e9trique, \\(q\\) un r\u00e9el diff\u00e9rent de 1, la somme \\(S_n\\) des termes cons\u00e9cutifs s'exprime alors par : \\[ \\begin{align} S_n & = u_0 + u_1 + u_2 + \\dots + u_n \\\\ & = \\sum_{i = 0}^{n} u_i \\\\ & = u_0 + (u_0 \\times q) + (u_0 \\times q^2) + \\dots + (u_0 \\times q^n) \\\\ & = u_0 \\times (1 + q + q^2 + \\dots + q^n) \\\\ & = u_0 \\times (q^0 + q^1 + q^2 + \\dots + q^n) \\\\ & = u_0 \\times \\frac{1 - q^{n + 1}}{1 - q} \\\\ & = \\boxed{\\mbox{premier terme} \\times \\frac{1 - \\mbox{raison}^\\mbox{nombre de termes}}{1 - \\mbox{raison}}} \\end{align} \\]","title":"Somme des termes cons\u00e9cutifs"},{"location":"premiere/","text":"Sommaire D\u00e9coupage Le cours de premi\u00e8re est d\u00e9coup\u00e9 en 6 blocs : Bloc Contenu 1 Repr\u00e9sentation des donn\u00e9es : types et valeurs de base 2 Repr\u00e9sentation des donn\u00e9es : types construits 3 R\u00e9seau et Web 4 Architectures mat\u00e9rielles et syst\u00e8mes d'exploitation 5 Langages et programmation 6 Algorithmique Progression TODO","title":"Sommaire"},{"location":"premiere/#sommaire","text":"","title":"Sommaire"},{"location":"premiere/#decoupage","text":"Le cours de premi\u00e8re est d\u00e9coup\u00e9 en 6 blocs : Bloc Contenu 1 Repr\u00e9sentation des donn\u00e9es : types et valeurs de base 2 Repr\u00e9sentation des donn\u00e9es : types construits 3 R\u00e9seau et Web 4 Architectures mat\u00e9rielles et syst\u00e8mes d'exploitation 5 Langages et programmation 6 Algorithmique","title":"D\u00e9coupage"},{"location":"premiere/#progression","text":"TODO","title":"Progression"},{"location":"premiere/bloc1/","text":"Sommaire Bloc 1 - Repr\u00e9sentation des donn\u00e9es : types et valeurs de base Pr\u00e9ambule Toute machine (ordinateur, smartphone...) manipule les donn\u00e9es sous forme binaire (0/1), ce qui permet d\u2019unifier logique et calcul. Les donn\u00e9es de base sont repr\u00e9sent\u00e9es selon un codage d\u00e9pendant de leur nature : entiers, flottants, caract\u00e8res et cha\u00eenes de caract\u00e8res, ... L'objet de ce bloc est de r\u00e9pondre \u00e0 la question : Comment sont cod\u00e9es les donn\u00e9es dans une machine ? Organisation Le bloc se d\u00e9compose en 6 chapitres : Chapitre 1 : Repr\u00e9sentation d'un entier naturel Chapitre 2 : Op\u00e9rations sur les entiers Chapitre 3 : Repr\u00e9sentation d'un entier relatif Chapitre 4 : R\u00e9pr\u00e9sentation d'un flottant Chapitre 5 : Repr\u00e9sentation d'un bool\u00e9en Chapitre 6 : Repr\u00e9sentation d'un texte Programme Officiel Contenus Capacit\u00e9s attendues \u00c9criture d\u2019un entier positif dans une base b \u2a7e 2 Passer de la repr\u00e9sentation d\u2019une base dans une autre. Les bases 2, 10 et 16 sont privil\u00e9gi\u00e9es. Repr\u00e9sentation binaire d\u2019un entier relatif \u00c9valuer le nombre de bits n\u00e9cessaires \u00e0 l\u2019\u00e9criture en base 2 d\u2019un entier, de la somme ou du produit de deux nombres entiers. Utiliser le compl\u00e9ment \u00e0 2. Repr\u00e9sentation approximative des nombres r\u00e9els : notion de nombre flottant Calculer sur quelques exemples la repr\u00e9sentation de nombres r\u00e9els : 0.1, 0.25 ou 1/3. Valeurs bool\u00e9ennes : 0,1. Op\u00e9rateurs bool\u00e9ens : and, or, not. Expressions bool\u00e9ennes Dresser la table d\u2019une expression bool\u00e9enne. Repr\u00e9sentation d\u2019un texte en machine. Exemples des encodages ASCII, ISO-8859-1, Unicode Identifier l\u2019int\u00e9r\u00eat des diff\u00e9rents syst\u00e8mes d\u2019encodage. Convertir un fichier texte dans diff\u00e9rents formats d\u2019encodage.","title":"Sommaire"},{"location":"premiere/bloc1/#sommaire","text":"","title":"Sommaire"},{"location":"premiere/bloc1/#bloc-1-representation-des-donnees-types-et-valeurs-de-base","text":"","title":"Bloc 1 - Repr\u00e9sentation des donn\u00e9es : types et valeurs de base"},{"location":"premiere/bloc1/#preambule","text":"Toute machine (ordinateur, smartphone...) manipule les donn\u00e9es sous forme binaire (0/1), ce qui permet d\u2019unifier logique et calcul. Les donn\u00e9es de base sont repr\u00e9sent\u00e9es selon un codage d\u00e9pendant de leur nature : entiers, flottants, caract\u00e8res et cha\u00eenes de caract\u00e8res, ... L'objet de ce bloc est de r\u00e9pondre \u00e0 la question : Comment sont cod\u00e9es les donn\u00e9es dans une machine ?","title":"Pr\u00e9ambule"},{"location":"premiere/bloc1/#organisation","text":"Le bloc se d\u00e9compose en 6 chapitres : Chapitre 1 : Repr\u00e9sentation d'un entier naturel Chapitre 2 : Op\u00e9rations sur les entiers Chapitre 3 : Repr\u00e9sentation d'un entier relatif Chapitre 4 : R\u00e9pr\u00e9sentation d'un flottant Chapitre 5 : Repr\u00e9sentation d'un bool\u00e9en Chapitre 6 : Repr\u00e9sentation d'un texte","title":"Organisation"},{"location":"premiere/bloc1/#programme-officiel","text":"Contenus Capacit\u00e9s attendues \u00c9criture d\u2019un entier positif dans une base b \u2a7e 2 Passer de la repr\u00e9sentation d\u2019une base dans une autre. Les bases 2, 10 et 16 sont privil\u00e9gi\u00e9es. Repr\u00e9sentation binaire d\u2019un entier relatif \u00c9valuer le nombre de bits n\u00e9cessaires \u00e0 l\u2019\u00e9criture en base 2 d\u2019un entier, de la somme ou du produit de deux nombres entiers. Utiliser le compl\u00e9ment \u00e0 2. Repr\u00e9sentation approximative des nombres r\u00e9els : notion de nombre flottant Calculer sur quelques exemples la repr\u00e9sentation de nombres r\u00e9els : 0.1, 0.25 ou 1/3. Valeurs bool\u00e9ennes : 0,1. Op\u00e9rateurs bool\u00e9ens : and, or, not. Expressions bool\u00e9ennes Dresser la table d\u2019une expression bool\u00e9enne. Repr\u00e9sentation d\u2019un texte en machine. Exemples des encodages ASCII, ISO-8859-1, Unicode Identifier l\u2019int\u00e9r\u00eat des diff\u00e9rents syst\u00e8mes d\u2019encodage. Convertir un fichier texte dans diff\u00e9rents formats d\u2019encodage.","title":"Programme Officiel"},{"location":"premiere/bloc1/chapitre-01/","text":"Sommaire Num\u00e9ration et Repr\u00e9sentation des nombres Les contenus le tp le cours le quiz Programme Contenus : \u00c9criture d\u2019un entier positif dans une base b \u2a7e 2, Repr\u00e9sentation binaire d\u2019un entier relatif, Repr\u00e9sentation approximative des nombres r\u00e9els : notion de nombre flottant Capacit\u00e9s attendues : Passer de la repr\u00e9sentation d\u2019une base dans une autre, \u00c9valuer le nombre de bits n\u00e9cessaires \u00e0 l\u2019\u00e9criture en base 2 d\u2019un entier, de la somme ou du produit de deux nombres entiers, Utiliser le compl\u00e9ment \u00e0 2, Calculer sur quelques exemples la repr\u00e9sentation de nombres r\u00e9els : 0.1, 0.25 ou 1/3. Commentaires : Les bases 2, 10 et 16 sont privile\u0301gie\u0301es. Il faut e\u0301viter de tester l\u2019e\u0301galite\u0301 de deux flottants.","title":"Sommaire"},{"location":"premiere/bloc1/chapitre-01/#sommaire","text":"","title":"Sommaire"},{"location":"premiere/bloc1/chapitre-01/#numeration-et-representation-des-nombres","text":"","title":"Num\u00e9ration et Repr\u00e9sentation des nombres"},{"location":"premiere/bloc1/chapitre-01/#les-contenus","text":"le tp le cours le quiz","title":"Les contenus"},{"location":"premiere/bloc1/chapitre-01/#programme","text":"Contenus : \u00c9criture d\u2019un entier positif dans une base b \u2a7e 2, Repr\u00e9sentation binaire d\u2019un entier relatif, Repr\u00e9sentation approximative des nombres r\u00e9els : notion de nombre flottant Capacit\u00e9s attendues : Passer de la repr\u00e9sentation d\u2019une base dans une autre, \u00c9valuer le nombre de bits n\u00e9cessaires \u00e0 l\u2019\u00e9criture en base 2 d\u2019un entier, de la somme ou du produit de deux nombres entiers, Utiliser le compl\u00e9ment \u00e0 2, Calculer sur quelques exemples la repr\u00e9sentation de nombres r\u00e9els : 0.1, 0.25 ou 1/3. Commentaires : Les bases 2, 10 et 16 sont privile\u0301gie\u0301es. Il faut e\u0301viter de tester l\u2019e\u0301galite\u0301 de deux flottants.","title":"Programme"},{"location":"premiere/bloc1/chapitre-01/COURS/","text":"Cours 0 - Avant propos XLII = \u56db\u5341\u4e8c = 101010 = ? 1 - Contexte Un nombre s'\u00e9crit diff\u00e9rement selon le syst\u00e8me de num\u00e9ration utilis\u00e9. D\u00e9finition Un syst\u00e8me de num\u00e9ration est un ensemble de r\u00e8gles permettant de repr\u00e9senter les nombres, en utilisant un ensemble de chiffres d\u00e9termin\u00e9. Nous utilisons tous les chiffres \\(0, 1, 2, 3, 4, 5, 6, 7, 8, 9\\) pour \u00e9crire les nombres. On parle alors d'un syst\u00e8me de num\u00e9ration \u00e0 base 10 (ou d\u00e9cimale), car il utilise 10 symboles pour \u00e9crire les nombres. Dans une ordinateur, le syst\u00e8me de num\u00e9ration utilis\u00e9e est le syst\u00e8me binaire, qui utilise exclusivement les symboles \\(0\\) et \\(1\\) . Questions Comment une machine repr\u00e9sente les nombres si elle n'utilise pas le syst\u00e8me de num\u00e9ration d\u00e9cimale ? Comment est construit notre syst\u00e8me de num\u00e9ration d\u00e9cimale ? Pour r\u00e9pondre \u00e0 cette question \u00e0 l'apparence simple, reprenons depuis le d\u00e9but : comment avez-vous appris \u00e0 compter ? 2 - \"Notre\" syst\u00e8me d\u00e9cimal Vous penserez peut-\u00eatre que le syst\u00e8me d\u00e9cimal vient du fait qu'on a 10 doigts, mais en tout cas deux choses sont s\u00fbres : Il y a 10 chiffres : \\(0, 1, 2, 3, 4, 5, 6, 7, 8, 9\\) . On parle de base 10. Avec ces derniers, on peut compter jusqu'\u00e0 9, Et si l'on veut aller au-del\u00e0 de 9, il faut changer de rang . Cela signifie que si le rang des unit\u00e9s est plein, il faut passer \u00e0 celui des dizaines, puis des centaines, milliers et ainsi de suite. Ainsi, notre syst\u00e8me d\u00e9cimal est un syst\u00e8me de num\u00e9ration positionnel, dans lequel un chiffre repr\u00e9sente des valeurs diff\u00e9rentes selon le rang qu\u2019il occupe dans un nombre. Dans le nombre \\(185\\) , on peut voir trois rangs : centaines, dizaines et unit\u00e9s. Ici, les unit\u00e9s ont la position 0, les dizaines la position 1 et les centaines la position 2. Nous pouvons donc \u00e9crire : \\[185 = 1 \\times 10^2 + 8 \\times 10^1 + 5 \\times 10^0\\] Cette op\u00e9ration consiste \u00e0 d\u00e9composer \\(185\\) en puissance de 10 (unit\u00e9s, dizaines, centaines, etc). Un nombre est \u00e9gal \u00e0 la somme des valeurs de ses rangs, et on peut d\u00e9composer n'importe quel nombre en puissance de sa base. 3 - Le syst\u00e8me binaire Le binaire, c'est le syst\u00e8me de comptage des ordinateurs. Pourquoi le binaire et pas le d\u00e9cimal comme les humains ? Un ordinateur est compos\u00e9 de circuits \u00e9lectroniques et de composants \u00e9lectriques, aliment\u00e9s par un signal \u00e9lectrique : 1, il y a du courant, 0, il n'y en a pas. Le plus simple pour compter est donc d'utiliser un syst\u00e8me en base 2 (le binaire) car on peut repr\u00e9senter ses deux valeurs possibles (0 et 1). Le nombre \\(10101\\) occupe 5 rangs. On dit qu'il s'\u00e9crit sur 5 bits. Chaque rang ne peut avoir que 2 valeurs diff\u00e9rentes. Pour la base 10, chaque rang peut prendre 10 valeurs est repr\u00e9sente une puissance de 10. Pour la base 2, chaque rang repr\u00e9sente une puissance de 2. Et si l'on veut aller au-del\u00e0 de 1, il faut changer de rang. Cela signifie que si le rang des unit\u00e9s est plein, il faut passer \u00e0 celui des dizaines, puis des centaines, milliers et ainsi de suite... Questions Combien de valeurs peut-on coder avec 1 bit ? Combien de valeurs peut-on coder avec 2 bits ? Combien de valeurs peut-on coder avec 3 bits ? Combien de valeurs peut-on coder avec n bits ? R\u00e9ponses Avec 1 bit, on peut coder 2 valeurs (0 et 1) Avec 2 bits, on peut coder 4 valeurs Avec 3 bits, on peut coder 8 valeurs Avec \\(n\\) bits, on peut coder \\(2^n\\) 3.1 - Conversion d\u00e9cimal en binaire Avec la m\u00e9thode vue pr\u00e9c\u00e9dement, l'op\u00e9ration est fastidieuse, car il faut \u00e9crire tous les entiers de 0 \u00e0 156 avant de calculer 157. Il existe plusieurs m\u00e9thodes (algorithmes) de conversion. La plus connue est la m\u00e9thode dite de la division euclidienne : On prend le nombre en base 10, On le divise par 2 et on note le reste de la division (soit 1 soit 0), On refait la m\u00eame chose avec le quotient pr\u00e9c\u00e9dent, et on met de nouveau le reste de c\u00f4t\u00e9, On r\u00e9it\u00e8re la division, jusqu'\u00e0 ce que le quotient soit 0. Le nombre en binaire appara\u00eet alors : il suffit de prendre tous les restes de bas en haut. \\[ \\begin{align} 157 & = 2 \\times 78 + 1 \\\\ 78 & = 2 \\times 39 + 0 \\\\ 39 & = 2 \\times 19 + 1 \\\\ 19 & = 2 \\times 9 + 1 \\\\ 9 & = 2 \\times 4 + 1 \\\\ 4 & = 2 \\times 2 + 0 \\\\ 2 & = 2 \\times 1 + 0 \\\\ 1 & = 2 \\times 0 + 1 \\end{align} \\] Le nombre \\(157\\) s'\u00e9crit \\(10011101\\) en binaire. Pour ne pas confondre \\(10011101\\) en binaire et le nombre 10011101 en d\u00e9cimale, on sp\u00e9cifie la repr\u00e9sentation barr\u00e9e ou parenth\u00e9s\u00e9e indic\u00e9e par la base d'\u00e9criture. Soit l'\u00e9criture du nombre \\(157\\) : \\((10011101)_2 = \\overline{10011101}^2 = (157)_{10} = \\overline{157}^{10}\\) Elle diff\u00e8re de l'\u00e9criture du nombre 10011101 : \\((100110001100000111011101)_2 = (10011101)_{10}\\) . Travail \u00e0 Faire Donner la repr\u00e9sentation binaire des nombres suivants : 21 42 1023 1024 Solution 1 \\[ \\begin{align} 21 & = 2 \\times 10 + 1 \\\\ 10 & = 2 \\times 5 + 0 \\\\ 5 & = 2 \\times 2 + 1 \\\\ 2 & = 2 \\times 1 + 0 \\\\ 1 & = 2 \\times 0 + 1 \\\\ & \\\\ 21 & = (10101)_2 \\end{align} \\] Solution 2 \\[ \\begin{array}{| c | c | c | c | c | c | c |} \\hline 64 & 32 & 16 & 8 & 4 & 2 & 1 \\\\ \\hline 2^6 & 2^5 & 2^4 & 2^3 & 2^2 & 2^1 & 2^0 \\\\ \\hline 0 & 1 & 0 & 1 & 0 & 1 & 0 \\\\ \\hline \\end{array} \\] Solution 3 \\[ \\begin{align} 1023 & = 2 \\times 511 + 1 \\\\ 511 & = 2 \\times 255 + 1 \\\\ 255 & = 2 \\times 127 + 1 \\\\ 127 & = 2 \\times 63 + 1 \\\\ 63 & = 2 \\times 31 + 1 \\\\ 31 & = 2 \\times 15 + 1 \\\\ 15 & = 2 \\times 7 + 1 \\\\ 7 & = 2 \\times 3 + 1 \\\\ 3 & = 2 \\times 1 + 1 \\\\ 1 & = 2 \\times 0 + 1 \\\\ & \\\\ 1023 & = (1111111111)_2 \\end{align} \\] Solution 4 \\[ \\begin{align} 1024 & = 1023 + 1 \\\\ & = (1111111111)_2 + 1 \\\\ & \\\\ 1024 & = (10000000000)_2 \\end{align} \\] Que constate-t-on sur les nombres impairs ? Le bit de poids faible est \u00e9gale \u00e0 1 Que constate-t-on entre les nombres multiples entre eux ? Les valeurs sont obtenues par d\u00e9calage \u00e0 gauche ou \u00e0 droite. 3.2 - Conversion binaire en d\u00e9cimale Un nombre s'\u00e9crit sur \\(n\\) bits (rangs), en syst\u00e8me binaire. O\u00f9 chaque bit repr\u00e9sente une puissance de 2. Comme vu pr\u00e9c\u00e9demment, un nombre est \u00e9gal \u00e0 la somme des valeurs de ses rangs. Pour convertir un nombre repr\u00e9sent\u00e9 en binaire en d\u00e9cimale, on proc\u00e8de de la mani\u00e8re suivante : on multiplie par \\(2^0\\) la valeur du rang 0, par \\(2^1\\) la valeur du rang 1, par \\(2^2\\) la valeur du rang 2, par \\(2^3\\) la valeur du rang 3, ... et on somme le tout. Exemple : \\[ \\begin{align} (10011)_2 & = \\boldsymbol{1} \\times 2^4 + \\boldsymbol{0} \\times 2^3 + \\boldsymbol{0} \\times 2^2 + \\boldsymbol{1} \\times 2^1 + \\boldsymbol{1} \\times 2^0 \\\\ & = 16 + 0 + 0 + 2 + 1 \\\\ & = 19 \\\\ & = (19)_{10} \\end{align} \\] Travail \u00e0 faire Repr\u00e9senter les nombres suivants en base 10 : \\((11111)_2\\) \\((101010)_2\\) \\((1010101)_2\\) \\((101011001)_2\\) Solution 1 \\[ \\begin{align} (11111)_2 & = 2^4 + 2^3 + 2^2 + 2^1 + 2^0 \\\\ & = 16 + 8 + 4 + 2 + 1 \\\\ & = 31 \\end{align} \\] Solution 2 \\[ \\begin{align} (101010)_2 & = 1 \\times 2^5 + 0 \\times 2^4 + 1 \\times 2^3 + 0 \\times 2^2 + 1 \\times 2^1 + 0 \\times 2^0 \\\\ & = 32 + 8 + 2 \\\\ & = 42 \\end{align} \\] Solution 3 \\[ \\begin{align} (1010101)_2 & = (1010100)_2 + 1 \\\\ & = 2 \\times (101010)_2 + 1\\\\ & = 2 \\times 42 + 1 \\\\ & = 85 \\end{align} \\] Solution 4 \\[ \\begin{align} (101011001)_2 & = (101010000)_2 + (1001)_2 \\\\ & = (101010)_2 \\times 2^3 + 9 \\\\ & = 42 \\times 8 + 9 \\\\ & = 336 + 9 \\\\ & = 345 \\end{align} \\] 4 - Le Syst\u00e8me hexad\u00e9cimale Le syst\u00e8me de num\u00e9ration hexad\u00e9cimale permet une repr\u00e9sentation simplifi\u00e9e des nombres binaires, \u00e0 l\u2019usage des humains ! L\u2019\u00e9criture et la lecture d\u2019une succession de 0 et de 1 est fastidieuse pour l\u2019homme et source d\u2019erreurs. Pour raccourcir les mots binaires, un groupe de 4 bits cons\u00e9cutifs est repr\u00e9sent\u00e9 par un chiffre hexad\u00e9cimal. Le syst\u00e8me se base sur les 16 chifres : 0 1 2 3 4 5 6 7 8 9 A B C D E F 4.1 - Conversion d\u00e9cimale en hexad\u00e9cimale Pour convertir un nombre d\u00e9cimal en hexad\u00e9cimal, la m\u00e9thode est similaire au binaire (Cf. Conversion d\u00e9cimale en binaire ), sauf que cette fois on divise par 16. \\[ \\begin{align} 157 & = 16 \\times 9 + 13 \\mbox{ Soit D, en base 16}\\\\ 9 & = 16 \\times 0 + 9 \\end{align} \\] Le nombre 157 s'\u00e9crit \\(9D\\) en hexad\u00e9cimal. La notation est : \\((9D)_{16}\\) . 4.2 - Conversion hexad\u00e9cimale en d\u00e9cimale Un nombre s'\u00e9crit sur n chiffres, en syst\u00e8me hexad\u00e9cimal. O\u00f9 chaque chiffre repr\u00e9sente une puissance de 16 associ\u00e9e \u00e0 son rang. Comme vu pr\u00e9c\u00e9demment (Cf. Syst\u00e8me d\u00e9cimal ), un nombre est \u00e9gal \u00e0 la somme des valeurs de ses rangs. Pour convertir le tout en d\u00e9cimale, on proc\u00e8de de la mani\u00e8re suivante : on multiplie par 160 la valeur du rang 0, par 161 la valeur du rang 1, par 162 la valeur du rang 2, par 163 la valeur du rang 3, ... et on somme le tout. Exemple : \\[ \\begin{align} (12B7)_{16} & = \\boldsymbol{1} \\times 16^3 + \\boldsymbol{2} \\times 16^2 + \\boldsymbol{B} \\times 16^1 + \\boldsymbol{7} \\times 2^0 \\\\ & = \\boldsymbol{1} \\times 16^3 + \\boldsymbol{2} \\times 16^2 + \\boldsymbol{11} \\times 16^1 + \\boldsymbol{7} \\times 2^0 \\\\ & = \\boldsymbol{1} \\times 4096 + \\boldsymbol{2} \\times 256 + \\boldsymbol{11} \\times 16 + \\boldsymbol{7} \\times 1 \\\\ & = 4096 + 512 + 176 + 7 \\\\ & = 4791 \\end{align} \\] Travail \u00e0 faire Convertir les nombres suivants en base 10 : \\((1B7)_{16}\\) \\((ABE)_{16}\\) Solution 1 \\[ \\begin{align} (1B7)_{16} & = 1 \\times 16^2 + B \\times 16^1 + 7 \\times 16^0 \\\\ & = 256 + 11 \\times 16 + 7 \\\\ & = 256 + 176 + 7 \\\\ & = 439 \\end{align} \\] Solution 2 \\[ \\begin{align} (ABE)_{16} & = A \\times 16^2 + B \\times 16^1 + E \\times 16^0 \\\\ & = 10 \\times 256 + 11 \\times 16 + 14 \\\\ & = 2560 + 176 + 14 \\\\ & = 2750 \\end{align} \\] 4.3 - Conversion binaire en hexad\u00e9cimale Pour convertir un nombre binaire en base 16, on regroupe les bits 4 \u00e0 4, chaque groupe donnant un chiffre hexad\u00e9cimal. \u00c0 l'inverse, passer d'un nombre hexad\u00e9cimal \u00e0 sa repr\u00e9sentation binaire se fait en rempla\u00e7ant chaque chiffre pour son \u00e9quivalent sur 4 bits. Ainsi, \\((11011001)_2 = (1101\\,1001)_2 = (D9)_{16}\\) , tandis que \\((7F)_{16} = (0111\\,1111)_2 = (1111111)_2\\) . Attention Si la repr\u00e9sentation binaire de d\u00e9part du n'a pas un nombre de bits multiple de 4, il faut ajouter des z\u00e9ros en bits de poids forts (ce qui ne change pas sa valeur) afin de pouvoir les regrouper 4 par 4. Travail \u00e0 faire Convertir les entiers suivants, repr\u00e9sent\u00e9s en binaire, en hexad\u00e9cimal : \\((101111011001)_2\\) \\((111011)_2\\) Solution 1 \\[ \\begin{align} (101111011001)_{2} & = (1011 \\; 1101 \\; 1001)_{2} \\\\ & = ((11)_{10} \\; (13)_{10} \\; 9)_{16} \\\\ & = (BD9)_{16} \\end{align} \\] Solution 2 \\[ \\begin{align} (111011)_{2} & = (0011 \\; 1011)_{2} \\\\ & = (3\\; (11)_{10})_{16} \\\\ & = (3B)_{16} \\end{align} \\] 5 - G\u00e9n\u00e9ralisation pour une base \\(b\\) Soient : \\(x\\) la repr\u00e9sentation du nombre en base 10, \\(r\\) la repr\u00e9sentation du nombre en base \\(b\\) , \\(r\\) \u00e9tant \u00e9crit en utilisant \\(n\\) chiffres : \\(c_0, c_1...c_{n\u22121}\\) Nous avons alors : \\[r = c_{n\u22121} c_{n\u22122} \\dots c_2 c_1 c_0\\] \\[ \\begin{align} x & = \\sum_{i = 0}^{n - 1} c_i \\times b_i \\\\ & = c_{n\u22121} \\times b_{n\u22121} + c_{n\u22122} \\times b_{n\u22122} + ... + c_2 \\times b_2 + c_1 \\times b_1 + c_0 \\times b_0 \\end{align} \\] Aller plus loin Une ressource sur la base 64 : Will YouTube Ever Run Out Of Video IDs? Source : Youtube Une ressource sur la langue azazilus : https://www.languagesandnumbers.com/comment-compter-en-azazilus/fr/azazilus/","title":"Cours"},{"location":"premiere/bloc1/chapitre-01/COURS/#cours","text":"","title":"Cours"},{"location":"premiere/bloc1/chapitre-01/COURS/#0-avant-propos","text":"XLII = \u56db\u5341\u4e8c = 101010 = ?","title":"0 - Avant propos"},{"location":"premiere/bloc1/chapitre-01/COURS/#1-contexte","text":"Un nombre s'\u00e9crit diff\u00e9rement selon le syst\u00e8me de num\u00e9ration utilis\u00e9. D\u00e9finition Un syst\u00e8me de num\u00e9ration est un ensemble de r\u00e8gles permettant de repr\u00e9senter les nombres, en utilisant un ensemble de chiffres d\u00e9termin\u00e9. Nous utilisons tous les chiffres \\(0, 1, 2, 3, 4, 5, 6, 7, 8, 9\\) pour \u00e9crire les nombres. On parle alors d'un syst\u00e8me de num\u00e9ration \u00e0 base 10 (ou d\u00e9cimale), car il utilise 10 symboles pour \u00e9crire les nombres. Dans une ordinateur, le syst\u00e8me de num\u00e9ration utilis\u00e9e est le syst\u00e8me binaire, qui utilise exclusivement les symboles \\(0\\) et \\(1\\) . Questions Comment une machine repr\u00e9sente les nombres si elle n'utilise pas le syst\u00e8me de num\u00e9ration d\u00e9cimale ? Comment est construit notre syst\u00e8me de num\u00e9ration d\u00e9cimale ? Pour r\u00e9pondre \u00e0 cette question \u00e0 l'apparence simple, reprenons depuis le d\u00e9but : comment avez-vous appris \u00e0 compter ?","title":"1 - Contexte"},{"location":"premiere/bloc1/chapitre-01/COURS/#2-notre-systeme-decimal","text":"Vous penserez peut-\u00eatre que le syst\u00e8me d\u00e9cimal vient du fait qu'on a 10 doigts, mais en tout cas deux choses sont s\u00fbres : Il y a 10 chiffres : \\(0, 1, 2, 3, 4, 5, 6, 7, 8, 9\\) . On parle de base 10. Avec ces derniers, on peut compter jusqu'\u00e0 9, Et si l'on veut aller au-del\u00e0 de 9, il faut changer de rang . Cela signifie que si le rang des unit\u00e9s est plein, il faut passer \u00e0 celui des dizaines, puis des centaines, milliers et ainsi de suite. Ainsi, notre syst\u00e8me d\u00e9cimal est un syst\u00e8me de num\u00e9ration positionnel, dans lequel un chiffre repr\u00e9sente des valeurs diff\u00e9rentes selon le rang qu\u2019il occupe dans un nombre. Dans le nombre \\(185\\) , on peut voir trois rangs : centaines, dizaines et unit\u00e9s. Ici, les unit\u00e9s ont la position 0, les dizaines la position 1 et les centaines la position 2. Nous pouvons donc \u00e9crire : \\[185 = 1 \\times 10^2 + 8 \\times 10^1 + 5 \\times 10^0\\] Cette op\u00e9ration consiste \u00e0 d\u00e9composer \\(185\\) en puissance de 10 (unit\u00e9s, dizaines, centaines, etc). Un nombre est \u00e9gal \u00e0 la somme des valeurs de ses rangs, et on peut d\u00e9composer n'importe quel nombre en puissance de sa base.","title":"2 - \"Notre\" syst\u00e8me d\u00e9cimal"},{"location":"premiere/bloc1/chapitre-01/COURS/#3-le-systeme-binaire","text":"Le binaire, c'est le syst\u00e8me de comptage des ordinateurs. Pourquoi le binaire et pas le d\u00e9cimal comme les humains ? Un ordinateur est compos\u00e9 de circuits \u00e9lectroniques et de composants \u00e9lectriques, aliment\u00e9s par un signal \u00e9lectrique : 1, il y a du courant, 0, il n'y en a pas. Le plus simple pour compter est donc d'utiliser un syst\u00e8me en base 2 (le binaire) car on peut repr\u00e9senter ses deux valeurs possibles (0 et 1). Le nombre \\(10101\\) occupe 5 rangs. On dit qu'il s'\u00e9crit sur 5 bits. Chaque rang ne peut avoir que 2 valeurs diff\u00e9rentes. Pour la base 10, chaque rang peut prendre 10 valeurs est repr\u00e9sente une puissance de 10. Pour la base 2, chaque rang repr\u00e9sente une puissance de 2. Et si l'on veut aller au-del\u00e0 de 1, il faut changer de rang. Cela signifie que si le rang des unit\u00e9s est plein, il faut passer \u00e0 celui des dizaines, puis des centaines, milliers et ainsi de suite... Questions Combien de valeurs peut-on coder avec 1 bit ? Combien de valeurs peut-on coder avec 2 bits ? Combien de valeurs peut-on coder avec 3 bits ? Combien de valeurs peut-on coder avec n bits ? R\u00e9ponses Avec 1 bit, on peut coder 2 valeurs (0 et 1) Avec 2 bits, on peut coder 4 valeurs Avec 3 bits, on peut coder 8 valeurs Avec \\(n\\) bits, on peut coder \\(2^n\\)","title":"3 - Le syst\u00e8me binaire"},{"location":"premiere/bloc1/chapitre-01/COURS/#31-conversion-decimal-en-binaire","text":"Avec la m\u00e9thode vue pr\u00e9c\u00e9dement, l'op\u00e9ration est fastidieuse, car il faut \u00e9crire tous les entiers de 0 \u00e0 156 avant de calculer 157. Il existe plusieurs m\u00e9thodes (algorithmes) de conversion. La plus connue est la m\u00e9thode dite de la division euclidienne : On prend le nombre en base 10, On le divise par 2 et on note le reste de la division (soit 1 soit 0), On refait la m\u00eame chose avec le quotient pr\u00e9c\u00e9dent, et on met de nouveau le reste de c\u00f4t\u00e9, On r\u00e9it\u00e8re la division, jusqu'\u00e0 ce que le quotient soit 0. Le nombre en binaire appara\u00eet alors : il suffit de prendre tous les restes de bas en haut. \\[ \\begin{align} 157 & = 2 \\times 78 + 1 \\\\ 78 & = 2 \\times 39 + 0 \\\\ 39 & = 2 \\times 19 + 1 \\\\ 19 & = 2 \\times 9 + 1 \\\\ 9 & = 2 \\times 4 + 1 \\\\ 4 & = 2 \\times 2 + 0 \\\\ 2 & = 2 \\times 1 + 0 \\\\ 1 & = 2 \\times 0 + 1 \\end{align} \\] Le nombre \\(157\\) s'\u00e9crit \\(10011101\\) en binaire. Pour ne pas confondre \\(10011101\\) en binaire et le nombre 10011101 en d\u00e9cimale, on sp\u00e9cifie la repr\u00e9sentation barr\u00e9e ou parenth\u00e9s\u00e9e indic\u00e9e par la base d'\u00e9criture. Soit l'\u00e9criture du nombre \\(157\\) : \\((10011101)_2 = \\overline{10011101}^2 = (157)_{10} = \\overline{157}^{10}\\) Elle diff\u00e8re de l'\u00e9criture du nombre 10011101 : \\((100110001100000111011101)_2 = (10011101)_{10}\\) . Travail \u00e0 Faire Donner la repr\u00e9sentation binaire des nombres suivants : 21 42 1023 1024 Solution 1 \\[ \\begin{align} 21 & = 2 \\times 10 + 1 \\\\ 10 & = 2 \\times 5 + 0 \\\\ 5 & = 2 \\times 2 + 1 \\\\ 2 & = 2 \\times 1 + 0 \\\\ 1 & = 2 \\times 0 + 1 \\\\ & \\\\ 21 & = (10101)_2 \\end{align} \\] Solution 2 \\[ \\begin{array}{| c | c | c | c | c | c | c |} \\hline 64 & 32 & 16 & 8 & 4 & 2 & 1 \\\\ \\hline 2^6 & 2^5 & 2^4 & 2^3 & 2^2 & 2^1 & 2^0 \\\\ \\hline 0 & 1 & 0 & 1 & 0 & 1 & 0 \\\\ \\hline \\end{array} \\] Solution 3 \\[ \\begin{align} 1023 & = 2 \\times 511 + 1 \\\\ 511 & = 2 \\times 255 + 1 \\\\ 255 & = 2 \\times 127 + 1 \\\\ 127 & = 2 \\times 63 + 1 \\\\ 63 & = 2 \\times 31 + 1 \\\\ 31 & = 2 \\times 15 + 1 \\\\ 15 & = 2 \\times 7 + 1 \\\\ 7 & = 2 \\times 3 + 1 \\\\ 3 & = 2 \\times 1 + 1 \\\\ 1 & = 2 \\times 0 + 1 \\\\ & \\\\ 1023 & = (1111111111)_2 \\end{align} \\] Solution 4 \\[ \\begin{align} 1024 & = 1023 + 1 \\\\ & = (1111111111)_2 + 1 \\\\ & \\\\ 1024 & = (10000000000)_2 \\end{align} \\] Que constate-t-on sur les nombres impairs ? Le bit de poids faible est \u00e9gale \u00e0 1 Que constate-t-on entre les nombres multiples entre eux ? Les valeurs sont obtenues par d\u00e9calage \u00e0 gauche ou \u00e0 droite.","title":"3.1 - Conversion d\u00e9cimal en binaire"},{"location":"premiere/bloc1/chapitre-01/COURS/#32-conversion-binaire-en-decimale","text":"Un nombre s'\u00e9crit sur \\(n\\) bits (rangs), en syst\u00e8me binaire. O\u00f9 chaque bit repr\u00e9sente une puissance de 2. Comme vu pr\u00e9c\u00e9demment, un nombre est \u00e9gal \u00e0 la somme des valeurs de ses rangs. Pour convertir un nombre repr\u00e9sent\u00e9 en binaire en d\u00e9cimale, on proc\u00e8de de la mani\u00e8re suivante : on multiplie par \\(2^0\\) la valeur du rang 0, par \\(2^1\\) la valeur du rang 1, par \\(2^2\\) la valeur du rang 2, par \\(2^3\\) la valeur du rang 3, ... et on somme le tout. Exemple : \\[ \\begin{align} (10011)_2 & = \\boldsymbol{1} \\times 2^4 + \\boldsymbol{0} \\times 2^3 + \\boldsymbol{0} \\times 2^2 + \\boldsymbol{1} \\times 2^1 + \\boldsymbol{1} \\times 2^0 \\\\ & = 16 + 0 + 0 + 2 + 1 \\\\ & = 19 \\\\ & = (19)_{10} \\end{align} \\] Travail \u00e0 faire Repr\u00e9senter les nombres suivants en base 10 : \\((11111)_2\\) \\((101010)_2\\) \\((1010101)_2\\) \\((101011001)_2\\) Solution 1 \\[ \\begin{align} (11111)_2 & = 2^4 + 2^3 + 2^2 + 2^1 + 2^0 \\\\ & = 16 + 8 + 4 + 2 + 1 \\\\ & = 31 \\end{align} \\] Solution 2 \\[ \\begin{align} (101010)_2 & = 1 \\times 2^5 + 0 \\times 2^4 + 1 \\times 2^3 + 0 \\times 2^2 + 1 \\times 2^1 + 0 \\times 2^0 \\\\ & = 32 + 8 + 2 \\\\ & = 42 \\end{align} \\] Solution 3 \\[ \\begin{align} (1010101)_2 & = (1010100)_2 + 1 \\\\ & = 2 \\times (101010)_2 + 1\\\\ & = 2 \\times 42 + 1 \\\\ & = 85 \\end{align} \\] Solution 4 \\[ \\begin{align} (101011001)_2 & = (101010000)_2 + (1001)_2 \\\\ & = (101010)_2 \\times 2^3 + 9 \\\\ & = 42 \\times 8 + 9 \\\\ & = 336 + 9 \\\\ & = 345 \\end{align} \\]","title":"3.2 - Conversion binaire en d\u00e9cimale"},{"location":"premiere/bloc1/chapitre-01/COURS/#4-le-systeme-hexadecimale","text":"Le syst\u00e8me de num\u00e9ration hexad\u00e9cimale permet une repr\u00e9sentation simplifi\u00e9e des nombres binaires, \u00e0 l\u2019usage des humains ! L\u2019\u00e9criture et la lecture d\u2019une succession de 0 et de 1 est fastidieuse pour l\u2019homme et source d\u2019erreurs. Pour raccourcir les mots binaires, un groupe de 4 bits cons\u00e9cutifs est repr\u00e9sent\u00e9 par un chiffre hexad\u00e9cimal. Le syst\u00e8me se base sur les 16 chifres : 0 1 2 3 4 5 6 7 8 9 A B C D E F","title":"4 - Le Syst\u00e8me hexad\u00e9cimale"},{"location":"premiere/bloc1/chapitre-01/COURS/#41-conversion-decimale-en-hexadecimale","text":"Pour convertir un nombre d\u00e9cimal en hexad\u00e9cimal, la m\u00e9thode est similaire au binaire (Cf. Conversion d\u00e9cimale en binaire ), sauf que cette fois on divise par 16. \\[ \\begin{align} 157 & = 16 \\times 9 + 13 \\mbox{ Soit D, en base 16}\\\\ 9 & = 16 \\times 0 + 9 \\end{align} \\] Le nombre 157 s'\u00e9crit \\(9D\\) en hexad\u00e9cimal. La notation est : \\((9D)_{16}\\) .","title":"4.1 - Conversion d\u00e9cimale en hexad\u00e9cimale"},{"location":"premiere/bloc1/chapitre-01/COURS/#42-conversion-hexadecimale-en-decimale","text":"Un nombre s'\u00e9crit sur n chiffres, en syst\u00e8me hexad\u00e9cimal. O\u00f9 chaque chiffre repr\u00e9sente une puissance de 16 associ\u00e9e \u00e0 son rang. Comme vu pr\u00e9c\u00e9demment (Cf. Syst\u00e8me d\u00e9cimal ), un nombre est \u00e9gal \u00e0 la somme des valeurs de ses rangs. Pour convertir le tout en d\u00e9cimale, on proc\u00e8de de la mani\u00e8re suivante : on multiplie par 160 la valeur du rang 0, par 161 la valeur du rang 1, par 162 la valeur du rang 2, par 163 la valeur du rang 3, ... et on somme le tout. Exemple : \\[ \\begin{align} (12B7)_{16} & = \\boldsymbol{1} \\times 16^3 + \\boldsymbol{2} \\times 16^2 + \\boldsymbol{B} \\times 16^1 + \\boldsymbol{7} \\times 2^0 \\\\ & = \\boldsymbol{1} \\times 16^3 + \\boldsymbol{2} \\times 16^2 + \\boldsymbol{11} \\times 16^1 + \\boldsymbol{7} \\times 2^0 \\\\ & = \\boldsymbol{1} \\times 4096 + \\boldsymbol{2} \\times 256 + \\boldsymbol{11} \\times 16 + \\boldsymbol{7} \\times 1 \\\\ & = 4096 + 512 + 176 + 7 \\\\ & = 4791 \\end{align} \\] Travail \u00e0 faire Convertir les nombres suivants en base 10 : \\((1B7)_{16}\\) \\((ABE)_{16}\\) Solution 1 \\[ \\begin{align} (1B7)_{16} & = 1 \\times 16^2 + B \\times 16^1 + 7 \\times 16^0 \\\\ & = 256 + 11 \\times 16 + 7 \\\\ & = 256 + 176 + 7 \\\\ & = 439 \\end{align} \\] Solution 2 \\[ \\begin{align} (ABE)_{16} & = A \\times 16^2 + B \\times 16^1 + E \\times 16^0 \\\\ & = 10 \\times 256 + 11 \\times 16 + 14 \\\\ & = 2560 + 176 + 14 \\\\ & = 2750 \\end{align} \\]","title":"4.2 - Conversion hexad\u00e9cimale en d\u00e9cimale"},{"location":"premiere/bloc1/chapitre-01/COURS/#43-conversion-binaire-en-hexadecimale","text":"Pour convertir un nombre binaire en base 16, on regroupe les bits 4 \u00e0 4, chaque groupe donnant un chiffre hexad\u00e9cimal. \u00c0 l'inverse, passer d'un nombre hexad\u00e9cimal \u00e0 sa repr\u00e9sentation binaire se fait en rempla\u00e7ant chaque chiffre pour son \u00e9quivalent sur 4 bits. Ainsi, \\((11011001)_2 = (1101\\,1001)_2 = (D9)_{16}\\) , tandis que \\((7F)_{16} = (0111\\,1111)_2 = (1111111)_2\\) . Attention Si la repr\u00e9sentation binaire de d\u00e9part du n'a pas un nombre de bits multiple de 4, il faut ajouter des z\u00e9ros en bits de poids forts (ce qui ne change pas sa valeur) afin de pouvoir les regrouper 4 par 4. Travail \u00e0 faire Convertir les entiers suivants, repr\u00e9sent\u00e9s en binaire, en hexad\u00e9cimal : \\((101111011001)_2\\) \\((111011)_2\\) Solution 1 \\[ \\begin{align} (101111011001)_{2} & = (1011 \\; 1101 \\; 1001)_{2} \\\\ & = ((11)_{10} \\; (13)_{10} \\; 9)_{16} \\\\ & = (BD9)_{16} \\end{align} \\] Solution 2 \\[ \\begin{align} (111011)_{2} & = (0011 \\; 1011)_{2} \\\\ & = (3\\; (11)_{10})_{16} \\\\ & = (3B)_{16} \\end{align} \\]","title":"4.3 - Conversion binaire en hexad\u00e9cimale"},{"location":"premiere/bloc1/chapitre-01/COURS/#5-generalisation-pour-une-base-b","text":"Soient : \\(x\\) la repr\u00e9sentation du nombre en base 10, \\(r\\) la repr\u00e9sentation du nombre en base \\(b\\) , \\(r\\) \u00e9tant \u00e9crit en utilisant \\(n\\) chiffres : \\(c_0, c_1...c_{n\u22121}\\) Nous avons alors : \\[r = c_{n\u22121} c_{n\u22122} \\dots c_2 c_1 c_0\\] \\[ \\begin{align} x & = \\sum_{i = 0}^{n - 1} c_i \\times b_i \\\\ & = c_{n\u22121} \\times b_{n\u22121} + c_{n\u22122} \\times b_{n\u22122} + ... + c_2 \\times b_2 + c_1 \\times b_1 + c_0 \\times b_0 \\end{align} \\]","title":"5 - G\u00e9n\u00e9ralisation pour une base \\(b\\)"},{"location":"premiere/bloc1/chapitre-01/COURS/#aller-plus-loin","text":"Une ressource sur la base 64 : Will YouTube Ever Run Out Of Video IDs? Source : Youtube Une ressource sur la langue azazilus : https://www.languagesandnumbers.com/comment-compter-en-azazilus/fr/azazilus/","title":"Aller plus loin"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/","text":"Les syst\u00e8mes de num\u00e9ration A travers l'histoire et les civilisations, l'humanit\u00e9 a eu la n\u00e9cessit\u00e9 de compter dans divers domaines (scientifique, commerce, agriculture, ...), pour : Faire des calculs scientifiques (Math\u00e9matique, Physique...) Dater les \u00e9v\u00e9nements (Histoire, ...) Vie quotidienne : organiser les r\u00e9coltes, \u00e9changer de la monnaie, ... Il exite une multitude de syst\u00e8mes de num\u00e9ration, repr\u00e9sent\u00e9s dans la frise chronologique suivante : Cette activit\u00e9 d\u00e9branch\u00e9e vise \u00e0 \u00e9tudier les diff\u00e9rents syst\u00e8mes. Travail \u00e0 faire Par groupe (4-5), vous devez \u00e9tudier un syst\u00e8me qui vous sera attribu\u00e9 et effectuez les t\u00e2ches suivantes : Lire la description du syst\u00e8me de num\u00e9ration, Repr\u00e9senter les entiers suivants selon votre syst\u00e8me de num\u00e9ration : \\(9, 42, 255\\) et \\(7659\\) \u00c9crire l'algorithme de la fonction conversion qui prend un entier en param\u00e8tre et renvoie la repr\u00e9sentation de l'entier dans la base de num\u00e9ration, sous la forme d'une suite de symboles. S1 - Num\u00e9ration additive Dans ce type de num\u00e9ration, on additionne les valeurs repr\u00e9sent\u00e9es par les symboles. Premier type On dispose de symboles pour d\u00e9signer les puissances de la base \\(b\\) : $1\\quad b\\quad b^2\\quad b^3 \\quad b^4 \\ldots $ Les symboles sont group\u00e9s et ordonn\u00e9s de gauche \u00e0 droite. En base 10 Num\u00e9ration Egyptienne Symboles : -3000 \u00e0 -2900 Pas de z\u00e9ro Num\u00e9ration Elamite (Iran) Symboles : -2900 Pas de z\u00e9ro Num\u00e9ration Cr\u00eatoise Symboles : -1900 \u00e0 -1350 Pas de z\u00e9ro Numeration Hittite Symboles : -1400 Pas de z\u00e9ro En base 20 Num\u00e9ration Azt\u00e8que Symboles : 1200 Pas de z\u00e9ro Second type On dispose d'une base \\(b\\) et de symboles repr\u00e9sentants les nombres \\(1 \\quad k\\quad b\\quad k\\times b\\quad b^2\\quad k\\times b^2\\quad b^3\\quad k\\times b^3\\ldots\\) o\u00f9 \\(k\\) est un diviseur de la base Base 10 Grec acrophonique \\(k=5\\) Symboles : -500 Pas de z\u00e9ro Romane \\(k=5\\) Symboles : -500 Pas de z\u00e9ro Base 60 Sum\u00e9rienne \\(k=10\\) Symboles : -3300 Pas de z\u00e9ro Troisi\u00e8me type On dispose d'une base \\(b\\) et de symboles repr\u00e9sentant les nombres : \\(1\\) \\(1 \\times b\\) $ 1 \\times b^2$ \\(1 \\times b^3\\) \\(\\cdots\\) \\(2\\) \\(2 \\times b\\) $ 2 \\times b^2$ \\(2 \\times b^3\\) \\(\\cdots\\) \\(3\\) \\(3 \\times b\\) $ 3 \\times b^2$ \\(3 \\times b^3\\) \\(\\cdots\\) \\(\\cdots\\) \\(\\cdots\\) \\(\\cdots\\) \\(\\cdots\\) \\(\\cdots\\) \\(b-1\\) \\((b-1) \\times b\\) $ (b-1) \\times b^2$ \\((b-1) \\times b^3\\) \\(\\cdots\\) Base 10 Egyptien hieratique Symboles : -2500 Pas de z\u00e9ro Egyptien d\u00e9motique Symboles -750 Pas de z\u00e9ro Alphab\u00e9tique grec Symboles -400 Pas de z\u00e9ro H\u00e9breu alphab\u00e9tique Symboles -200 Pas de z\u00e9ro Alphab\u00e9tique arm\u00e9nien Symboles - +400 - Pas de z\u00e9ro S2 - Num\u00e9ration hybride Premier type Dans ce type de num\u00e9ration, la valeur est d\u00e9termin\u00e9e par le nombre d'unit\u00e9s plac\u00e9es \u00e0 gauche des symboles repr\u00e9sentant les puissances de la base \\(b\\) . Base 10 Assyro-Babilonien symboles : -2350 Aram\u00e9en symboles : -750 de droite \u00e0 gauche. Deuxi\u00e8me type Dans ce type de num\u00e9ration, on dispose de 9 symboles pour d\u00e9signer les unit\u00e9s, que l'on place \u00e0 gauche des puissances de la base \\(b\\) . Base 10 Chinois commun symboles : -1400 pas de z\u00e9ro S3 - Num\u00e9ration positionnelle Dans ce type de num\u00e9ration, c'est la position des symboles qui d\u00e9termine la puissance de la base \\(b\\) par laquelle il faut multiplier la valeur du symbole. Premier type Dans ce type, on cumule encore les symboles des unit\u00e9s pour d\u00e9signer les petites valeurs Base 10 Chinois \u00e9rudit symboles : -200 z\u00e9ro : oui, tardif Base 20 Maya \u00e9rudit symboles : 400-900 Existence du z\u00e9ro De haut en bas. Second type Un symbole pour chaque valeur entre 1 et \\(b-1\\) . Base 10 symboles : 400 Existence du z\u00e9ro","title":"DEBRANCHE"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#les-systemes-de-numeration","text":"A travers l'histoire et les civilisations, l'humanit\u00e9 a eu la n\u00e9cessit\u00e9 de compter dans divers domaines (scientifique, commerce, agriculture, ...), pour : Faire des calculs scientifiques (Math\u00e9matique, Physique...) Dater les \u00e9v\u00e9nements (Histoire, ...) Vie quotidienne : organiser les r\u00e9coltes, \u00e9changer de la monnaie, ... Il exite une multitude de syst\u00e8mes de num\u00e9ration, repr\u00e9sent\u00e9s dans la frise chronologique suivante : Cette activit\u00e9 d\u00e9branch\u00e9e vise \u00e0 \u00e9tudier les diff\u00e9rents syst\u00e8mes.","title":"Les syst\u00e8mes de num\u00e9ration"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#travail-a-faire","text":"Par groupe (4-5), vous devez \u00e9tudier un syst\u00e8me qui vous sera attribu\u00e9 et effectuez les t\u00e2ches suivantes : Lire la description du syst\u00e8me de num\u00e9ration, Repr\u00e9senter les entiers suivants selon votre syst\u00e8me de num\u00e9ration : \\(9, 42, 255\\) et \\(7659\\) \u00c9crire l'algorithme de la fonction conversion qui prend un entier en param\u00e8tre et renvoie la repr\u00e9sentation de l'entier dans la base de num\u00e9ration, sous la forme d'une suite de symboles.","title":"Travail \u00e0 faire"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#s1-numeration-additive","text":"Dans ce type de num\u00e9ration, on additionne les valeurs repr\u00e9sent\u00e9es par les symboles.","title":"S1 - Num\u00e9ration additive"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#premier-type","text":"On dispose de symboles pour d\u00e9signer les puissances de la base \\(b\\) : $1\\quad b\\quad b^2\\quad b^3 \\quad b^4 \\ldots $ Les symboles sont group\u00e9s et ordonn\u00e9s de gauche \u00e0 droite.","title":"Premier type"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#en-base-10","text":"Num\u00e9ration Egyptienne Symboles : -3000 \u00e0 -2900 Pas de z\u00e9ro Num\u00e9ration Elamite (Iran) Symboles : -2900 Pas de z\u00e9ro Num\u00e9ration Cr\u00eatoise Symboles : -1900 \u00e0 -1350 Pas de z\u00e9ro Numeration Hittite Symboles : -1400 Pas de z\u00e9ro","title":"En base 10"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#en-base-20","text":"Num\u00e9ration Azt\u00e8que Symboles : 1200 Pas de z\u00e9ro","title":"En base 20"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#second-type","text":"On dispose d'une base \\(b\\) et de symboles repr\u00e9sentants les nombres \\(1 \\quad k\\quad b\\quad k\\times b\\quad b^2\\quad k\\times b^2\\quad b^3\\quad k\\times b^3\\ldots\\) o\u00f9 \\(k\\) est un diviseur de la base","title":"Second type"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#base-10","text":"Grec acrophonique \\(k=5\\) Symboles : -500 Pas de z\u00e9ro Romane \\(k=5\\) Symboles : -500 Pas de z\u00e9ro","title":"Base 10"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#base-60","text":"Sum\u00e9rienne \\(k=10\\) Symboles : -3300 Pas de z\u00e9ro","title":"Base 60"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#troisieme-type","text":"On dispose d'une base \\(b\\) et de symboles repr\u00e9sentant les nombres : \\(1\\) \\(1 \\times b\\) $ 1 \\times b^2$ \\(1 \\times b^3\\) \\(\\cdots\\) \\(2\\) \\(2 \\times b\\) $ 2 \\times b^2$ \\(2 \\times b^3\\) \\(\\cdots\\) \\(3\\) \\(3 \\times b\\) $ 3 \\times b^2$ \\(3 \\times b^3\\) \\(\\cdots\\) \\(\\cdots\\) \\(\\cdots\\) \\(\\cdots\\) \\(\\cdots\\) \\(\\cdots\\) \\(b-1\\) \\((b-1) \\times b\\) $ (b-1) \\times b^2$ \\((b-1) \\times b^3\\) \\(\\cdots\\)","title":"Troisi\u00e8me type"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#base-10_1","text":"Egyptien hieratique Symboles : -2500 Pas de z\u00e9ro Egyptien d\u00e9motique Symboles -750 Pas de z\u00e9ro Alphab\u00e9tique grec Symboles -400 Pas de z\u00e9ro H\u00e9breu alphab\u00e9tique Symboles -200 Pas de z\u00e9ro Alphab\u00e9tique arm\u00e9nien Symboles - +400 - Pas de z\u00e9ro","title":"Base 10"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#s2-numeration-hybride","text":"","title":"S2 - Num\u00e9ration hybride"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#premier-type_1","text":"Dans ce type de num\u00e9ration, la valeur est d\u00e9termin\u00e9e par le nombre d'unit\u00e9s plac\u00e9es \u00e0 gauche des symboles repr\u00e9sentant les puissances de la base \\(b\\) .","title":"Premier type"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#deuxieme-type","text":"Dans ce type de num\u00e9ration, on dispose de 9 symboles pour d\u00e9signer les unit\u00e9s, que l'on place \u00e0 gauche des puissances de la base \\(b\\) .","title":"Deuxi\u00e8me type"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#s3-numeration-positionnelle","text":"Dans ce type de num\u00e9ration, c'est la position des symboles qui d\u00e9termine la puissance de la base \\(b\\) par laquelle il faut multiplier la valeur du symbole.","title":"S3 - Num\u00e9ration positionnelle"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#premier-type_2","text":"Dans ce type, on cumule encore les symboles des unit\u00e9s pour d\u00e9signer les petites valeurs","title":"Premier type"},{"location":"premiere/bloc1/chapitre-01/DEBRANCHE/#second-type_1","text":"Un symbole pour chaque valeur entre 1 et \\(b-1\\) .","title":"Second type"},{"location":"premiere/bloc1/chapitre-03/","text":"Cours Contexte D\u00e9finition Un entier relatif est un nombre qui se pr\u00e9sente comme un entier naturel auquel on a adjoint un signe positif ou n\u00e9gatif indiquant sa position par rapport \u00e0 0 sur un axe orient\u00e9. Dans notre syst\u00e8me de num\u00e9ration d\u00e9cimale, nous utilisons les symboles \\(+\\) et \\(-\\) pour repr\u00e9senter le signe d'un nombre. Question Un ordinateur n'utilise que des \\(0\\) et \\(1\\) . Comment repr\u00e9senter le signe dans un tel syst\u00e8me binaire ? Le binaire sign\u00e9 La premi\u00e8re id\u00e9e qui pourrait nous venir \u00e0 l'esprit est, sur un nombre comportant \\(n\\) bits, d'utiliser 1 bit pour repr\u00e9senter le signe et \\(n-1\\) bit pour repr\u00e9senter la valeur absolue du nombre \u00e0 repr\u00e9senter. Le bit de signe \u00e9tant le bit dit \"de poids fort\" (c'est \u00e0 dire le bit le plus \u00e0 gauche), ce bit de poids fort serait \u00e0 0 dans le cas d'un nombre positif et \u00e0 1 dans le cas d'un nombre n\u00e9gatif. Travail Repr\u00e9senter l'entier 5 en binaire sur 8 bits et -5 en utilisant la m\u00e9thode d\u00e9crite ci-dessus. Solution \\((5)_{10} = (1001)_2\\) Sur 8 bits, cela correspond \u00e0 \\((00001001)_2\\) . En binaire sign\u00e9, le bit de poids fort prend la valeur 1 pour symboliser la n\u00e9gativit\u00e9 du nombre. Soit \\((-5)_{10} = (10001001)_2\\) Soit \\(a \\in \\mathbb{R}\\) , alors \\(a - a = 0\\) . Notons que \\(a + (-a) = 0\\) . Regardons si cette r\u00e8gle est v\u00e9rifi\u00e9e pour 13 et - 13 sur 8 bits : \\[ \\begin{align} & & 0 \\: 0 \\: 0 \\: 0 \\: 1 \\: 1 \\: 0 \\: 1 \\\\ + & & 1 \\: 0 \\: 0 \\: 0 \\: 1 \\: 1 \\: 0 \\: 1 \\\\ \\hline = & & 1 \\: 0 \\: 0 \\: 1 \\: 1 \\: 0 \\: 1 \\: 0 \\end{align} \\] Or \\((10011010)_2 = -26\\) en repr\u00e9sentation binaire sign\u00e9. La r\u00e8gle n'est pas respect\u00e9e. De plus, l'entier 0 a 2 repr\u00e9sentations possibles : \\((00000000)_2\\) et \\((10000000)_2\\) . Compl\u00e9ment \u00e0 2 Le principe du compl\u00e9ment \u00e0 2 d'un entier relatif est le suivant : Repr\u00e9senter la valeur absolue de l'entier relatif sur \\(n\\) bits, Inverser tous les bits (les bits \u00e0 1 passent \u00e0 0 et vice versa), Ajouter 1 au nombre obtenu \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente Le r\u00e9sultat de cette derni\u00e8re op\u00e9ration est la repr\u00e9sentation sur \\(n\\) bits de l'entier relatif. Travail Repr\u00e9senter l'entier 5 en binaire sur 8 bits et -5 en utilisant la m\u00e9thode d\u00e9crite ci-dessus. Solution \\((5)_{10} = (1001)_2\\) . Sur 8 bits, cela correspond \u00e0 \\((00001001)_2\\) . En compl\u00e9ment \u00e0 2, les valeurs des bits sont invers\u00e9s. Soit \\((00001001)_{2} = (11110110)_2\\) On ajoute 1 au nombre pr\u00e9c\u00e9dent. La repr\u00e9sentation binaire de l'entier relatif -5 est \\((11110111)_2\\) V\u00e9rifions que la repr\u00e9sentation par le compl\u00e9ment \u00e0 2 satisfait la r\u00e8gle vue pr\u00e9c\u00e9demment. Exemple avec les entiers 13 et -13 : \\[ \\begin{align} & & \\: 0 \\: 0 \\: 0 \\: 0 \\: 1 \\: 1 \\: 0 \\: 1 \\\\ + & & \\: 1 \\: 1 \\: 1 \\: 1 \\: 0 \\: 0 \\: 1 \\: 1 \\\\ \\hline = & & 1 \\: 0 \\: 0 \\: 0 \\: 0 \\: 0 \\: 0 \\: 0 \\: 0 \\end{align} \\] Dans l'op\u00e9ration ci-dessus, nous avons un 1 pour le 9 i\u00e8me bit, mais comme notre repr\u00e9sentation se limite \u00e0 8 bits, il nous reste bien \\((00000000)_2\\) . Travail Repr\u00e9senter sur 8 bits l'entier 4 puis repr\u00e9senter, toujours sur 8 bits, l'entier -5. Additionner ces 2 nombres, v\u00e9rifier que vous obtenez bien -1. Solution 1 \\[ \\begin{array}{r c} (4)_{10} & = (00001000)_2 \\\\ (5)_{10} & = (00001001)_2 \\\\ (-5)_{10} & = (11110111)_2 \\end{array} \\] Solution 2 \\[ \\begin{align} & & \\: 0 \\: 0 \\: 0 \\: 0 \\: 1 \\: 0 \\: 0 \\: 0 \\\\ + & & \\: 1 \\: 1 \\: 1 \\: 1 \\: 0 \\: 1 \\: 1 \\: 1 \\\\ \\hline = & & \\: 1 \\: 1 \\: 1 \\: 1 \\: 1 \\: 1 \\: 1 \\: 1 \\end{align} \\] Le bit de poids fort est \u00e0 1, il s'agit d'un entier n\u00e9gatif. Pour connaitre sa valeur, on calcule son compl\u00e9ment \u00e0 2 : On retranche 1. Soit, \\((11111110)_2\\) . On inverse la valeur des bits. Soit, \\((00000001)_2\\) . On repr\u00e9sente le nombre en d\u00e9cimale et on lui adjoint le signe \\(-\\) . Soit, \\(-1\\) . Quel est le plus petit entier n\u00e9gatif que l'on peut repr\u00e9senter sur 8 bits ? Le plus petit entier n\u00e9gatif sur 8 bits se repr\u00e9sente en binaire par \\((10000000)_2\\) . Pour obtenir la valeur d\u00e9cimale : On retranche 1. Soit, \\((01111111)_2\\) . On inverse la valeurs des bits. Soit, \\((10000000)_2\\) . On convertit en d\u00e9cimale, en lui ajoutant le signe \\(-\\) . Soit, \\((10000000)_2 = -2^7 = (-128)_{10}\\) Quel est le plus grand entier positif que l'on peut repr\u00e9senter sur 8 bits ? Le plus grand entier positif sur 8 bits se repr\u00e9sente en binaire par \\((01111111)_2\\) . Soit, \\(2^7 - 1 = 127\\) Plus g\u00e9n\u00e9ralement, nous pouvons dire que pour une repr\u00e9sentation sur \\(n\\) bits, il sera possible de coder des valeurs comprises entre \\(-2^{n-1}\\) et \\(+2^{n-1} - 1\\) . Question Quelles sont les bornes inf\u00e9rieure et sup\u00e9rieure d'un entier relatif cod\u00e9 sur 16 bits ? R\u00e9ponse Les bornes des entiers relatifs cod\u00e9s sur 16 bits sont : [ \\((1111111111111111)_2\\) , \\((0111111111111111)_2\\) ], soit [-32768, 32767].","title":"Cours"},{"location":"premiere/bloc1/chapitre-03/#cours","text":"","title":"Cours"},{"location":"premiere/bloc1/chapitre-03/#contexte","text":"D\u00e9finition Un entier relatif est un nombre qui se pr\u00e9sente comme un entier naturel auquel on a adjoint un signe positif ou n\u00e9gatif indiquant sa position par rapport \u00e0 0 sur un axe orient\u00e9. Dans notre syst\u00e8me de num\u00e9ration d\u00e9cimale, nous utilisons les symboles \\(+\\) et \\(-\\) pour repr\u00e9senter le signe d'un nombre. Question Un ordinateur n'utilise que des \\(0\\) et \\(1\\) . Comment repr\u00e9senter le signe dans un tel syst\u00e8me binaire ?","title":"Contexte"},{"location":"premiere/bloc1/chapitre-03/#le-binaire-signe","text":"La premi\u00e8re id\u00e9e qui pourrait nous venir \u00e0 l'esprit est, sur un nombre comportant \\(n\\) bits, d'utiliser 1 bit pour repr\u00e9senter le signe et \\(n-1\\) bit pour repr\u00e9senter la valeur absolue du nombre \u00e0 repr\u00e9senter. Le bit de signe \u00e9tant le bit dit \"de poids fort\" (c'est \u00e0 dire le bit le plus \u00e0 gauche), ce bit de poids fort serait \u00e0 0 dans le cas d'un nombre positif et \u00e0 1 dans le cas d'un nombre n\u00e9gatif. Travail Repr\u00e9senter l'entier 5 en binaire sur 8 bits et -5 en utilisant la m\u00e9thode d\u00e9crite ci-dessus. Solution \\((5)_{10} = (1001)_2\\) Sur 8 bits, cela correspond \u00e0 \\((00001001)_2\\) . En binaire sign\u00e9, le bit de poids fort prend la valeur 1 pour symboliser la n\u00e9gativit\u00e9 du nombre. Soit \\((-5)_{10} = (10001001)_2\\) Soit \\(a \\in \\mathbb{R}\\) , alors \\(a - a = 0\\) . Notons que \\(a + (-a) = 0\\) . Regardons si cette r\u00e8gle est v\u00e9rifi\u00e9e pour 13 et - 13 sur 8 bits : \\[ \\begin{align} & & 0 \\: 0 \\: 0 \\: 0 \\: 1 \\: 1 \\: 0 \\: 1 \\\\ + & & 1 \\: 0 \\: 0 \\: 0 \\: 1 \\: 1 \\: 0 \\: 1 \\\\ \\hline = & & 1 \\: 0 \\: 0 \\: 1 \\: 1 \\: 0 \\: 1 \\: 0 \\end{align} \\] Or \\((10011010)_2 = -26\\) en repr\u00e9sentation binaire sign\u00e9. La r\u00e8gle n'est pas respect\u00e9e. De plus, l'entier 0 a 2 repr\u00e9sentations possibles : \\((00000000)_2\\) et \\((10000000)_2\\) .","title":"Le binaire sign\u00e9"},{"location":"premiere/bloc1/chapitre-03/#complement-a-2","text":"Le principe du compl\u00e9ment \u00e0 2 d'un entier relatif est le suivant : Repr\u00e9senter la valeur absolue de l'entier relatif sur \\(n\\) bits, Inverser tous les bits (les bits \u00e0 1 passent \u00e0 0 et vice versa), Ajouter 1 au nombre obtenu \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente Le r\u00e9sultat de cette derni\u00e8re op\u00e9ration est la repr\u00e9sentation sur \\(n\\) bits de l'entier relatif. Travail Repr\u00e9senter l'entier 5 en binaire sur 8 bits et -5 en utilisant la m\u00e9thode d\u00e9crite ci-dessus. Solution \\((5)_{10} = (1001)_2\\) . Sur 8 bits, cela correspond \u00e0 \\((00001001)_2\\) . En compl\u00e9ment \u00e0 2, les valeurs des bits sont invers\u00e9s. Soit \\((00001001)_{2} = (11110110)_2\\) On ajoute 1 au nombre pr\u00e9c\u00e9dent. La repr\u00e9sentation binaire de l'entier relatif -5 est \\((11110111)_2\\) V\u00e9rifions que la repr\u00e9sentation par le compl\u00e9ment \u00e0 2 satisfait la r\u00e8gle vue pr\u00e9c\u00e9demment. Exemple avec les entiers 13 et -13 : \\[ \\begin{align} & & \\: 0 \\: 0 \\: 0 \\: 0 \\: 1 \\: 1 \\: 0 \\: 1 \\\\ + & & \\: 1 \\: 1 \\: 1 \\: 1 \\: 0 \\: 0 \\: 1 \\: 1 \\\\ \\hline = & & 1 \\: 0 \\: 0 \\: 0 \\: 0 \\: 0 \\: 0 \\: 0 \\: 0 \\end{align} \\] Dans l'op\u00e9ration ci-dessus, nous avons un 1 pour le 9 i\u00e8me bit, mais comme notre repr\u00e9sentation se limite \u00e0 8 bits, il nous reste bien \\((00000000)_2\\) . Travail Repr\u00e9senter sur 8 bits l'entier 4 puis repr\u00e9senter, toujours sur 8 bits, l'entier -5. Additionner ces 2 nombres, v\u00e9rifier que vous obtenez bien -1. Solution 1 \\[ \\begin{array}{r c} (4)_{10} & = (00001000)_2 \\\\ (5)_{10} & = (00001001)_2 \\\\ (-5)_{10} & = (11110111)_2 \\end{array} \\] Solution 2 \\[ \\begin{align} & & \\: 0 \\: 0 \\: 0 \\: 0 \\: 1 \\: 0 \\: 0 \\: 0 \\\\ + & & \\: 1 \\: 1 \\: 1 \\: 1 \\: 0 \\: 1 \\: 1 \\: 1 \\\\ \\hline = & & \\: 1 \\: 1 \\: 1 \\: 1 \\: 1 \\: 1 \\: 1 \\: 1 \\end{align} \\] Le bit de poids fort est \u00e0 1, il s'agit d'un entier n\u00e9gatif. Pour connaitre sa valeur, on calcule son compl\u00e9ment \u00e0 2 : On retranche 1. Soit, \\((11111110)_2\\) . On inverse la valeur des bits. Soit, \\((00000001)_2\\) . On repr\u00e9sente le nombre en d\u00e9cimale et on lui adjoint le signe \\(-\\) . Soit, \\(-1\\) . Quel est le plus petit entier n\u00e9gatif que l'on peut repr\u00e9senter sur 8 bits ? Le plus petit entier n\u00e9gatif sur 8 bits se repr\u00e9sente en binaire par \\((10000000)_2\\) . Pour obtenir la valeur d\u00e9cimale : On retranche 1. Soit, \\((01111111)_2\\) . On inverse la valeurs des bits. Soit, \\((10000000)_2\\) . On convertit en d\u00e9cimale, en lui ajoutant le signe \\(-\\) . Soit, \\((10000000)_2 = -2^7 = (-128)_{10}\\) Quel est le plus grand entier positif que l'on peut repr\u00e9senter sur 8 bits ? Le plus grand entier positif sur 8 bits se repr\u00e9sente en binaire par \\((01111111)_2\\) . Soit, \\(2^7 - 1 = 127\\) Plus g\u00e9n\u00e9ralement, nous pouvons dire que pour une repr\u00e9sentation sur \\(n\\) bits, il sera possible de coder des valeurs comprises entre \\(-2^{n-1}\\) et \\(+2^{n-1} - 1\\) . Question Quelles sont les bornes inf\u00e9rieure et sup\u00e9rieure d'un entier relatif cod\u00e9 sur 16 bits ? R\u00e9ponse Les bornes des entiers relatifs cod\u00e9s sur 16 bits sont : [ \\((1111111111111111)_2\\) , \\((0111111111111111)_2\\) ], soit [-32768, 32767].","title":"Compl\u00e9ment \u00e0 2"},{"location":"premiere/bloc1/chapitre-04/","text":"Cours Source : alloprof.qc.ca Question Prenons le nombre r\u00e9el 4,1875, nous savons repr\u00e9senter la partie enti\u00e8re 4 : \\((1000)_2\\) . Comment repr\u00e9senter le ,1875 ? Rappel sur les entiers naturels Comme vu au chapitre Conversion D\u00e9cimale / Binaire , pour obtenir la repr\u00e9sentation binaire \u00e0 partir d'un nombre en base 10, on effectue les divisions successives par 2. on divise 13 par 2 \u21d2 6 et il reste 1 on divise 6 par 2 \u21d2 3 et il reste 0 on divise 3 par 2 \u21d2 1 et il reste 1 on divise 1 par 2 \u21d2 0 et il reste 1 On \u00e9crit les restes dans l'ordre inverse 13 = \\((1101)_2\\) Ex\u00e9cutons les m\u00eames op\u00e9rations en regardant la repr\u00e9sentation binaire de 13 et les restes des divisions successives. \\[ \\begin{align} \\begin{array}{| c | c | c | c | c |} \\hline 2^3 & 2^2 & 2^1 & 2^0 & \\mbox{Reste} \\\\ \\hline 1 & 1 & 0 & 1 & - \\end{array} \\newline \\Downarrow \\mbox{On divise par 2} \\\\ \\begin{array}{| c | c | c | c | c |} \\hline 2^3 & 2^2 & 2^1 & 2^0 & \\mbox{Reste} \\\\ \\hline & 1 & 1 & 0 & 1 \\end{array} \\newline \\Downarrow \\mbox{On divise par 2} \\\\ \\begin{array}{| c | c | c | c | c |} \\hline 2^3 & 2^2 & 2^1 & 2^0 & \\mbox{Reste} \\\\ \\hline & & 1 & 1 & 0 \\end{array} \\newline \\Downarrow \\mbox{On divise par 2} \\\\ \\begin{array}{| c | c | c | c | c |} \\hline 2^3 & 2^2 & 2^1 & 2^0 & \\mbox{Reste} \\\\ \\hline & & & 1 & 1 \\end{array} \\newline \\Downarrow \\mbox{On divise par 2} \\\\ \\begin{array}{| c | c | c | c | c |} \\hline 2^3 & 2^2 & 2^1 & 2^0 & \\mbox{Reste} \\\\ \\hline & & & & 1 \\end{array} \\end{align} \\] Quel est le lien entre le fait de diviser par 2 et la position des bits ? Diviser un entier par 2 \u27fa D\u00e9caler d'1 bit \u00e0 droite. Reste de la division par 2 \u27fa Valeur du bit d\u00e9cal\u00e9. Repr\u00e9sentation de la partie d\u00e9cimale d'un nombre Fort des observations pr\u00e9c\u00e9dentes... Comment calculer la repr\u00e9sentation binaire de ,1875 ? Multiplier la partie d\u00e9cimale par 2 \u27fa D\u00e9caler d'1 bit \u00e0 gauche. Partie enti\u00e8re du r\u00e9sultat \u27fa Valeur du bit d\u00e9cal\u00e9. Exemple pour 0,1875 : on multiplie 0,1875 par 2 \u21d2 0,375 que l'on \u00e9crit 0 + 0,375 on multiplie 0,375 par 2 \u21d2 0,75 que l'on \u00e9crit 0 + 0,75 on multiplie 0,75 par 2 \u21d2 1,5 que l'on \u00e9crit 1 + 0,5 on multiplie 0,5 par 2 \u21d2 1,0 que l'on \u00e9crit 1 + 0,0 On \u00e9crit les parties d\u00e9cimales dans l'ordre \\((,0011)_2 = (,1875)_{10}\\) . Ainsi: \\[ 4,1875 = (1000, 0011)_2 \\] On peut v\u00e9rifier que la partie d\u00e9cimale peut s'\u00e9crire sous la forme : \\[ \\begin{align} 0,1875 & = 0 \\times 2^{-1} + 0 \\times 2^{-2} + 1 \\times 2^{-3} + 1 \\times 2^{-4} \\\\ & = \\frac{1}{8} + \\frac{1}{16} \\\\ & = \\frac{3}{16} \\end{align} \\] Travail Calculer la repr\u00e9sentation binaire de 5,125. Calculer le nombre flottant repr\u00e9sent\u00e9 en binaire par \\((100,101)_2\\) . Calculer la repr\u00e9sentation binaire de \\((0,1)_{10}\\) . Solution 1 Pour la partie enti\u00e8re 5, on applique l'algorithme vu dans le Chapitre 01 . Soit, \\(5 = (1001)_2\\) Pour la partie d\u00e9cimale, on effectue les multiplications successives : on multiplie 0,125 par 2 \u21d2 0,25 que l'on \u00e9crit 0 + 0,25 on multiplie 0,25 par 2 \u21d2 0,5 que l'on \u00e9crit 0 + 0,5 on multiplie 0,5 par 2 \u21d2 1,0 que l'on \u00e9crit 1 + 0 il reste 0, le calcul est termin\u00e9. La repr\u00e9sentation binaire correspond aux restes successifs. Soit, \\(0,125 = (0,001)_2\\) . Solution 2 Repr\u00e9sentons le nombre \\((100,101)_2\\) dans un tableau des puissances de 2 : \\(2^3\\) \\(2^2\\) \\(2^1\\) \\(2^0\\) \\(2^{-1}\\) \\(2^{-2}\\) \\(2^{-3}\\) 0 1 0 0 1 0 1 Le nombre \\(n\\) repr\u00e9sent\u00e9 en binaire correspond \u00e0 : \\[ \\begin{align} n & = 2^2 + 2^{-1} + 2^{-3} \\\\ & = 4 + \\frac{1}{2} + \\frac{1}{8} \\\\ & = \\frac{32 + 4 + 1}{8} = \\frac{37}{8} \\\\ & = 4,625 \\end{align} \\] Solution 3 on multiplie 0,1 par 2 \u21d2 0,2 que l'on \u00e9crit 0 + 0,2 on multiplie 0,2 par 2 \u21d2 0,4 que l'on \u00e9crit 0 + 0,4 on multiplie 0,4 par 2 \u21d2 0,8 que l'on \u00e9crit 0 + 0,8 on multiplie 0,8 par 2 \u21d2 1,6 que l'on \u00e9crit 1 + 0,6 on multiplie 0,6 par 2 \u21d2 1,2 que l'on \u00e9crit 1 + 0,2 on multiplie 0,2 par 2 \u21d2 0,4 que l'on \u00e9crit 0 + 0,4 ...A ce stade, on rentre dans une boucle infinie, le calcul de la repr\u00e9sentation binaire ne s'arr\u00eate pas ! Ressources [1] - Standard IEEE 754 des nombres \u00e0 virgule flottante, Ronan Boulic, Youtube [2] - Floating Point Numbers, Computerphile, Youtube","title":"Cours"},{"location":"premiere/bloc1/chapitre-04/#cours","text":"Source : alloprof.qc.ca Question Prenons le nombre r\u00e9el 4,1875, nous savons repr\u00e9senter la partie enti\u00e8re 4 : \\((1000)_2\\) . Comment repr\u00e9senter le ,1875 ?","title":"Cours"},{"location":"premiere/bloc1/chapitre-04/#rappel-sur-les-entiers-naturels","text":"Comme vu au chapitre Conversion D\u00e9cimale / Binaire , pour obtenir la repr\u00e9sentation binaire \u00e0 partir d'un nombre en base 10, on effectue les divisions successives par 2. on divise 13 par 2 \u21d2 6 et il reste 1 on divise 6 par 2 \u21d2 3 et il reste 0 on divise 3 par 2 \u21d2 1 et il reste 1 on divise 1 par 2 \u21d2 0 et il reste 1 On \u00e9crit les restes dans l'ordre inverse 13 = \\((1101)_2\\) Ex\u00e9cutons les m\u00eames op\u00e9rations en regardant la repr\u00e9sentation binaire de 13 et les restes des divisions successives. \\[ \\begin{align} \\begin{array}{| c | c | c | c | c |} \\hline 2^3 & 2^2 & 2^1 & 2^0 & \\mbox{Reste} \\\\ \\hline 1 & 1 & 0 & 1 & - \\end{array} \\newline \\Downarrow \\mbox{On divise par 2} \\\\ \\begin{array}{| c | c | c | c | c |} \\hline 2^3 & 2^2 & 2^1 & 2^0 & \\mbox{Reste} \\\\ \\hline & 1 & 1 & 0 & 1 \\end{array} \\newline \\Downarrow \\mbox{On divise par 2} \\\\ \\begin{array}{| c | c | c | c | c |} \\hline 2^3 & 2^2 & 2^1 & 2^0 & \\mbox{Reste} \\\\ \\hline & & 1 & 1 & 0 \\end{array} \\newline \\Downarrow \\mbox{On divise par 2} \\\\ \\begin{array}{| c | c | c | c | c |} \\hline 2^3 & 2^2 & 2^1 & 2^0 & \\mbox{Reste} \\\\ \\hline & & & 1 & 1 \\end{array} \\newline \\Downarrow \\mbox{On divise par 2} \\\\ \\begin{array}{| c | c | c | c | c |} \\hline 2^3 & 2^2 & 2^1 & 2^0 & \\mbox{Reste} \\\\ \\hline & & & & 1 \\end{array} \\end{align} \\] Quel est le lien entre le fait de diviser par 2 et la position des bits ? Diviser un entier par 2 \u27fa D\u00e9caler d'1 bit \u00e0 droite. Reste de la division par 2 \u27fa Valeur du bit d\u00e9cal\u00e9.","title":"Rappel sur les entiers naturels"},{"location":"premiere/bloc1/chapitre-04/#representation-de-la-partie-decimale-dun-nombre","text":"Fort des observations pr\u00e9c\u00e9dentes... Comment calculer la repr\u00e9sentation binaire de ,1875 ? Multiplier la partie d\u00e9cimale par 2 \u27fa D\u00e9caler d'1 bit \u00e0 gauche. Partie enti\u00e8re du r\u00e9sultat \u27fa Valeur du bit d\u00e9cal\u00e9. Exemple pour 0,1875 : on multiplie 0,1875 par 2 \u21d2 0,375 que l'on \u00e9crit 0 + 0,375 on multiplie 0,375 par 2 \u21d2 0,75 que l'on \u00e9crit 0 + 0,75 on multiplie 0,75 par 2 \u21d2 1,5 que l'on \u00e9crit 1 + 0,5 on multiplie 0,5 par 2 \u21d2 1,0 que l'on \u00e9crit 1 + 0,0 On \u00e9crit les parties d\u00e9cimales dans l'ordre \\((,0011)_2 = (,1875)_{10}\\) . Ainsi: \\[ 4,1875 = (1000, 0011)_2 \\] On peut v\u00e9rifier que la partie d\u00e9cimale peut s'\u00e9crire sous la forme : \\[ \\begin{align} 0,1875 & = 0 \\times 2^{-1} + 0 \\times 2^{-2} + 1 \\times 2^{-3} + 1 \\times 2^{-4} \\\\ & = \\frac{1}{8} + \\frac{1}{16} \\\\ & = \\frac{3}{16} \\end{align} \\] Travail Calculer la repr\u00e9sentation binaire de 5,125. Calculer le nombre flottant repr\u00e9sent\u00e9 en binaire par \\((100,101)_2\\) . Calculer la repr\u00e9sentation binaire de \\((0,1)_{10}\\) . Solution 1 Pour la partie enti\u00e8re 5, on applique l'algorithme vu dans le Chapitre 01 . Soit, \\(5 = (1001)_2\\) Pour la partie d\u00e9cimale, on effectue les multiplications successives : on multiplie 0,125 par 2 \u21d2 0,25 que l'on \u00e9crit 0 + 0,25 on multiplie 0,25 par 2 \u21d2 0,5 que l'on \u00e9crit 0 + 0,5 on multiplie 0,5 par 2 \u21d2 1,0 que l'on \u00e9crit 1 + 0 il reste 0, le calcul est termin\u00e9. La repr\u00e9sentation binaire correspond aux restes successifs. Soit, \\(0,125 = (0,001)_2\\) . Solution 2 Repr\u00e9sentons le nombre \\((100,101)_2\\) dans un tableau des puissances de 2 : \\(2^3\\) \\(2^2\\) \\(2^1\\) \\(2^0\\) \\(2^{-1}\\) \\(2^{-2}\\) \\(2^{-3}\\) 0 1 0 0 1 0 1 Le nombre \\(n\\) repr\u00e9sent\u00e9 en binaire correspond \u00e0 : \\[ \\begin{align} n & = 2^2 + 2^{-1} + 2^{-3} \\\\ & = 4 + \\frac{1}{2} + \\frac{1}{8} \\\\ & = \\frac{32 + 4 + 1}{8} = \\frac{37}{8} \\\\ & = 4,625 \\end{align} \\] Solution 3 on multiplie 0,1 par 2 \u21d2 0,2 que l'on \u00e9crit 0 + 0,2 on multiplie 0,2 par 2 \u21d2 0,4 que l'on \u00e9crit 0 + 0,4 on multiplie 0,4 par 2 \u21d2 0,8 que l'on \u00e9crit 0 + 0,8 on multiplie 0,8 par 2 \u21d2 1,6 que l'on \u00e9crit 1 + 0,6 on multiplie 0,6 par 2 \u21d2 1,2 que l'on \u00e9crit 1 + 0,2 on multiplie 0,2 par 2 \u21d2 0,4 que l'on \u00e9crit 0 + 0,4 ...A ce stade, on rentre dans une boucle infinie, le calcul de la repr\u00e9sentation binaire ne s'arr\u00eate pas !","title":"Repr\u00e9sentation de la partie d\u00e9cimale d'un nombre"},{"location":"premiere/bloc1/chapitre-04/#ressources","text":"[1] - Standard IEEE 754 des nombres \u00e0 virgule flottante, Ronan Boulic, Youtube [2] - Floating Point Numbers, Computerphile, Youtube","title":"Ressources"},{"location":"premiere/bloc1/chapitre-05/","text":"Cours Source : Pixabay Contexte On rencontre des bool\u00e9ens dans diverses situations quotidiennes : un interrupteur (ouvert / ferm\u00e9), un jeter de pi\u00e8ce de monnaie (pile / face) ... D\u00e9finition Un bool\u00e9en est un type de variable \u00e0 deux \u00e9tats, muni des op\u00e9rations ET, OU, NON. Ce sujet est \u00e0 la confluence de 3 domaines : \u00e9lectronique, logique et informatique. D'o\u00f9 des notations diverses pour cette notion. Notation Repr\u00e9sentation Fran\u00e7ais \u00c9lectronique Logique Ensembliste Python Etat Etat Haut Vrai \u22a4 1 1 True Etat Bas Faux \u22a5 0 0 False Op\u00e9rations NON NON \u00aca a not ET ET a . b a \u2227 b and OU OU a + b a \u2228 b or Table de v\u00e9rit\u00e9 On repr\u00e9sente l'ensemble valeurs d'entr\u00e9es et sorties par une table de v\u00e9rit\u00e9. A chaque variable d'entr\u00e9e correspond une colonne, et chaque ligne, une valeur d'\u00e9tat possible. Une colonne de sortie contient la valeur de l'\u00e9tat de l'op\u00e9ration. Op\u00e9rateur NON Repr\u00e9sentation Am\u00e9ricain Europ\u00e9en Signe math\u00e9matique \u00aca Entr\u00e9e Sortie a S = \u00aca 0 1 1 0 Op\u00e9rateur ET (AND) Porte ET (AND) Entr\u00e9e Sortie a b S = a \u2227 b 0 0 0 0 1 0 1 0 0 1 1 1 Op\u00e9rateur OU (OR) Porte OU (OR) Entr\u00e9e Sortie a b S = a \u2228 b 0 0 0 0 1 1 1 0 1 1 1 1 \u00c0 partir de ces 3 op\u00e9rateurs, il est possible d'en d\u00e9crire d'autres. Travail \u00c9crire les tables de v\u00e9rit\u00e9 des op\u00e9rateurs suivants : Op\u00e9rateur Repr\u00e9sentation International Fran\u00e7ais Signe math\u00e9matique NON ET (NAND) \\(\u00ac(a \u2227b)\\) NON OU (NOR) \\(\u00ac(a\u2228b)\\) OU EXCLUSIF (XOR) \\(a \\oplus b\\) NON OU EXCLUSIF (XNOR) \\(\u00ac(a \\oplus b)\\) * OU EXCLUSIF (XOR) : vaut 1 si uniquement une des deux valeurs de a ou de b vaut 1. Solution NON ET S = \u00ac(a \u2227 b) a b (a \u2227 b) \u00ac(a \u2227 b) 0 0 0 1 0 1 0 1 1 0 0 1 1 1 1 0 Solution NON OU S = \u00ac(a \u2228 b) a b (a \u2228 b) \u00ac(a \u2228 b) 0 0 0 1 0 1 1 0 1 0 1 0 1 1 1 0 Solution OU EXCLUSIF S = a \u2295 b a b a \u2295 b 0 0 0 0 1 1 1 0 1 1 1 0 Solution NON OU EXCLUSIF S = \u00ac(a \u2295 b) a b a \u2295 b \u00ac(a \u2295 b) 0 0 0 1 0 1 1 0 1 0 1 0 1 1 0 1 Propri\u00e9t\u00e9s Les op\u00e9rateurs suivent plusieurs propri\u00e9t\u00e9s communes: Associativit\u00e9 : Comme avec les op\u00e9rations habituelles, certaines parenth\u00e8ses sont inutiles. Exemple : \\(( a \u2227 b ) \u2227 c = a \u2227 (b \u2227 c) = a \u2227 b \u2227 c\\) Commutativit\u00e9 : L'ordre est sans importance. Exemple : \\(a \u2227 b = b \u2227 a\\) Distributivit\u00e9 : Exemple : \\(a \u2228 ( b \u2227 c ) = ( a \u2228 b ) \u2227 ( a \u2228 c )\\) Idempotence : Exemple : \\(a \u2227 a \u2227 a \u2227 [...] \u2227 a = a\\) Expressions bool\u00e9ennes \u00c0 l\u2019aide de l'ensemble des op\u00e9rateurs vus ci-dessus, on peut construire des expressions ou fonctions, que l'on \u00e9value en \u00e9tablissant sa table de v\u00e9rit\u00e9. Exemple : \\(S(a, b) = \\mbox{ NOT }(a \\mbox{ AND }b)\\) Entr\u00e9e Sortie a b S 1 = a AND b S = NOT(S 1 ) 0 0 0 1 0 1 0 1 1 0 0 1 1 1 1 0 Exercices \u00c9tablir des tables de v\u00e9rit\u00e9 Travail \u00c9crire les tables de v\u00e9rit\u00e9 des expressions bool\u00e9ennes suivantes : S(a, b) = (NOT(a) AND b) S(a, b) = b OR (a AND b) S(a, b) = a AND (a OR b) S(a, b, c) = (NOT(a) AND b) OR (a AND c) Communication = \u00c9metteur ET R\u00e9cepteur D\u00e9crocher = (Sonnerie ET D\u00e9cision de r\u00e9pondre) OU d\u00e9cision d'appeler Bac = Avoir la moyenne OU (NON Avoir la moyenne ET rattrapage) Solution 1 S(a, b) = (NOT(a) AND b) a b NOT(a) NOT(a) AND b 0 0 1 0 0 1 1 1 1 0 0 0 1 1 0 0 Solution 2 S(a, b) = b OR (a AND b) a b a AND b b OR (a AND b) 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 1 Solution 3 S(a, b) = a AND (a OR b) a b a OR b a AND (a OR b) 0 0 0 0 0 1 1 0 1 0 1 1 1 1 1 1 Solution 4 S(a, b, c) = (NOT(a) AND b) OR (a AND c) a b c NOT(a) S 1 = NOT(a) AND b S 2 = a AND c S 1 OR S 2 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 1 0 1 1 0 1 0 1 1 1 1 0 1 1 0 0 0 0 0 0 1 0 1 0 0 1 1 1 1 0 0 0 0 0 1 1 1 0 0 1 1 Solution 5 Communication = \u00c9metteur ET R\u00e9cepteur \u00c9metteur R\u00e9cepteur Communication 0 0 0 0 1 0 1 0 0 1 1 1 Solution 6 D\u00e9crocher = (Sonnerie ET D\u00e9cision de r\u00e9pondre) OU d\u00e9cision d'appeler Sonnerie D\u00e9cision de r\u00e9pondre d\u00e9cision d'appeler (Sonnerie ET D\u00e9cision de r\u00e9pondre) D\u00e9crocher 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 Solution 7 Bac = Avoir la moyenne OU (NON Avoir la moyenne ET rattrapage) Avoir la moyenne Non Avoir la moyenne rattrapage (NON Avoir la moyenne ET rattrapage) Bac 0 1 0 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 1 \u00c9quivalence d'expressions bool\u00e9ennes Travail Montrer que (a AND b) = NOT(NOT(a) OR NOT(b)) Montrer que (a OR b) = NOT(NOT(a) AND NOT(b)) Analyse Deux expressions bool\u00e9ennes sont \u00e9quivalentes si leurs tables de v\u00e9rit\u00e9 le sont. Autrement dit, si pour toutes les entr\u00e9es des tables de v\u00e9rit\u00e9, l'ensemble des valeurs de sorties de ces m\u00eames tables sont \u00e9quivalentes alors les expressions bool\u00e9ennes sont \u00e9quivalentes. Solution 1 a b (a AND b) NOT(a) NOT(b) NOT(a) OR NOT(b) NOT(NOT(a) OR NOT(b)) 0 0 0 1 1 1 0 0 1 0 1 0 1 0 1 0 0 0 1 1 0 1 1 1 0 0 0 1 Solution 2 a b (a OR b) NOT(a) NOT(b) NOT(a) AND NOT(b) NOT(NOT(a) AND NOT(b)) 0 0 0 1 1 1 0 0 1 1 1 0 0 1 1 0 1 0 1 0 1 1 1 1 0 0 0 1 D\u00e9terminer une expression bool\u00e9enne Travail Trouver l'expression bool\u00e9enne, not\u00e9e ssi(a, b) \u00e0 partir de sa table de v\u00e9rit\u00e9 : a b ssi(a, b) 0 0 1 0 1 0 1 0 0 1 1 1 Solution a b ssi(a, b) S 1 = a AND b S 2 = NOT(a) AND NOT(b) ssi = S 1 OR S 2 NOT(a \u2295 b) 0 0 1 0 1 1 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 0 1 1 ssi(a, b) = (a AND b) OR (NOT(a) AND NOT(b)) = NOT(a \u2295 b) Lois de De Morgan NON (a OU b) = NON a ET NON b NON (a ET b) = NON a OU NON b Travail D\u00e9montrer ces 2 formules D\u00e9monstration 1 a b a OU b NON (a OU b) NON a NON b NON a ET NON b 0 0 0 1 1 1 1 0 1 1 0 1 0 0 1 0 1 0 0 1 0 1 1 1 0 0 0 0 D\u00e9monstration 2 a b a ET b NON (a ET b) NON a NON b NON a OU NON b 0 0 0 1 1 1 1 0 1 0 1 1 0 1 1 0 0 1 0 1 1 1 1 1 0 0 0 0 Tableaux de Karnaugh","title":"Cours"},{"location":"premiere/bloc1/chapitre-05/#cours","text":"Source : Pixabay","title":"Cours"},{"location":"premiere/bloc1/chapitre-05/#contexte","text":"On rencontre des bool\u00e9ens dans diverses situations quotidiennes : un interrupteur (ouvert / ferm\u00e9), un jeter de pi\u00e8ce de monnaie (pile / face) ... D\u00e9finition Un bool\u00e9en est un type de variable \u00e0 deux \u00e9tats, muni des op\u00e9rations ET, OU, NON. Ce sujet est \u00e0 la confluence de 3 domaines : \u00e9lectronique, logique et informatique. D'o\u00f9 des notations diverses pour cette notion.","title":"Contexte"},{"location":"premiere/bloc1/chapitre-05/#notation","text":"Repr\u00e9sentation Fran\u00e7ais \u00c9lectronique Logique Ensembliste Python Etat Etat Haut Vrai \u22a4 1 1 True Etat Bas Faux \u22a5 0 0 False Op\u00e9rations NON NON \u00aca a not ET ET a . b a \u2227 b and OU OU a + b a \u2228 b or","title":"Notation"},{"location":"premiere/bloc1/chapitre-05/#table-de-verite","text":"On repr\u00e9sente l'ensemble valeurs d'entr\u00e9es et sorties par une table de v\u00e9rit\u00e9. A chaque variable d'entr\u00e9e correspond une colonne, et chaque ligne, une valeur d'\u00e9tat possible. Une colonne de sortie contient la valeur de l'\u00e9tat de l'op\u00e9ration.","title":"Table de v\u00e9rit\u00e9"},{"location":"premiere/bloc1/chapitre-05/#operateur-non","text":"Repr\u00e9sentation Am\u00e9ricain Europ\u00e9en Signe math\u00e9matique \u00aca Entr\u00e9e Sortie a S = \u00aca 0 1 1 0","title":"Op\u00e9rateur NON"},{"location":"premiere/bloc1/chapitre-05/#operateur-et-and","text":"Porte ET (AND) Entr\u00e9e Sortie a b S = a \u2227 b 0 0 0 0 1 0 1 0 0 1 1 1","title":"Op\u00e9rateur ET (AND)"},{"location":"premiere/bloc1/chapitre-05/#operateur-ou-or","text":"Porte OU (OR) Entr\u00e9e Sortie a b S = a \u2228 b 0 0 0 0 1 1 1 0 1 1 1 1 \u00c0 partir de ces 3 op\u00e9rateurs, il est possible d'en d\u00e9crire d'autres. Travail \u00c9crire les tables de v\u00e9rit\u00e9 des op\u00e9rateurs suivants : Op\u00e9rateur Repr\u00e9sentation International Fran\u00e7ais Signe math\u00e9matique NON ET (NAND) \\(\u00ac(a \u2227b)\\) NON OU (NOR) \\(\u00ac(a\u2228b)\\) OU EXCLUSIF (XOR) \\(a \\oplus b\\) NON OU EXCLUSIF (XNOR) \\(\u00ac(a \\oplus b)\\) * OU EXCLUSIF (XOR) : vaut 1 si uniquement une des deux valeurs de a ou de b vaut 1. Solution NON ET S = \u00ac(a \u2227 b) a b (a \u2227 b) \u00ac(a \u2227 b) 0 0 0 1 0 1 0 1 1 0 0 1 1 1 1 0 Solution NON OU S = \u00ac(a \u2228 b) a b (a \u2228 b) \u00ac(a \u2228 b) 0 0 0 1 0 1 1 0 1 0 1 0 1 1 1 0 Solution OU EXCLUSIF S = a \u2295 b a b a \u2295 b 0 0 0 0 1 1 1 0 1 1 1 0 Solution NON OU EXCLUSIF S = \u00ac(a \u2295 b) a b a \u2295 b \u00ac(a \u2295 b) 0 0 0 1 0 1 1 0 1 0 1 0 1 1 0 1","title":"Op\u00e9rateur OU (OR)"},{"location":"premiere/bloc1/chapitre-05/#proprietes","text":"Les op\u00e9rateurs suivent plusieurs propri\u00e9t\u00e9s communes: Associativit\u00e9 : Comme avec les op\u00e9rations habituelles, certaines parenth\u00e8ses sont inutiles. Exemple : \\(( a \u2227 b ) \u2227 c = a \u2227 (b \u2227 c) = a \u2227 b \u2227 c\\) Commutativit\u00e9 : L'ordre est sans importance. Exemple : \\(a \u2227 b = b \u2227 a\\) Distributivit\u00e9 : Exemple : \\(a \u2228 ( b \u2227 c ) = ( a \u2228 b ) \u2227 ( a \u2228 c )\\) Idempotence : Exemple : \\(a \u2227 a \u2227 a \u2227 [...] \u2227 a = a\\)","title":"Propri\u00e9t\u00e9s"},{"location":"premiere/bloc1/chapitre-05/#expressions-booleennes","text":"\u00c0 l\u2019aide de l'ensemble des op\u00e9rateurs vus ci-dessus, on peut construire des expressions ou fonctions, que l'on \u00e9value en \u00e9tablissant sa table de v\u00e9rit\u00e9. Exemple : \\(S(a, b) = \\mbox{ NOT }(a \\mbox{ AND }b)\\) Entr\u00e9e Sortie a b S 1 = a AND b S = NOT(S 1 ) 0 0 0 1 0 1 0 1 1 0 0 1 1 1 1 0","title":"Expressions bool\u00e9ennes"},{"location":"premiere/bloc1/chapitre-05/#exercices","text":"","title":"Exercices"},{"location":"premiere/bloc1/chapitre-05/#etablir-des-tables-de-verite","text":"Travail \u00c9crire les tables de v\u00e9rit\u00e9 des expressions bool\u00e9ennes suivantes : S(a, b) = (NOT(a) AND b) S(a, b) = b OR (a AND b) S(a, b) = a AND (a OR b) S(a, b, c) = (NOT(a) AND b) OR (a AND c) Communication = \u00c9metteur ET R\u00e9cepteur D\u00e9crocher = (Sonnerie ET D\u00e9cision de r\u00e9pondre) OU d\u00e9cision d'appeler Bac = Avoir la moyenne OU (NON Avoir la moyenne ET rattrapage) Solution 1 S(a, b) = (NOT(a) AND b) a b NOT(a) NOT(a) AND b 0 0 1 0 0 1 1 1 1 0 0 0 1 1 0 0 Solution 2 S(a, b) = b OR (a AND b) a b a AND b b OR (a AND b) 0 0 0 0 0 1 0 1 1 0 0 0 1 1 1 1 Solution 3 S(a, b) = a AND (a OR b) a b a OR b a AND (a OR b) 0 0 0 0 0 1 1 0 1 0 1 1 1 1 1 1 Solution 4 S(a, b, c) = (NOT(a) AND b) OR (a AND c) a b c NOT(a) S 1 = NOT(a) AND b S 2 = a AND c S 1 OR S 2 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 1 0 1 1 0 1 0 1 1 1 1 0 1 1 0 0 0 0 0 0 1 0 1 0 0 1 1 1 1 0 0 0 0 0 1 1 1 0 0 1 1 Solution 5 Communication = \u00c9metteur ET R\u00e9cepteur \u00c9metteur R\u00e9cepteur Communication 0 0 0 0 1 0 1 0 0 1 1 1 Solution 6 D\u00e9crocher = (Sonnerie ET D\u00e9cision de r\u00e9pondre) OU d\u00e9cision d'appeler Sonnerie D\u00e9cision de r\u00e9pondre d\u00e9cision d'appeler (Sonnerie ET D\u00e9cision de r\u00e9pondre) D\u00e9crocher 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 Solution 7 Bac = Avoir la moyenne OU (NON Avoir la moyenne ET rattrapage) Avoir la moyenne Non Avoir la moyenne rattrapage (NON Avoir la moyenne ET rattrapage) Bac 0 1 0 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 0 1","title":"\u00c9tablir des tables de v\u00e9rit\u00e9"},{"location":"premiere/bloc1/chapitre-05/#equivalence-dexpressions-booleennes","text":"Travail Montrer que (a AND b) = NOT(NOT(a) OR NOT(b)) Montrer que (a OR b) = NOT(NOT(a) AND NOT(b)) Analyse Deux expressions bool\u00e9ennes sont \u00e9quivalentes si leurs tables de v\u00e9rit\u00e9 le sont. Autrement dit, si pour toutes les entr\u00e9es des tables de v\u00e9rit\u00e9, l'ensemble des valeurs de sorties de ces m\u00eames tables sont \u00e9quivalentes alors les expressions bool\u00e9ennes sont \u00e9quivalentes. Solution 1 a b (a AND b) NOT(a) NOT(b) NOT(a) OR NOT(b) NOT(NOT(a) OR NOT(b)) 0 0 0 1 1 1 0 0 1 0 1 0 1 0 1 0 0 0 1 1 0 1 1 1 0 0 0 1 Solution 2 a b (a OR b) NOT(a) NOT(b) NOT(a) AND NOT(b) NOT(NOT(a) AND NOT(b)) 0 0 0 1 1 1 0 0 1 1 1 0 0 1 1 0 1 0 1 0 1 1 1 1 0 0 0 1","title":"\u00c9quivalence d'expressions bool\u00e9ennes"},{"location":"premiere/bloc1/chapitre-05/#determiner-une-expression-booleenne","text":"Travail Trouver l'expression bool\u00e9enne, not\u00e9e ssi(a, b) \u00e0 partir de sa table de v\u00e9rit\u00e9 : a b ssi(a, b) 0 0 1 0 1 0 1 0 0 1 1 1 Solution a b ssi(a, b) S 1 = a AND b S 2 = NOT(a) AND NOT(b) ssi = S 1 OR S 2 NOT(a \u2295 b) 0 0 1 0 1 1 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 0 1 1 ssi(a, b) = (a AND b) OR (NOT(a) AND NOT(b)) = NOT(a \u2295 b)","title":"D\u00e9terminer une expression bool\u00e9enne"},{"location":"premiere/bloc1/chapitre-05/#lois-de-de-morgan","text":"NON (a OU b) = NON a ET NON b NON (a ET b) = NON a OU NON b Travail D\u00e9montrer ces 2 formules D\u00e9monstration 1 a b a OU b NON (a OU b) NON a NON b NON a ET NON b 0 0 0 1 1 1 1 0 1 1 0 1 0 0 1 0 1 0 0 1 0 1 1 1 0 0 0 0 D\u00e9monstration 2 a b a ET b NON (a ET b) NON a NON b NON a OU NON b 0 0 0 1 1 1 1 0 1 0 1 1 0 1 1 0 0 1 0 1 1 1 1 1 0 0 0 0","title":"Lois de De Morgan"},{"location":"premiere/bloc1/chapitre-05/#tableaux-de-karnaugh","text":"","title":"Tableaux de Karnaugh"},{"location":"premiere/bloc1/chapitre-05/PROJET/","text":"Qui est-ce ?","title":"Qui est-ce ?"},{"location":"premiere/bloc1/chapitre-05/PROJET/#qui-est-ce","text":"","title":"Qui est-ce ?"},{"location":"premiere/bloc1/chapitre-05/TP/","text":"Myst\u00e8re Description L'id\u00e9e de ce TP est de manipuler les expressions bool\u00e9ennes. Pour cela, vous allez devoir enqu\u00eater pour retrouver, \u00e0 partir d'indices, des fonctions bool\u00e9ennes myst\u00e8res. A chaque fonction mystere suivante, sont donn\u00e9es des doctests. Ces doctests correspondent aux valeurs des tables de v\u00e9rit\u00e9s. Consignes Recopier le bloc de code suivant dans un fichier mystere.py Vous devez \u00e9crire le corps de la fonction sous la forme d'une expression bool\u00e9enne, dont les variables correspondent aux param\u00e8tres d'entr\u00e9e fournis. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def mystere1 ( a ): ''' >>> mystere1(True) False >>> mystere1(False) True ''' pass def mystere2 ( a , b ): ''' >>> mystere2(True, True) True >>> mystere2(True, False) True >>> mystere2(False, True) True >>> mystere2(False, False) False ''' pass def mystere3 ( a , b ): ''' >>> mystere3(True, True) False >>> mystere3(True, False) True >>> mystere3(False, True) True >>> mystere3(False, False) False ''' pass def mystere4 ( a , b ): ''' >>> mystere4(True, True) False >>> mystere4(True, False) False >>> mystere4(False, True) False >>> mystere4(False, False) True ''' pass def mystere5 ( a , b ): ''' >>> mystere5(True, True) True >>> mystere5(True, False) False >>> mystere5(False, True) False >>> mystere5(False, False) True ''' pass def mystere6 ( a , b ): ''' >>> mystere6(True, True) False >>> mystere6(True, False) True >>> mystere6(False, True) False >>> mystere6(False, False) False ''' pass def mystere7 ( a , b ): ''' >>> mystere7(True, True) False >>> mystere7(True, False) True >>> mystere7(False, True) False >>> mystere7(False, False) True ''' pass if __name__ == '__main__' : import doctest doctest . testmod ( verbose = False )","title":"Myst\u00e8re"},{"location":"premiere/bloc1/chapitre-05/TP/#mystere","text":"","title":"Myst\u00e8re"},{"location":"premiere/bloc1/chapitre-05/TP/#description","text":"L'id\u00e9e de ce TP est de manipuler les expressions bool\u00e9ennes. Pour cela, vous allez devoir enqu\u00eater pour retrouver, \u00e0 partir d'indices, des fonctions bool\u00e9ennes myst\u00e8res. A chaque fonction mystere suivante, sont donn\u00e9es des doctests. Ces doctests correspondent aux valeurs des tables de v\u00e9rit\u00e9s.","title":"Description"},{"location":"premiere/bloc1/chapitre-05/TP/#consignes","text":"Recopier le bloc de code suivant dans un fichier mystere.py Vous devez \u00e9crire le corps de la fonction sous la forme d'une expression bool\u00e9enne, dont les variables correspondent aux param\u00e8tres d'entr\u00e9e fournis. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def mystere1 ( a ): ''' >>> mystere1(True) False >>> mystere1(False) True ''' pass def mystere2 ( a , b ): ''' >>> mystere2(True, True) True >>> mystere2(True, False) True >>> mystere2(False, True) True >>> mystere2(False, False) False ''' pass def mystere3 ( a , b ): ''' >>> mystere3(True, True) False >>> mystere3(True, False) True >>> mystere3(False, True) True >>> mystere3(False, False) False ''' pass def mystere4 ( a , b ): ''' >>> mystere4(True, True) False >>> mystere4(True, False) False >>> mystere4(False, True) False >>> mystere4(False, False) True ''' pass def mystere5 ( a , b ): ''' >>> mystere5(True, True) True >>> mystere5(True, False) False >>> mystere5(False, True) False >>> mystere5(False, False) True ''' pass def mystere6 ( a , b ): ''' >>> mystere6(True, True) False >>> mystere6(True, False) True >>> mystere6(False, True) False >>> mystere6(False, False) False ''' pass def mystere7 ( a , b ): ''' >>> mystere7(True, True) False >>> mystere7(True, False) True >>> mystere7(False, True) False >>> mystere7(False, False) True ''' pass if __name__ == '__main__' : import doctest doctest . testmod ( verbose = False )","title":"Consignes"},{"location":"premiere/bloc1/chapitre-06/","text":"Sommaire Repr\u00e9sentation d'un texte en machine Les contenus le tp le cours le quiz Programme Contenus : Repr\u00e9sentation d\u2019un texte en machine. Exemples des encodages ASCII, ISO-8859-1, Unicode Capacit\u00e9s attendues : Identifier l\u2019int\u00e9r\u00eat des diff\u00e9rents syst\u00e8mes d\u2019encodage. Convertir un fichier texte dans diff\u00e9rents formats d\u2019encodage.","title":"Sommaire"},{"location":"premiere/bloc1/chapitre-06/#sommaire","text":"","title":"Sommaire"},{"location":"premiere/bloc1/chapitre-06/#representation-dun-texte-en-machine","text":"","title":"Repr\u00e9sentation d'un texte en machine"},{"location":"premiere/bloc1/chapitre-06/#les-contenus","text":"le tp le cours le quiz","title":"Les contenus"},{"location":"premiere/bloc1/chapitre-06/#programme","text":"Contenus : Repr\u00e9sentation d\u2019un texte en machine. Exemples des encodages ASCII, ISO-8859-1, Unicode Capacit\u00e9s attendues : Identifier l\u2019int\u00e9r\u00eat des diff\u00e9rents syst\u00e8mes d\u2019encodage. Convertir un fichier texte dans diff\u00e9rents formats d\u2019encodage.","title":"Programme"},{"location":"premiere/bloc1/chapitre-06/COURS/","text":"Cours Contexte Source : http://www.retourdemartine.free.fr/ Prenons l'alphabet courant A , B , C , ... Z et pla\u00e7ons le dans un tableau. A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Regardons les indices associ\u00e9s \u00e0 chaque lettre. 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \u00c0 un indice correspond une lettre et \u00e0 une lettre est associ\u00e9e un et un seul indice. D\u00e9finition En g\u00e9n\u00e9ralisant \u00e0 l'ensemble des caract\u00e8res ( , , \u00e9 , % , ...), un caract\u00e8re peut \u00eatre repr\u00e9sent\u00e9 par un entier, donc avoir une repr\u00e9sentation binaire en machine. D\u00e9finition L'entier associ\u00e9 \u00e0 un caract\u00e8re est appel\u00e9 point de code de ce caract\u00e8re (0 est le point de code de A . 25 le point de code de Z .) D\u00e9finition On parle ainsi d' encodage de caract\u00e8res : m\u00e9canisme qui g\u00e8re les points de code en octets dans la m\u00e9moire de l\u2019ordinateur, puis lit les octets \u00e0 nouveau en points de code. Il a exist\u00e9 et existe plusieurs encodages. Encodage ASCII En 1960, l'organisation internationale de normalisation (ISO) d\u00e9cide de cr\u00e9er la norme ASCII (American Standard Code for Information Interchange). \u00c0 chaque caract\u00e8re est associ\u00e9 un nombre binaire sur 7 bits. Source : Wikip\u00e9dia Comme vous pouvez le constater dans le tableau ci-dessus, au \"A\" majuscule correspond le code binaire \\((1000001)_2\\) \\((65)_{10}\\) ou \\((41)_{16}\\) Combien de points de code (et donc de caract\u00e8res) peuvent \u00eatre repr\u00e9sent\u00e9s gr\u00e2ce \u00e0 l'encodage ASCII ? Avec 7 bits, on peut coder \\(2^7\\) points de code, donc 128 caract\u00e8res. Travail Quel est le point de code et la repr\u00e9sentation en binaire, du caract\u00e8re a ? Comment gr\u00e2ce \u00e0 la repr\u00e9sentation, en binaire, peut-on savoir si une lettre est en majuscule ou minuscule ? Solution 1 Le caract\u00e8re a a pour point de code 97, soit \\((1100001)_2\\) . Solution 2 Le bit de rang 5 est \u00e9gal \u00e0 : 1 si la lettre est en minuscule, 0 si la lettre est en majuscule. La norme ASCII convient bien \u00e0 la langue anglaise, mais pose des probl\u00e8mes dans d'autres langues, par exemple le fran\u00e7ais. En effet, l'ASCII ne pr\u00e9voit pas d'encoder les lettres accentu\u00e9es. Encodage ISO-8859-1 Cette norme reprend les m\u00eames principes que l'ASCII, mais les points de code associ\u00e9s \u00e0 chaque caract\u00e8re sont cod\u00e9s sur 8 bits. Combien de points de code (et donc de caract\u00e8res) peuvent \u00eatre repr\u00e9sent\u00e9s gr\u00e2ce \u00e0 l'encodage ISO-8859-1 ? Sur 8 bits, on peut r\u00e9pr\u00e9senter \\(2^8\\) points de code, soit 256 caract\u00e8res... 2 fois plus que l'encodage ASCII. Cette norme va \u00eatre principalement utilis\u00e9e dans les pays europ\u00e9ens puisqu'elle permet d'encoder les caract\u00e8res utilis\u00e9s dans les principales langues europ\u00e9ennes (la norme ISO-8859-1 est aussi appel\u00e9e \"latin1\" car elle permet d'encoder les caract\u00e8res de l'alphabet dit \"latin\"). Probl\u00e8me, il existe beaucoup d'autres langues dans le monde qui n'utilisent pas l'alphabet dit \"latin\", par exemple le chinois ou le japonais ! D'autres normes ont donc d\u00fb voir le jour. Des changements de configuration sont n\u00e9cessaires pour afficher un texte dans l'encodage ad\u00e9quat. Encodage Unicode Pour \u00e9viter ces probl\u00e8mes, en 1991, une nouvelle norme a vu le jour : Unicode. Unicode a pour ambition de rassembler tous les caract\u00e8res existant afin qu'une personne utilisant Unicode puisse, sans changer la configuration de son traitement de texte, \u00e0 la fois lire des textes en fran\u00e7ais ou en japonais. Unicode est une table qui regroupe tous les caract\u00e8res existant au monde. Unicode accepte plusieurs syst\u00e8mes de codage : UTF-8, UTF-16, UTF-32. Le plus utilis\u00e9, notamment sur le Web, est UTF-8. Nombre s'octets en UTF-8 Pour encoder les caract\u00e8res Unicode, UTF-8 utilise un nombre variable d'octets (jusque 4) : Les caract\u00e8res de num\u00e9ro 0 \u00e0 127 sont cod\u00e9s sur un octet dont le bit de poids fort est toujours nul, Les caract\u00e8res de num\u00e9ro sup\u00e9rieur \u00e0 127 sont cod\u00e9s sur plusieurs octets. Dans ce cas, les bits de poids fort du premier octet forment une suite de 1 de longueur \u00e9gale au nombre d'octets utilis\u00e9s pour coder le caract\u00e8re, les octets suivants ayant 10 comme bits de poids fort. D\u00e9finition du nombre d'octets utilis\u00e9s Repr\u00e9sentation binaire en UTF-8 Signification 0xxxxxxx 1 octet codant 1 \u00e0 7 bits 110xxxxx 10xxxxxx 2 octets codant 8 \u00e0 11 bits 1110xxxx 10xxxxxx 10xxxxxx 3 octets codant 12 \u00e0 16 bits 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 4 octets codant 17 \u00e0 21 bits M\u00e9thode pour obtenir la repr\u00e9sentation binaire en UTF-8 d'un caract\u00e8re Repr\u00e9senter le point de code associ\u00e9 au caract\u00e8re en binaire En fonction du nombre de bits, d\u00e9finir le nombre d'octets n\u00e9cessaires pour une r\u00e9pr\u00e9sentation en UTF-8 D\u00e9couper les blocs de bits en autant d'octets n\u00e9cessaires. Exemple : le caract\u00e8re A a pour point de code 65 dans la table Unicode. Repr\u00e9sentation binaire de 65 : 100 0001 7 bits sont n\u00e9cessaires \u21d2 1 octet n\u00e9cessaire pour le repr\u00e9senter en UTF-8 Repr\u00e9sentation en UTF-8 : 0 1000001 ou \\((41)_{16}\\) Exemple : le caract\u00e8re \u0153 a pour point de code 339 dans la table Unicode. Repr\u00e9sentation binaire de 339 : 1 0101 0011 9 bits sont n\u00e9cessaires \u21d2 2 octets n\u00e9cessaires pour le repr\u00e9senter en UTF-8 l'octet de poids faible codant les 6 bits de poids faible, l'octet poids fort codant les 3 bits de poids forts Repr\u00e9sentation en UTF-8 : 110 0101 10 010011 ou \\((C5\\,93)_{16}\\) Travail Quelle est la repr\u00e9sentation binaire du caract\u00e8re b (point de code : 98) en UTF-8 ? Quel est le point de code repr\u00e9sent\u00e9 par \\((C2\\,80)_{16}\\) en UTF-8 ? Solution 1 Le point de code 98 a comme repr\u00e9sentatio binaire : \\((1100010)_2\\) 7 bits sont n\u00e9cessaires \u21d2 1 octet n\u00e9cessaire pour le r\u00e9pr\u00e9senter en UTF-8 Repr\u00e9sentation en UTF-8 : 0 1100010 ou \\((62)_{16}\\) Solution 2 \\((C2\\,80)_{16} = (11000010\\,10000000)_{16}\\) Le point de code est repr\u00e9sent\u00e9 par les bits 110 00010 10 000000 . Soit \\((10000000)_2 = (128)_{10}\\) Exemples de codage UTF-8 Point de code Caract\u00e8re Repr\u00e9sentation binaire UTF-8 66 B 0 1000010 233 \u00e9 110 00011 10 101001 8364 \u20ac 1110 0010 10 000010 10 101100 119070 \ud834\udd1e 11110 000 10 011101 10 000100 10 011110 Observation Dans toute cha\u00eene de caract\u00e8res UTF-8, on remarque que : tout octet de bit de poids fort nul code un caract\u00e8re ASCII sur un octet, tout octet de bits de poids fort valant 11 est le premier octet d'un caract\u00e8re cod\u00e9 sur plusieurs octets, tout octet de bits de poids fort valant 10 est \u00e0 l'int\u00e9rieur d'un caract\u00e8re cod\u00e9 sur plusieurs octets.","title":"Cours"},{"location":"premiere/bloc1/chapitre-06/COURS/#cours","text":"","title":"Cours"},{"location":"premiere/bloc1/chapitre-06/COURS/#contexte","text":"Source : http://www.retourdemartine.free.fr/ Prenons l'alphabet courant A , B , C , ... Z et pla\u00e7ons le dans un tableau. A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Regardons les indices associ\u00e9s \u00e0 chaque lettre. 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \u00c0 un indice correspond une lettre et \u00e0 une lettre est associ\u00e9e un et un seul indice.","title":"Contexte"},{"location":"premiere/bloc1/chapitre-06/COURS/#definition","text":"En g\u00e9n\u00e9ralisant \u00e0 l'ensemble des caract\u00e8res ( , , \u00e9 , % , ...), un caract\u00e8re peut \u00eatre repr\u00e9sent\u00e9 par un entier, donc avoir une repr\u00e9sentation binaire en machine. D\u00e9finition L'entier associ\u00e9 \u00e0 un caract\u00e8re est appel\u00e9 point de code de ce caract\u00e8re (0 est le point de code de A . 25 le point de code de Z .) D\u00e9finition On parle ainsi d' encodage de caract\u00e8res : m\u00e9canisme qui g\u00e8re les points de code en octets dans la m\u00e9moire de l\u2019ordinateur, puis lit les octets \u00e0 nouveau en points de code. Il a exist\u00e9 et existe plusieurs encodages.","title":"D\u00e9finition"},{"location":"premiere/bloc1/chapitre-06/COURS/#encodage-ascii","text":"En 1960, l'organisation internationale de normalisation (ISO) d\u00e9cide de cr\u00e9er la norme ASCII (American Standard Code for Information Interchange). \u00c0 chaque caract\u00e8re est associ\u00e9 un nombre binaire sur 7 bits. Source : Wikip\u00e9dia Comme vous pouvez le constater dans le tableau ci-dessus, au \"A\" majuscule correspond le code binaire \\((1000001)_2\\) \\((65)_{10}\\) ou \\((41)_{16}\\) Combien de points de code (et donc de caract\u00e8res) peuvent \u00eatre repr\u00e9sent\u00e9s gr\u00e2ce \u00e0 l'encodage ASCII ? Avec 7 bits, on peut coder \\(2^7\\) points de code, donc 128 caract\u00e8res. Travail Quel est le point de code et la repr\u00e9sentation en binaire, du caract\u00e8re a ? Comment gr\u00e2ce \u00e0 la repr\u00e9sentation, en binaire, peut-on savoir si une lettre est en majuscule ou minuscule ? Solution 1 Le caract\u00e8re a a pour point de code 97, soit \\((1100001)_2\\) . Solution 2 Le bit de rang 5 est \u00e9gal \u00e0 : 1 si la lettre est en minuscule, 0 si la lettre est en majuscule. La norme ASCII convient bien \u00e0 la langue anglaise, mais pose des probl\u00e8mes dans d'autres langues, par exemple le fran\u00e7ais. En effet, l'ASCII ne pr\u00e9voit pas d'encoder les lettres accentu\u00e9es.","title":"Encodage ASCII"},{"location":"premiere/bloc1/chapitre-06/COURS/#encodage-iso-8859-1","text":"Cette norme reprend les m\u00eames principes que l'ASCII, mais les points de code associ\u00e9s \u00e0 chaque caract\u00e8re sont cod\u00e9s sur 8 bits. Combien de points de code (et donc de caract\u00e8res) peuvent \u00eatre repr\u00e9sent\u00e9s gr\u00e2ce \u00e0 l'encodage ISO-8859-1 ? Sur 8 bits, on peut r\u00e9pr\u00e9senter \\(2^8\\) points de code, soit 256 caract\u00e8res... 2 fois plus que l'encodage ASCII. Cette norme va \u00eatre principalement utilis\u00e9e dans les pays europ\u00e9ens puisqu'elle permet d'encoder les caract\u00e8res utilis\u00e9s dans les principales langues europ\u00e9ennes (la norme ISO-8859-1 est aussi appel\u00e9e \"latin1\" car elle permet d'encoder les caract\u00e8res de l'alphabet dit \"latin\"). Probl\u00e8me, il existe beaucoup d'autres langues dans le monde qui n'utilisent pas l'alphabet dit \"latin\", par exemple le chinois ou le japonais ! D'autres normes ont donc d\u00fb voir le jour. Des changements de configuration sont n\u00e9cessaires pour afficher un texte dans l'encodage ad\u00e9quat.","title":"Encodage ISO-8859-1"},{"location":"premiere/bloc1/chapitre-06/COURS/#encodage-unicode","text":"Pour \u00e9viter ces probl\u00e8mes, en 1991, une nouvelle norme a vu le jour : Unicode. Unicode a pour ambition de rassembler tous les caract\u00e8res existant afin qu'une personne utilisant Unicode puisse, sans changer la configuration de son traitement de texte, \u00e0 la fois lire des textes en fran\u00e7ais ou en japonais. Unicode est une table qui regroupe tous les caract\u00e8res existant au monde. Unicode accepte plusieurs syst\u00e8mes de codage : UTF-8, UTF-16, UTF-32. Le plus utilis\u00e9, notamment sur le Web, est UTF-8.","title":"Encodage Unicode"},{"location":"premiere/bloc1/chapitre-06/COURS/#nombre-soctets-en-utf-8","text":"Pour encoder les caract\u00e8res Unicode, UTF-8 utilise un nombre variable d'octets (jusque 4) : Les caract\u00e8res de num\u00e9ro 0 \u00e0 127 sont cod\u00e9s sur un octet dont le bit de poids fort est toujours nul, Les caract\u00e8res de num\u00e9ro sup\u00e9rieur \u00e0 127 sont cod\u00e9s sur plusieurs octets. Dans ce cas, les bits de poids fort du premier octet forment une suite de 1 de longueur \u00e9gale au nombre d'octets utilis\u00e9s pour coder le caract\u00e8re, les octets suivants ayant 10 comme bits de poids fort. D\u00e9finition du nombre d'octets utilis\u00e9s Repr\u00e9sentation binaire en UTF-8 Signification 0xxxxxxx 1 octet codant 1 \u00e0 7 bits 110xxxxx 10xxxxxx 2 octets codant 8 \u00e0 11 bits 1110xxxx 10xxxxxx 10xxxxxx 3 octets codant 12 \u00e0 16 bits 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 4 octets codant 17 \u00e0 21 bits","title":"Nombre s'octets en UTF-8"},{"location":"premiere/bloc1/chapitre-06/COURS/#methode-pour-obtenir-la-representation-binaire-en-utf-8-dun-caractere","text":"Repr\u00e9senter le point de code associ\u00e9 au caract\u00e8re en binaire En fonction du nombre de bits, d\u00e9finir le nombre d'octets n\u00e9cessaires pour une r\u00e9pr\u00e9sentation en UTF-8 D\u00e9couper les blocs de bits en autant d'octets n\u00e9cessaires. Exemple : le caract\u00e8re A a pour point de code 65 dans la table Unicode. Repr\u00e9sentation binaire de 65 : 100 0001 7 bits sont n\u00e9cessaires \u21d2 1 octet n\u00e9cessaire pour le repr\u00e9senter en UTF-8 Repr\u00e9sentation en UTF-8 : 0 1000001 ou \\((41)_{16}\\) Exemple : le caract\u00e8re \u0153 a pour point de code 339 dans la table Unicode. Repr\u00e9sentation binaire de 339 : 1 0101 0011 9 bits sont n\u00e9cessaires \u21d2 2 octets n\u00e9cessaires pour le repr\u00e9senter en UTF-8 l'octet de poids faible codant les 6 bits de poids faible, l'octet poids fort codant les 3 bits de poids forts Repr\u00e9sentation en UTF-8 : 110 0101 10 010011 ou \\((C5\\,93)_{16}\\) Travail Quelle est la repr\u00e9sentation binaire du caract\u00e8re b (point de code : 98) en UTF-8 ? Quel est le point de code repr\u00e9sent\u00e9 par \\((C2\\,80)_{16}\\) en UTF-8 ? Solution 1 Le point de code 98 a comme repr\u00e9sentatio binaire : \\((1100010)_2\\) 7 bits sont n\u00e9cessaires \u21d2 1 octet n\u00e9cessaire pour le r\u00e9pr\u00e9senter en UTF-8 Repr\u00e9sentation en UTF-8 : 0 1100010 ou \\((62)_{16}\\) Solution 2 \\((C2\\,80)_{16} = (11000010\\,10000000)_{16}\\) Le point de code est repr\u00e9sent\u00e9 par les bits 110 00010 10 000000 . Soit \\((10000000)_2 = (128)_{10}\\) Exemples de codage UTF-8 Point de code Caract\u00e8re Repr\u00e9sentation binaire UTF-8 66 B 0 1000010 233 \u00e9 110 00011 10 101001 8364 \u20ac 1110 0010 10 000010 10 101100 119070 \ud834\udd1e 11110 000 10 011101 10 000100 10 011110 Observation Dans toute cha\u00eene de caract\u00e8res UTF-8, on remarque que : tout octet de bit de poids fort nul code un caract\u00e8re ASCII sur un octet, tout octet de bits de poids fort valant 11 est le premier octet d'un caract\u00e8re cod\u00e9 sur plusieurs octets, tout octet de bits de poids fort valant 10 est \u00e0 l'int\u00e9rieur d'un caract\u00e8re cod\u00e9 sur plusieurs octets.","title":"M\u00e9thode pour obtenir la repr\u00e9sentation binaire en UTF-8 d'un caract\u00e8re"},{"location":"premiere/bloc1/chapitre-06/TP/","text":"TP - D\u00e9tective oulipien Contexte Le 24 Novembre 1960, des \u00e9crivains ont cr\u00e9\u00e9 l' Oulipo ( Ou vroir de li tt\u00e9rature po tentielle), un groupe d'\u00e9criture dans lequel ils exp\u00e9riment\u00e8rent des contraintes d'\u00e9criture. Leur but \u00e9tait de d\u00e9couvrir de nouvelles potentialit\u00e9s du langage et de moderniser l\u2019expression \u00e0 travers des jeux d\u2019\u00e9criture. Source : wikimedia Sont r\u00e9pertori\u00e9es ci-dessous certaines de ces contraintes, parmi les plus connues : Anagramme : Une anagramme est un mot ou une expression obtenu en permutant les lettres d'un mot ou d'une expression de d\u00e9part. Anaphrase : Se dit d'une phrase contenant des anagrammes. Lipogramme : Figure de style qui consiste \u00e0 produire un texte d\u2019o\u00f9 sont d\u00e9lib\u00e9r\u00e9ment exclues certaines lettres de l\u2019alphabet. Monoconsonnantisme : Se dit d'un texte utilisant une seule consonne. Pangramme : Se dit de phrases qui contiennent toutes les lettres de l\u2019alphabet. Palindrome : Texte qui peut se lire indiff\u00e9remment de gauche \u00e0 droite et de droite \u00e0 gauche. Il existe des palindromes de syllabes, des palindromes de mots, de phrases ou de sons. Surd\u00e9finition : On d\u00e9finit doublement un mot : par son sens d\u2019abord, mais aussi par sa pr\u00e9sence \u00e0 l\u2019int\u00e9rieur d\u2019un autre mot. Tautogramme : Texte dont tous les mots commencent par la m\u00eame lettre. Consignes Vous \u00eates un d\u00e9tective Oulipien, amateur de litt\u00e9rature, d\u00f4t\u00e9 de capacit\u00e9 d'analyse et de programmation vous permettant de r\u00e9soudre les \u00e9nigmes qui vous sont propos\u00e9es. Source : Pixabay Vous avez \u00e0 disposition des textes dans le r\u00e9pertoire textes , mais le myst\u00e8re plane sur les figures de style utilis\u00e9es. Vous devez retrouver pour chaque texte, le ou les figures de styles utilis\u00e9es : Identifiant Texte 1 Chapitre 155 9 2 Curieux Voyage autour du monde 2 3 Horace 3 4 La disparition 1 5 Les revenentes 4 6 Cheval affam\u00e9 8 7 Mamamia 8 8 Tatata 8 9 Abri 8 10 \u00c9moi 8 11 Le\u00e7on 8 12 Clown 8 13 Renard 7 14 Autobus 5 15 Le chat et le rat 8 16 La Horde 6 17 Debord 10 Pour cela, vous devez compl\u00e9ter le script oulipo.py , qui contient les sp\u00e9cifications des fonctions. Vous allez cr\u00e9er un pr\u00e9dicat pour chaque figure de style et \u00e9crire dans la partie preuve de l'enqu\u00eate, l'appel \u00e0 la fonction qui permet de certifier (i.e le pr\u00e9dicat renvoie True ) que le texte comporte la figure de style associ\u00e9e au pr\u00e9dicat. 1 2 3 4 5 # Partie preuve print ( \"La pi\u00e8ce 0 est un tautogramme : \" , est_tautogramme ( Enquete . obtenir_piece ( 0 ))) # True <- r\u00e9sultat affich\u00e9 \u00e0 l'ex\u00e9cution print ( \"La pi\u00e8ce 1 est un xxx : \" , est_xxx ( Enquete . obtenir_piece ( 1 ))) # \u00e0 vous de trouver la figure de style associ\u00e9e \u00e0 la pi\u00e8ce 1 et d'implanter le pr\u00e9dicat associ\u00e9. Aide Pour vous aider \u00e0 traiter les pi\u00e8ces, le module enquete vous est fourni. Il permet d'ouvrir les fichiers textes et d'obtenir leurs contenus sous la forme d'une chaine de caract\u00e8res. Des exemples d'utilisation : 1 2 3 4 5 >>> from enquete import Enquete >>> Enquete . obtenir_piece ( 0 ) 'Ce chien col\u00e9rique croque ces chaussures.' >>> Enquete . obtenir_piece ( 8 ) 'Tata tatoue Toto : Titi. T\u00e9tue, Tata tatoue toutou Titi : Tutu. \\n ' Annexe - Rappel de fonctions utiles Pour rappel, quelques fonctions utiles \u00e0 la manipulations des chaines de caract\u00e8res en Python. replace Signature : s.replace(old, new) Sp\u00e9cifications : renvoie une copie de s avec toutes les occurrences de old remplac\u00e9es par new . Exemple : 1 2 >>> \"toutou\" . replace ( 'u' , 'i' ) 'toitoi' split Signature : s.split(separator) Sp\u00e9cifications : renvoie une liste de mots de s , utilisant separator comme d\u00e9limiteur. Exemple : 1 2 >>> \"toutou\" . split ( 'u' ) [ 'to' , 'to' ] lower Signature : s.lower() Sp\u00e9cifications : renvoie une copie de s , o\u00f9 chaque lettre est en minuscule. Exemple : 1 2 >>> \"ToUTOu\" . lower () 'toutou' upper Signature : s.upper() Sp\u00e9cifications : renvoie une copie de s , o\u00f9 chaque lettre est en majuscule. Exemple : 1 2 >>> \"ToUTOu\" . upper () 'TOUTOU' sorted Signature : sorted(s) Sp\u00e9cifications : renvoie une copie de s , dont les lettres sont tri\u00e9es par ordre alphab\u00e9tique. Exemple : 1 2 >>> \"\" . join ( sorted ( 'monsieur' )) 'eimnorsu' Notes et r\u00e9f\u00e9rences Georges Perec, La Disparition , Paris, Gallimard, coll. \u00ab L'Imaginaire \u00bb, 1989, 319 p. (ISBN 2-07-071523-X) Jacques Arago, Curieux voyage autour du monde , Paris, Nouvelle \u00e9dition, Alfred Duquesne, 1881, 174 p. (https://gallica.bnf.fr/ark:/12148/bpt6k8630567s) Pierre Corneille, Horace , Paris, Nouvelle biblioth\u00e8que populaire, Henri Gautier, 1640, 35p .(https://catalogue.bnf.fr/ark:/12148/cb30271665n) Georges Perec, Les revenentes , Paris, Julliard, 1997, 144p. (ISBN 978-2260014720) Collectif, Oulipo, La litt\u00e9rature potentielle , Paris, Gallimard, 1973, 320p. (ISBN 978-2070324781) Alain Damasio, La Horde du contrevent , Paris, Folio, 2015, 736p. (ISBN 978-2070464234) Robert Baden-Powell, Scouting for Boys , Londres, Pearson, 1908, 288p. Anonyme Collectif, Atlas de litt\u00e9rature potentielle , Paris, Gallimard, 1988, 432p. (ISBN 978-2070325009) Guy Debord, In girun imus nocte et consumimur igni , Paris, Gallimard, 1990, 160p. (ISBN 978-2070756797) Philippe BODDAERT - 20/12/2020","title":"TP - D\u00e9tective oulipien"},{"location":"premiere/bloc1/chapitre-06/TP/#tp-detective-oulipien","text":"","title":"TP - D\u00e9tective oulipien"},{"location":"premiere/bloc1/chapitre-06/TP/#contexte","text":"Le 24 Novembre 1960, des \u00e9crivains ont cr\u00e9\u00e9 l' Oulipo ( Ou vroir de li tt\u00e9rature po tentielle), un groupe d'\u00e9criture dans lequel ils exp\u00e9riment\u00e8rent des contraintes d'\u00e9criture. Leur but \u00e9tait de d\u00e9couvrir de nouvelles potentialit\u00e9s du langage et de moderniser l\u2019expression \u00e0 travers des jeux d\u2019\u00e9criture. Source : wikimedia Sont r\u00e9pertori\u00e9es ci-dessous certaines de ces contraintes, parmi les plus connues : Anagramme : Une anagramme est un mot ou une expression obtenu en permutant les lettres d'un mot ou d'une expression de d\u00e9part. Anaphrase : Se dit d'une phrase contenant des anagrammes. Lipogramme : Figure de style qui consiste \u00e0 produire un texte d\u2019o\u00f9 sont d\u00e9lib\u00e9r\u00e9ment exclues certaines lettres de l\u2019alphabet. Monoconsonnantisme : Se dit d'un texte utilisant une seule consonne. Pangramme : Se dit de phrases qui contiennent toutes les lettres de l\u2019alphabet. Palindrome : Texte qui peut se lire indiff\u00e9remment de gauche \u00e0 droite et de droite \u00e0 gauche. Il existe des palindromes de syllabes, des palindromes de mots, de phrases ou de sons. Surd\u00e9finition : On d\u00e9finit doublement un mot : par son sens d\u2019abord, mais aussi par sa pr\u00e9sence \u00e0 l\u2019int\u00e9rieur d\u2019un autre mot. Tautogramme : Texte dont tous les mots commencent par la m\u00eame lettre.","title":"Contexte"},{"location":"premiere/bloc1/chapitre-06/TP/#consignes","text":"Vous \u00eates un d\u00e9tective Oulipien, amateur de litt\u00e9rature, d\u00f4t\u00e9 de capacit\u00e9 d'analyse et de programmation vous permettant de r\u00e9soudre les \u00e9nigmes qui vous sont propos\u00e9es. Source : Pixabay Vous avez \u00e0 disposition des textes dans le r\u00e9pertoire textes , mais le myst\u00e8re plane sur les figures de style utilis\u00e9es. Vous devez retrouver pour chaque texte, le ou les figures de styles utilis\u00e9es : Identifiant Texte 1 Chapitre 155 9 2 Curieux Voyage autour du monde 2 3 Horace 3 4 La disparition 1 5 Les revenentes 4 6 Cheval affam\u00e9 8 7 Mamamia 8 8 Tatata 8 9 Abri 8 10 \u00c9moi 8 11 Le\u00e7on 8 12 Clown 8 13 Renard 7 14 Autobus 5 15 Le chat et le rat 8 16 La Horde 6 17 Debord 10 Pour cela, vous devez compl\u00e9ter le script oulipo.py , qui contient les sp\u00e9cifications des fonctions. Vous allez cr\u00e9er un pr\u00e9dicat pour chaque figure de style et \u00e9crire dans la partie preuve de l'enqu\u00eate, l'appel \u00e0 la fonction qui permet de certifier (i.e le pr\u00e9dicat renvoie True ) que le texte comporte la figure de style associ\u00e9e au pr\u00e9dicat. 1 2 3 4 5 # Partie preuve print ( \"La pi\u00e8ce 0 est un tautogramme : \" , est_tautogramme ( Enquete . obtenir_piece ( 0 ))) # True <- r\u00e9sultat affich\u00e9 \u00e0 l'ex\u00e9cution print ( \"La pi\u00e8ce 1 est un xxx : \" , est_xxx ( Enquete . obtenir_piece ( 1 ))) # \u00e0 vous de trouver la figure de style associ\u00e9e \u00e0 la pi\u00e8ce 1 et d'implanter le pr\u00e9dicat associ\u00e9.","title":"Consignes"},{"location":"premiere/bloc1/chapitre-06/TP/#aide","text":"Pour vous aider \u00e0 traiter les pi\u00e8ces, le module enquete vous est fourni. Il permet d'ouvrir les fichiers textes et d'obtenir leurs contenus sous la forme d'une chaine de caract\u00e8res. Des exemples d'utilisation : 1 2 3 4 5 >>> from enquete import Enquete >>> Enquete . obtenir_piece ( 0 ) 'Ce chien col\u00e9rique croque ces chaussures.' >>> Enquete . obtenir_piece ( 8 ) 'Tata tatoue Toto : Titi. T\u00e9tue, Tata tatoue toutou Titi : Tutu. \\n '","title":"Aide"},{"location":"premiere/bloc1/chapitre-06/TP/#annexe-rappel-de-fonctions-utiles","text":"Pour rappel, quelques fonctions utiles \u00e0 la manipulations des chaines de caract\u00e8res en Python.","title":"Annexe - Rappel de fonctions utiles"},{"location":"premiere/bloc1/chapitre-06/TP/#replace","text":"Signature : s.replace(old, new) Sp\u00e9cifications : renvoie une copie de s avec toutes les occurrences de old remplac\u00e9es par new . Exemple : 1 2 >>> \"toutou\" . replace ( 'u' , 'i' ) 'toitoi'","title":"replace"},{"location":"premiere/bloc1/chapitre-06/TP/#split","text":"Signature : s.split(separator) Sp\u00e9cifications : renvoie une liste de mots de s , utilisant separator comme d\u00e9limiteur. Exemple : 1 2 >>> \"toutou\" . split ( 'u' ) [ 'to' , 'to' ]","title":"split"},{"location":"premiere/bloc1/chapitre-06/TP/#lower","text":"Signature : s.lower() Sp\u00e9cifications : renvoie une copie de s , o\u00f9 chaque lettre est en minuscule. Exemple : 1 2 >>> \"ToUTOu\" . lower () 'toutou'","title":"lower"},{"location":"premiere/bloc1/chapitre-06/TP/#upper","text":"Signature : s.upper() Sp\u00e9cifications : renvoie une copie de s , o\u00f9 chaque lettre est en majuscule. Exemple : 1 2 >>> \"ToUTOu\" . upper () 'TOUTOU'","title":"upper"},{"location":"premiere/bloc1/chapitre-06/TP/#sorted","text":"Signature : sorted(s) Sp\u00e9cifications : renvoie une copie de s , dont les lettres sont tri\u00e9es par ordre alphab\u00e9tique. Exemple : 1 2 >>> \"\" . join ( sorted ( 'monsieur' )) 'eimnorsu'","title":"sorted"},{"location":"premiere/bloc1/chapitre-06/TP/#notes-et-references","text":"Georges Perec, La Disparition , Paris, Gallimard, coll. \u00ab L'Imaginaire \u00bb, 1989, 319 p. (ISBN 2-07-071523-X) Jacques Arago, Curieux voyage autour du monde , Paris, Nouvelle \u00e9dition, Alfred Duquesne, 1881, 174 p. (https://gallica.bnf.fr/ark:/12148/bpt6k8630567s) Pierre Corneille, Horace , Paris, Nouvelle biblioth\u00e8que populaire, Henri Gautier, 1640, 35p .(https://catalogue.bnf.fr/ark:/12148/cb30271665n) Georges Perec, Les revenentes , Paris, Julliard, 1997, 144p. (ISBN 978-2260014720) Collectif, Oulipo, La litt\u00e9rature potentielle , Paris, Gallimard, 1973, 320p. (ISBN 978-2070324781) Alain Damasio, La Horde du contrevent , Paris, Folio, 2015, 736p. (ISBN 978-2070464234) Robert Baden-Powell, Scouting for Boys , Londres, Pearson, 1908, 288p. Anonyme Collectif, Atlas de litt\u00e9rature potentielle , Paris, Gallimard, 1988, 432p. (ISBN 978-2070325009) Guy Debord, In girun imus nocte et consumimur igni , Paris, Gallimard, 1990, 160p. (ISBN 978-2070756797) Philippe BODDAERT - 20/12/2020","title":"Notes et r\u00e9f\u00e9rences"},{"location":"premiere/bloc2/","text":"Sommaire Bloc 2 - Repr\u00e9sentation des donn\u00e9es : types construits Source : Pixabay Pr\u00e9ambule Organisation Le bloc se d\u00e9compose en 4 chapitres : Chapitre 1 : Les Tableaux Chapitre 2 : Les Tuples Chapitre 3 : Les Dictionnaires Chapitre 4 : Les donn\u00e9es en Table Programme Officiel Contenus Capacit\u00e9s attendues p-uplets \u00c9crire une fonction renvoyant un p-uplet de valeurs. Tableau index\u00e9, tableau donn\u00e9 en compr\u00e9hension Lire et modifier les \u00e9l\u00e9ments d\u2019un tableau gr\u00e2ce \u00e0 leurs index. Construire un tableau par compr\u00e9hension. Utiliser des tableaux de tableaux pour repr\u00e9senter des matrices : notation a[i][j]. It\u00e9rer sur les \u00e9l\u00e9ments d\u2019un tableau. Dictionnaires par cl\u00e9s et valeurs Construire une entr\u00e9e de dictionnaire. It\u00e9rer sur les \u00e9l\u00e9ments d\u2019un dictionnaire. Indexation de tables Importer une table depuis un fichier texte tabul\u00e9 ou un fichier CSV Recherche dans une table Rechercher les lignes d\u2019une table v\u00e9rifiant des crit\u00e8res exprim\u00e9s en logique propositionnelle. Tri d\u2019une table Trier une table suivant une colonne. Fusion de tables Construire une nouvelle table en combinant les donn\u00e9es de deux tables.","title":"Sommaire"},{"location":"premiere/bloc2/#sommaire","text":"","title":"Sommaire"},{"location":"premiere/bloc2/#bloc-2-representation-des-donnees-types-construits","text":"Source : Pixabay","title":"Bloc 2 - Repr\u00e9sentation des donn\u00e9es : types construits"},{"location":"premiere/bloc2/#preambule","text":"","title":"Pr\u00e9ambule"},{"location":"premiere/bloc2/#organisation","text":"Le bloc se d\u00e9compose en 4 chapitres : Chapitre 1 : Les Tableaux Chapitre 2 : Les Tuples Chapitre 3 : Les Dictionnaires Chapitre 4 : Les donn\u00e9es en Table","title":"Organisation"},{"location":"premiere/bloc2/#programme-officiel","text":"Contenus Capacit\u00e9s attendues p-uplets \u00c9crire une fonction renvoyant un p-uplet de valeurs. Tableau index\u00e9, tableau donn\u00e9 en compr\u00e9hension Lire et modifier les \u00e9l\u00e9ments d\u2019un tableau gr\u00e2ce \u00e0 leurs index. Construire un tableau par compr\u00e9hension. Utiliser des tableaux de tableaux pour repr\u00e9senter des matrices : notation a[i][j]. It\u00e9rer sur les \u00e9l\u00e9ments d\u2019un tableau. Dictionnaires par cl\u00e9s et valeurs Construire une entr\u00e9e de dictionnaire. It\u00e9rer sur les \u00e9l\u00e9ments d\u2019un dictionnaire. Indexation de tables Importer une table depuis un fichier texte tabul\u00e9 ou un fichier CSV Recherche dans une table Rechercher les lignes d\u2019une table v\u00e9rifiant des crit\u00e8res exprim\u00e9s en logique propositionnelle. Tri d\u2019une table Trier une table suivant une colonne. Fusion de tables Construire une nouvelle table en combinant les donn\u00e9es de deux tables.","title":"Programme Officiel"},{"location":"premiere/bloc2/chapitre-01/","text":"Sommaire Tableau Les contenus le tp le cours le quiz Programme Contenus : Tableau indexe\u0301, tableau donne\u0301 en compre\u0301hension Capacit\u00e9s attendues : Lire et modifier les e\u0301le\u0301ments d\u2019un tableau gra\u0302ce a\u0300 leurs index.Construire un tableau par compre\u0301hension.Utiliser des tableaux de tableaux pour repre\u0301senter des matrices : notation a [i] [j].Ite\u0301rer sur les e\u0301le\u0301ments d\u2019un tableau.","title":"Sommaire"},{"location":"premiere/bloc2/chapitre-01/#sommaire","text":"","title":"Sommaire"},{"location":"premiere/bloc2/chapitre-01/#tableau","text":"","title":"Tableau"},{"location":"premiere/bloc2/chapitre-01/#les-contenus","text":"le tp le cours le quiz","title":"Les contenus"},{"location":"premiere/bloc2/chapitre-01/#programme","text":"Contenus : Tableau indexe\u0301, tableau donne\u0301 en compre\u0301hension Capacit\u00e9s attendues : Lire et modifier les e\u0301le\u0301ments d\u2019un tableau gra\u0302ce a\u0300 leurs index.Construire un tableau par compre\u0301hension.Utiliser des tableaux de tableaux pour repre\u0301senter des matrices : notation a [i] [j].Ite\u0301rer sur les e\u0301le\u0301ments d\u2019un tableau.","title":"Programme"},{"location":"premiere/bloc2/chapitre-01/COURS/","text":"Tableaux 0 - Rappel Nous avons pr\u00e9c\u00e9demment vu et utilis\u00e9 le type str : 1 2 3 4 5 6 7 >>> s = \"Bonjour\" >>> s [ 0 ] \"B\" >>> s [ 6 ] \"r\" >>> len ( s ) 7 La variable s : est une s\u00e9quence de caract\u00e8res, auxquels il est possible d'acc\u00e9der par leur indice , n'est pas modifiable : 1 2 3 4 >>> s [ 2 ] = \"Z\" Traceback ( most recent call last ): File \"<pyshell>\" , line 1 , in < module > TypeError : 'str' object does not support item assignment Le str est dynamique , c'est \u00e0 dire que sa taille est variable : 1 2 >>> s + \" \u00e0 toi\" \"Bonjour \u00e0 toi\" Les str est donc un type construit : Index\u00e9 / Non Modifiable / Dynamique Cependant, certaines utilisations des types construits demande de pouvoir \u00eatre modifi\u00e9. De plus le type str ne peut contenir que des caract\u00e8re et pas de variable de type int , bool ... C'est pourquoi nous allons travailler avec un type construit lui aussi index\u00e9 qui lui permet une modification des \u00e9l\u00e9ment et de pouvoir contenir toutes sorte de types diff\u00e9rents . \u2192 Ce type est un Tableau 1 - Pr\u00e9sentation Voici 3 tableaux : Ces tableaux contiennent 5 \u00e9l\u00e9ments (index\u00e9 de 0 \u00e0 4) Le premier tableau ne contient que des int , le second des str et le 3e plusieurs types diff\u00e9rents 2 - Implantation en Python En python, une variable de type Tableau se d\u00e9clare de la fa\u00e7on suivante : 1 2 3 4 #On place les valeurs entre crochets, s\u00e9par\u00e9es par une virgule : >>> t1 = [ 5 , 4 , 15 , 7 , 1 ] >>> t1 [ 5 , 4 , 15 , 7 , 1 ] Le cas d'un tableau vide : 1 2 3 4 #Tableau vide : >>> t4 = [] # Utilisation de crochets ouvrant et fermant >>> t4 [] Questions \u00c9crire l'instruction permettant de cr\u00e9er un tableau contenant la valeur des 10 premiers entiers naturels, \u00c9crire l'instruction permettant de cr\u00e9er un tableau contenant la valeur des nombres \u00e0 virgules flottantes entre 1 et 2 par pas de 0,1, \u00c9crire l'instruction permettant de cr\u00e9er un tableau contenant chaque lettre du mot \"Bonjour\" Comme pour les cha\u00eenes de caract\u00e8res il est possible de s\u00e9lectionner un \u00e9l\u00e9ment par son indice : 1 2 3 4 5 6 >>> t1 [ 0 ] 5 >>> t2 [ 4 ] \"o\" >>> t3 [ 2 ] True Les valeurs du tableau sont modifiables . On dit que le tableau est un type Mutable . 1 2 3 4 # On affecte la nouvelle valeur en sp\u00e9cifiant l'indice de l'\u00e9l\u00e9ment >>> t1 [ 0 ] = 42 >>> t1 [ 42 , 4 , 15 , 7 , 1 ] Il est possible de connaitre la taille du tableau, gr\u00e2ce \u00e0 la m\u00e9thode len : 1 2 3 4 5 6 7 # Utilisation de la m\u00e9thode len() >>> t = [] >>> len ( t ) 0 >>> t2 = [ 1 , 8 , 5 , 6 ] >>> len ( t2 ) 4 Questions \u00c9crire l'instruction qui permet de modifier la valeur du 1\u00e8re \u00e9l\u00e9ment \u00e0 la valeur 0 du tableau t = [1, 2, 3, 4] \u00c9crire l'instruction qui permet de modifier la valeur du 2\u00e8me \u00e9l\u00e9ment \u00e0 la valeur 42 du tableau t = [4, 13, 2, 15] \u00c9crire l'instruction qui permet de modifier la valeur du dernier \u00e9l\u00e9ment du tableau avec la valeur du premier \u00e9l\u00e9ment du tableau t = ['un', 'deux', 'trois', 'quatre', 'cinq'] 3 - Tableau par compr\u00e9hension Questions \u00c9crire un bloc d'instructions permettant de cr\u00e9er un tableau contenant les 100 premiers entiers naturels. Une premi\u00e8re approche consiste \u00e0 indiquer l'ensemble des valeurs \u00e0 la d\u00e9claration du tableau : 1 2 3 4 # Premi\u00e8re approche >>> t = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ... # jusque 100] >>> t [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , ... # jusque 100] Une deuxi\u00e8me approche consiste \u00e0 partir d'une liste vide et d'ajouter les valeurs une \u00e0 une en utilisant une boucle finie : 1 2 3 4 5 6 # Deuxi\u00e8me approche >>> t = [] >>> for i in range ( 100 ): t = t + [ i ] >>> t [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , ... # jusque 100] Une troisi\u00e8me approche consiste \u00e0 utiliser la syntaxe par compr\u00e9hension , similaire au formalisme math\u00e9matique. Formellement, on cherche \u00e0 construire le tableau \\(t\\) o\u00f9 \\(t_i = i\\ |\\ \\forall i \\in [0: 100]\\) 1 2 3 4 # Troisi\u00e8me approche >>> t = [ i for i in range ( 10 )] >>> t [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , ... # jusque 100] Questions \u00c9crire une instruction qui permette de construire le tableau, par compr\u00e9hension, les 10 premiers entiers pairs, \u00c9crire une instruction qui permette de construire le tableau, par compr\u00e9hension, les 10 premiers multiples de 2, \u00c9crire une instruction qui permette de construire le tableau, par compr\u00e9hension, les 10 premi\u00e8res puissances de 2. Tableau par compr\u00e9hension avec condition Soit le tableau \\(t\\) suivant : 1 t = [ 1 , 2 , 3 , 7 , 8 , 9 , 6 , 4 , 5 , 6 , 4 ] Construire un tableau t2 qui prennent l'ensemble des valeurs de t sup\u00e9rieures ou \u00e9gales \u00e0 4. 1 2 3 4 5 6 7 8 9 10 11 12 13 # Premi\u00e8re approche >>> t2 = [ 7 , 8 , 9 , 6 , 4 , 5 , 6 , 4 ] # Deuxi\u00e8me approche >>> t2 = [] >>> for x in t : if x >= 4 : t2 = t2 + [ x ] # Troisi\u00e8me approche >>> t2 = [ x for x in t if x >= 4 ] >>> t2 [ 7 , 8 , 9 , 6 , 4 , 5 , 6 , 4 ] 4 - Matrice En math\u00e9matiques, une matrice \u00e0 \\(m\\) lignes et \\(n\\) colonnes est un tableau rectangulaire de \\(m \\times n\\) nombres, rang\u00e9s ligne par ligne. Il y a \\(m\\) lignes, et dans chaque ligne \\(n\\) \u00e9l\u00e9ments. Par exemple, la matrice \\(A\\) de dimension (3, 4) : $$ \\begin{equation } A = \\begin{pmatrix} 0 & 1 & 2 & 3 \\ 4 & 5 & 6 & 7 \\ 8 & 9 & 10 & 11 \\end{pmatrix} \\end{equation } $$ Sous python, on construit une matrice sous la forme d'un tableau de tableaux : 1 2 3 4 5 6 7 >>> A = [[ 0 , 1 , 2 , 3 ], [ 4 , 5 , 6 , 7 ], [ 8 , 9 , 10 , 11 ]] >>> A [ 0 ] # On acc\u00e8de \u00e0 la premi\u00e8re ligne [ 0 , 1 , 2 , 3 ] >>> A [ 0 ][ 0 ] # On acc\u00e8de au premier \u00e9l\u00e9ment de la premi\u00e8re ligne 0 >>> A [ 1 ][ 0 ] # On acc\u00e8de au deuxi\u00e8me \u00e9l\u00e9ment de la deuxi\u00e8me ligne 4 Questions \u00c9crire une instruction qui permette de construire la matrice suivante : $$ \\begin{equation } A = \\begin{pmatrix} 4 & 8 & 15 \\ 16 & 23 & 42 \\ 108 & 4 & 8 \\ 15 & 16 & 23 \\end{pmatrix} \\end{equation } $$ \u00c9crire les instructions permettant de r\u00e9cup\u00e9rer, \u00e0 partir de la matrice \\(A\\) : le dernier \u00e9l\u00e9ment de la premi\u00e8re ligne, l'\u00e9l\u00e9ment de valeur 108, les \u00e9l\u00e9ments de la diagonale commen\u00e7ant \u00e0 la position (0, 0). Annexe - Compl\u00e9ments M\u00e9thode type appliqu\u00e9e aux tableaux 1 2 3 >>> t = [ 1 , 2 , 3 ] >>> type ( t ) < class ' list '> En Python , les tableaux sont implant\u00e9s par le type list . A ne pas confondre avec le type liste qui sera vu en Terminale. Tableau Python Versus Tableau en C Le langage C est un langage de programmation imp\u00e9ratif qui traite diff\u00e9remment les tableaux. 1 2 3 4 5 6 7 8 int tableau [ 3 ]; //La taille du tableau vaut 3 tableau [ 0 ] = 1 ; // J'ajoute 1 \u00e0 l'indice 0 tableau [ 1 ] = 2 ; // J'ajoute 2 \u00e0 l'indice 1 tableau [ 2 ] = 3 ; // J'ajoute 3 \u00e0 l'indice 2 //Modification du tableau tableau [ 0 ] = 5 ; En C la longueur du tableau est fixe et est indiqu\u00e9e lors de la cr\u00e9ation du tableau. Il est donc impossible d'ajouter des valeurs . Comme sous Python , le tableau est mutable ; on peut donc modifier son contenu. Philippe BODDAERT - 18/12/2020","title":"Tableaux"},{"location":"premiere/bloc2/chapitre-01/COURS/#tableaux","text":"","title":"Tableaux"},{"location":"premiere/bloc2/chapitre-01/COURS/#0-rappel","text":"Nous avons pr\u00e9c\u00e9demment vu et utilis\u00e9 le type str : 1 2 3 4 5 6 7 >>> s = \"Bonjour\" >>> s [ 0 ] \"B\" >>> s [ 6 ] \"r\" >>> len ( s ) 7 La variable s : est une s\u00e9quence de caract\u00e8res, auxquels il est possible d'acc\u00e9der par leur indice , n'est pas modifiable : 1 2 3 4 >>> s [ 2 ] = \"Z\" Traceback ( most recent call last ): File \"<pyshell>\" , line 1 , in < module > TypeError : 'str' object does not support item assignment Le str est dynamique , c'est \u00e0 dire que sa taille est variable : 1 2 >>> s + \" \u00e0 toi\" \"Bonjour \u00e0 toi\" Les str est donc un type construit : Index\u00e9 / Non Modifiable / Dynamique Cependant, certaines utilisations des types construits demande de pouvoir \u00eatre modifi\u00e9. De plus le type str ne peut contenir que des caract\u00e8re et pas de variable de type int , bool ... C'est pourquoi nous allons travailler avec un type construit lui aussi index\u00e9 qui lui permet une modification des \u00e9l\u00e9ment et de pouvoir contenir toutes sorte de types diff\u00e9rents . \u2192 Ce type est un Tableau","title":"0 - Rappel"},{"location":"premiere/bloc2/chapitre-01/COURS/#1-presentation","text":"Voici 3 tableaux : Ces tableaux contiennent 5 \u00e9l\u00e9ments (index\u00e9 de 0 \u00e0 4) Le premier tableau ne contient que des int , le second des str et le 3e plusieurs types diff\u00e9rents","title":"1 - Pr\u00e9sentation"},{"location":"premiere/bloc2/chapitre-01/COURS/#2-implantation-en-python","text":"En python, une variable de type Tableau se d\u00e9clare de la fa\u00e7on suivante : 1 2 3 4 #On place les valeurs entre crochets, s\u00e9par\u00e9es par une virgule : >>> t1 = [ 5 , 4 , 15 , 7 , 1 ] >>> t1 [ 5 , 4 , 15 , 7 , 1 ] Le cas d'un tableau vide : 1 2 3 4 #Tableau vide : >>> t4 = [] # Utilisation de crochets ouvrant et fermant >>> t4 []","title":"2 - Implantation en Python"},{"location":"premiere/bloc2/chapitre-01/COURS/#questions","text":"\u00c9crire l'instruction permettant de cr\u00e9er un tableau contenant la valeur des 10 premiers entiers naturels, \u00c9crire l'instruction permettant de cr\u00e9er un tableau contenant la valeur des nombres \u00e0 virgules flottantes entre 1 et 2 par pas de 0,1, \u00c9crire l'instruction permettant de cr\u00e9er un tableau contenant chaque lettre du mot \"Bonjour\" Comme pour les cha\u00eenes de caract\u00e8res il est possible de s\u00e9lectionner un \u00e9l\u00e9ment par son indice : 1 2 3 4 5 6 >>> t1 [ 0 ] 5 >>> t2 [ 4 ] \"o\" >>> t3 [ 2 ] True Les valeurs du tableau sont modifiables . On dit que le tableau est un type Mutable . 1 2 3 4 # On affecte la nouvelle valeur en sp\u00e9cifiant l'indice de l'\u00e9l\u00e9ment >>> t1 [ 0 ] = 42 >>> t1 [ 42 , 4 , 15 , 7 , 1 ] Il est possible de connaitre la taille du tableau, gr\u00e2ce \u00e0 la m\u00e9thode len : 1 2 3 4 5 6 7 # Utilisation de la m\u00e9thode len() >>> t = [] >>> len ( t ) 0 >>> t2 = [ 1 , 8 , 5 , 6 ] >>> len ( t2 ) 4","title":"Questions"},{"location":"premiere/bloc2/chapitre-01/COURS/#questions_1","text":"\u00c9crire l'instruction qui permet de modifier la valeur du 1\u00e8re \u00e9l\u00e9ment \u00e0 la valeur 0 du tableau t = [1, 2, 3, 4] \u00c9crire l'instruction qui permet de modifier la valeur du 2\u00e8me \u00e9l\u00e9ment \u00e0 la valeur 42 du tableau t = [4, 13, 2, 15] \u00c9crire l'instruction qui permet de modifier la valeur du dernier \u00e9l\u00e9ment du tableau avec la valeur du premier \u00e9l\u00e9ment du tableau t = ['un', 'deux', 'trois', 'quatre', 'cinq']","title":"Questions"},{"location":"premiere/bloc2/chapitre-01/COURS/#3-tableau-par-comprehension","text":"","title":"3 - Tableau par compr\u00e9hension"},{"location":"premiere/bloc2/chapitre-01/COURS/#questions_2","text":"\u00c9crire un bloc d'instructions permettant de cr\u00e9er un tableau contenant les 100 premiers entiers naturels. Une premi\u00e8re approche consiste \u00e0 indiquer l'ensemble des valeurs \u00e0 la d\u00e9claration du tableau : 1 2 3 4 # Premi\u00e8re approche >>> t = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ... # jusque 100] >>> t [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , ... # jusque 100] Une deuxi\u00e8me approche consiste \u00e0 partir d'une liste vide et d'ajouter les valeurs une \u00e0 une en utilisant une boucle finie : 1 2 3 4 5 6 # Deuxi\u00e8me approche >>> t = [] >>> for i in range ( 100 ): t = t + [ i ] >>> t [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , ... # jusque 100] Une troisi\u00e8me approche consiste \u00e0 utiliser la syntaxe par compr\u00e9hension , similaire au formalisme math\u00e9matique. Formellement, on cherche \u00e0 construire le tableau \\(t\\) o\u00f9 \\(t_i = i\\ |\\ \\forall i \\in [0: 100]\\) 1 2 3 4 # Troisi\u00e8me approche >>> t = [ i for i in range ( 10 )] >>> t [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , ... # jusque 100]","title":"Questions"},{"location":"premiere/bloc2/chapitre-01/COURS/#questions_3","text":"\u00c9crire une instruction qui permette de construire le tableau, par compr\u00e9hension, les 10 premiers entiers pairs, \u00c9crire une instruction qui permette de construire le tableau, par compr\u00e9hension, les 10 premiers multiples de 2, \u00c9crire une instruction qui permette de construire le tableau, par compr\u00e9hension, les 10 premi\u00e8res puissances de 2.","title":"Questions"},{"location":"premiere/bloc2/chapitre-01/COURS/#tableau-par-comprehension-avec-condition","text":"Soit le tableau \\(t\\) suivant : 1 t = [ 1 , 2 , 3 , 7 , 8 , 9 , 6 , 4 , 5 , 6 , 4 ] Construire un tableau t2 qui prennent l'ensemble des valeurs de t sup\u00e9rieures ou \u00e9gales \u00e0 4. 1 2 3 4 5 6 7 8 9 10 11 12 13 # Premi\u00e8re approche >>> t2 = [ 7 , 8 , 9 , 6 , 4 , 5 , 6 , 4 ] # Deuxi\u00e8me approche >>> t2 = [] >>> for x in t : if x >= 4 : t2 = t2 + [ x ] # Troisi\u00e8me approche >>> t2 = [ x for x in t if x >= 4 ] >>> t2 [ 7 , 8 , 9 , 6 , 4 , 5 , 6 , 4 ]","title":"Tableau par compr\u00e9hension avec condition"},{"location":"premiere/bloc2/chapitre-01/COURS/#4-matrice","text":"En math\u00e9matiques, une matrice \u00e0 \\(m\\) lignes et \\(n\\) colonnes est un tableau rectangulaire de \\(m \\times n\\) nombres, rang\u00e9s ligne par ligne. Il y a \\(m\\) lignes, et dans chaque ligne \\(n\\) \u00e9l\u00e9ments. Par exemple, la matrice \\(A\\) de dimension (3, 4) : $$ \\begin{equation } A = \\begin{pmatrix} 0 & 1 & 2 & 3 \\ 4 & 5 & 6 & 7 \\ 8 & 9 & 10 & 11 \\end{pmatrix} \\end{equation } $$ Sous python, on construit une matrice sous la forme d'un tableau de tableaux : 1 2 3 4 5 6 7 >>> A = [[ 0 , 1 , 2 , 3 ], [ 4 , 5 , 6 , 7 ], [ 8 , 9 , 10 , 11 ]] >>> A [ 0 ] # On acc\u00e8de \u00e0 la premi\u00e8re ligne [ 0 , 1 , 2 , 3 ] >>> A [ 0 ][ 0 ] # On acc\u00e8de au premier \u00e9l\u00e9ment de la premi\u00e8re ligne 0 >>> A [ 1 ][ 0 ] # On acc\u00e8de au deuxi\u00e8me \u00e9l\u00e9ment de la deuxi\u00e8me ligne 4","title":"4 - Matrice"},{"location":"premiere/bloc2/chapitre-01/COURS/#questions_4","text":"\u00c9crire une instruction qui permette de construire la matrice suivante : $$ \\begin{equation } A = \\begin{pmatrix} 4 & 8 & 15 \\ 16 & 23 & 42 \\ 108 & 4 & 8 \\ 15 & 16 & 23 \\end{pmatrix} \\end{equation } $$ \u00c9crire les instructions permettant de r\u00e9cup\u00e9rer, \u00e0 partir de la matrice \\(A\\) : le dernier \u00e9l\u00e9ment de la premi\u00e8re ligne, l'\u00e9l\u00e9ment de valeur 108, les \u00e9l\u00e9ments de la diagonale commen\u00e7ant \u00e0 la position (0, 0).","title":"Questions"},{"location":"premiere/bloc2/chapitre-01/COURS/#annexe-complements","text":"","title":"Annexe - Compl\u00e9ments"},{"location":"premiere/bloc2/chapitre-01/COURS/#methode-type-appliquee-aux-tableaux","text":"1 2 3 >>> t = [ 1 , 2 , 3 ] >>> type ( t ) < class ' list '> En Python , les tableaux sont implant\u00e9s par le type list . A ne pas confondre avec le type liste qui sera vu en Terminale.","title":"M\u00e9thode type appliqu\u00e9e aux tableaux"},{"location":"premiere/bloc2/chapitre-01/COURS/#tableau-python-versus-tableau-en-c","text":"Le langage C est un langage de programmation imp\u00e9ratif qui traite diff\u00e9remment les tableaux. 1 2 3 4 5 6 7 8 int tableau [ 3 ]; //La taille du tableau vaut 3 tableau [ 0 ] = 1 ; // J'ajoute 1 \u00e0 l'indice 0 tableau [ 1 ] = 2 ; // J'ajoute 2 \u00e0 l'indice 1 tableau [ 2 ] = 3 ; // J'ajoute 3 \u00e0 l'indice 2 //Modification du tableau tableau [ 0 ] = 5 ; En C la longueur du tableau est fixe et est indiqu\u00e9e lors de la cr\u00e9ation du tableau. Il est donc impossible d'ajouter des valeurs . Comme sous Python , le tableau est mutable ; on peut donc modifier son contenu. Philippe BODDAERT - 18/12/2020","title":"Tableau Python Versus Tableau en C"},{"location":"premiere/bloc2/chapitre-01/TP/","text":"TP : Les Tableaux Ce TP va nous permettre de manipuler les tableaux en Python, et de travailler les comp\u00e9tences suivantes : Comp\u00e9tence 3.2.1 : Lire et modifier les \u00e9l\u00e9ments d\u2019un tableau gr\u00e2ce \u00e0 leurs index Comp\u00e9tence 3.2.3 : Utiliser des tableaux de tableaux pour repr\u00e9senter des matrices : notation a[i][j] Comp\u00e9tence 3.2.4 : It\u00e9rer sur les \u00e9l\u00e9ments d\u2019un tableau Comp\u00e9tence 8.1.1 : \u00c9crire un algorithme de recherche d\u2019une occurrence sur des valeurs de type quelconque Comp\u00e9tence 8.1.2 : \u00c9crire un algorithme de recherche d\u2019un extr\u00e9mum, de calcul d\u2019une moyenne Rappel Pour cr\u00e9er un tableau en python, la syntaxe est la suivante : 1 >>> tableau = [] Pour ajouter un \u00e9l\u00e9ment \u00e0 un tableau, on utilise la m\u00e9thode append : 1 2 3 4 >>> tableau . append ( 'NSI' ) >>> tableau . append ( 'ANGLAIS' ) >>> tableau [ 'NSI' , 'ANGLAIS' ] Pour acc\u00e9der \u00e0 un \u00e9l\u00e9ment, on utilise son indice : 1 2 3 4 >>> tableau [ 0 ] 'NSI' >>> tableau [ 1 ] 'ANGLAIS' Il est \u00e9galement possible de cr\u00e9er un tableau avec un ensemble d'\u00e9l\u00e9ments : 1 2 3 >>> tableau = [ 'NSI' , 'ANGLAIS' , 'PHYSIQUE' ] >>> tableau [ 'NSI' , 'ANGLAIS' , 'PHYSIQUE' ] Il est possible d'obtenir la taille du tableau, i.e le nombre d'\u00e9l\u00e9ments gr\u00e2ce \u00e0 la m\u00e9thode len : 1 2 >>> len ( tableau ) 3 Exercices Exercice 1 : Cr\u00e9ation de tableaux 1.1 Cr\u00e9er un tableau contenant l'ensemble des noms des personnes dans la salle de TP 1.2 Cr\u00e9er un tableau contenant l'ensemble des entiers pairs entre 0 et 20 inclus, 1.3 Afficher uniquement les entiers du tableau qui sont multiples de 4. 1.4 Cr\u00e9er une fonction aleatoire qui renvoie un tableau de valeurs al\u00e9atoires. Elle prend 3 entiers en param\u00e8tre : - \\(n\\) : le nombre d'\u00e9l\u00e9ments du tableau - \\(min\\) : la valeur minimale possible - \\(max\\) : la valeur maximale possible Exercice 2 : Op\u00e9rations sur les tableaux $ + $ et $ \\times $ Exercice 3 : Parcours et Recherche 1 2 >>> groupe_1 = [ 'Alan' , 'Brice' , 'Chlo\u00e9' , 'Damien' , 'El\u00e9onore' , 'Farid' ] >>> groupe_2 = [ 'Damien' , 'Killian' , 'Margot' , 'Tom' , 'Hugo' , 'Killian' ] 3.1 \u00c9crire une fonction indice qui prend en param\u00e8tre un tableau de noms et un nom et permet d'obtenir l'indice du nom dans le tableau. 3.2 \u00c9crire une fonction est_present qui prend en param\u00e8tre un tableau et un nom et renvoie True si le nom est pr\u00e9sent dans le tableau, False sinon. 3.3 \u00c9crire une fonction indices qui prend en param\u00e8tre un tableau de noms et un nom et permet d'obtenir l'ensemble des indices du nom dans le tableau. 3.4 \u00c9crire une fonction compte qui prend en param\u00e8tre un tableau de noms et un nom et permet d'obtenir le nombre d'occurrences du nom dans le tableau. Exercice 4 : Agr\u00e9gation 1 >>> notes = [ 14.5 , 13 , 7 , 10.25 , 16 , 12.5 , 9.5 ] 4.1 \u00c9crire une fonction somme qui prend en param\u00e8tre un tableau de flottants et renvoie la somme des valeurs du tableau. 4.2 \u00c9crire une fonction moyenne qui prend en param\u00e8tre un tableau de flottants et renvoie la valeur moyenne du tableau. 4.3 \u00c9crire une fonction maximum qui prend en param\u00e8tre un tableau de flottants et renvoie la valeur maximale du tableau. Exercice 5 : Manipulations sur les tableaux Pour tester les fonctions de manipulations, nous utiliserons le Code Konami wikip\u00e9dia 1 >>> code = [ \"\u2191\" , \"\u2191\" , \"\u2193\" , \"\u2193\" , \"\u2190\" , \"\u2192\" , \"\u2190\" , \"\u2192\" , \"B\" , \"A\" ] 5.1 \u00c9crire une m\u00e9thode inverser qui prend en param\u00e8tre un tableau et a pour effet de bord d'inverser l'ensemble des valeurs du tableau. 5.2 \u00c9crire une fonction copie qui prend en param\u00e8tre un tableau et renvoie une copie du tableau. 5.3 \u00c9crire une m\u00e9thode dedoublonner qui prend en param\u00e8tre un tableau et a pour effet de bord de supprimer les doublons d'une m\u00eame valeur. 5.4 \u00c9crire une fonction tranche qui prend en param\u00e8tre un tableau et deux entiers \\(min\\) et \\(max\\) , et renvoie le sous-tableau entre \\(min\\) et \\(max\\) . Exercice 6 : Matrice 6.1 \u00c9crire une fonction ligne qui prend en param\u00e8tre une matrice et un indice de ligne en entr\u00e9es et renvoie un tableau avec l'ensemble des valeurs de la ligne. 6.2 \u00c9crire une fonction colonne qui prend en param\u00e8tre une matrice et un indice de colonne en entr\u00e9es et renvoie un tableau avec l'ensemble des valeurs de la colonne. 6.3 \u00c9crire une fonction diagonale_nord_ouest qui prend en param\u00e8tre une matrice et renvoie un tableau avec l'ensemble des valeurs de la diagonale. La premi\u00e8re valeur est celle \u00e0 l'indice [0][0] et la derni\u00e8re celle correspondant \u00e0 l'indice [len(matrice) - 1][len(matrice) - 1]. 6.4 \u00c9crire une fonction diagonale_nord_est qui prend en param\u00e8tre une matrice et renvoie un tableau avec l'ensemble des valeurs de la diagonale. La premi\u00e8re valeur est celle \u00e0 l'indice [0][len(matrice) - 1] et la derni\u00e8re celle correspondant \u00e0 l'indice [len(matrice) - 1][0]. Carr\u00e9 magique Fig 1. - Carr\u00e9 d'ordre 4 16 3 2 13 5 10 11 8 9 6 7 12 4 15 14 1 En math\u00e9matiques, un carr\u00e9 magique d\u2019ordre \\(n\\) est compos\u00e9 de \\(n^2\\) entiers strictement positifs, \u00e9crits sous la forme d\u2019un tableau carr\u00e9. Ces nombres sont dispos\u00e9s de sorte que leurs sommes sur chaque rang\u00e9e, sur chaque colonne et sur chaque diagonale principale soient \u00e9gales. On nomme alors constante magique la valeur de ces sommes. Fig 1.1 - Carr\u00e9 magique avec sa constante \u00e9gale \u00e0 34 16 3 2 13 \u219234 5 10 11 8 \u219234 9 6 7 12 \u219234 4 15 14 1 \u219234 \u2199 34 \u2193 34 \u2193 34 \u2193 34 \u2193 34 \u2198 34 \u00c9crire un pr\u00e9dicat est_magique qui prend une matrice d'entiers en param\u00e8tre et indique si le carr\u00e9 est magique ou non. Carr\u00e9 magique de lettres Un carr\u00e9 magique de lettres , \u00e9galement appel\u00e9 \u00ab mots carr\u00e9s \u00bb, est une forme de mots crois\u00e9s dispos\u00e9 en carr\u00e9, ne comportant pas de case noire et constitu\u00e9 de mots valides dans une langue d\u00e9finie. Ils peuvent, par d\u00e9finition, \u00eatre lus horizontalement et verticalement et pr\u00e9sentent dans ces deux sens les m\u00eames mots. Fig.2.1 - Carr\u00e9 magique de lettres d'ordre 3 T E L E T E L E S Fig.2.2 - Carr\u00e9 magique de lettres d'ordre 5 C U L T E U N I E S L I O N S T E N T A E S S A I \u00c9crire un pr\u00e9dicat est_magique_lettres qui prend une matrice de caract\u00e8res en param\u00e8tre et indique si le carr\u00e9 est magique de lettres ou non. Pour aller plus loin Fig.3 - Dessin d'une maison \u26aa \u26aa \u26aa \u26ab \u26aa \u26aa \u26aa \u26aa \u26ab \u26aa \u26ab \u26aa \u26aa \u26ab \u26aa \u26aa \u26aa \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26aa \u26ab \u26aa \u26aa \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab D\u00e9claration de la matrice correspondante \u00e0 la Fig.1 : 1 2 3 4 5 6 7 8 matrice = [ [ '\u26aa' , '\u26aa' , '\u26aa' , '\u26ab' , '\u26aa' , '\u26aa' ], [ '\u26aa' , '\u26aa' , '\u26ab' , '\u26aa' , '\u26ab' , '\u26aa' ], [ '\u26aa' , '\u26ab' , '\u26aa' , '\u26aa' , '\u26aa' , '\u26ab' ], [ '\u26ab' , '\u26ab' , '\u26ab' , '\u26ab' , '\u26ab' , '\u26ab' ], [ '\u26ab' , '\u26aa' , '\u26ab' , '\u26aa' , '\u26aa' , '\u26ab' ], [ '\u26ab' , '\u26ab' , '\u26ab' , '\u26ab' , '\u26ab' , '\u26ab' ] ] \u00c9crire une m\u00e9thode miroir_vertical qui prend en param\u00e8tre une matrice et a pour effet de bord de r\u00e9aliser l'effet miroir vertical sur les valeurs de la matrice. Fig.3.1 - Effet miroir vertical de la Fig.4 \u26aa \u26aa \u26ab \u26aa \u26aa \u26aa \u26aa \u26ab \u26aa \u26ab \u26aa \u26aa \u26ab \u26aa \u26aa \u26aa \u26ab \u26aa \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26aa \u26aa \u26ab \u26aa \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u00c9crire une m\u00e9thode miroir_horizontal qui prend en param\u00e8tre une matrice et a pour effet de bord de r\u00e9aliser l'effet miroir horizontal sur les valeurs de la matrice. Fig.3.2 - Effet miroir horizontal de la Fig.4 \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26aa \u26ab \u26aa \u26aa \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26aa \u26ab \u26aa \u26aa \u26aa \u26ab \u26aa \u26aa \u26ab \u26aa \u26ab \u26aa \u26aa \u26aa \u26aa \u26ab \u26aa \u26aa \u00c9crire une fonction rotation_horaire qui prend en param\u00e8tre une matrice et renvoie une matrice dont les valeurs correspondent \u00e0 la rotation dans le sens horaire des valeurs de la matrice. Fig.3.3 - Roration horaire de la Fig.4 \u26ab \u26ab \u26ab \u26aa \u26aa \u26aa \u26ab \u26aa \u26ab \u26ab \u26aa \u26aa \u26ab \u26ab \u26ab \u26aa \u26ab \u26aa \u26ab \u26aa \u26ab \u26aa \u26aa \u26ab \u26ab \u26aa \u26ab \u26aa \u26ab \u26aa \u26ab \u26ab \u26ab \u26ab \u26aa \u26aa \u00c9crire une fonction rotation_anti_horaire qui prend en param\u00e8tre une matrice et renvoie une matrice dont les valeurs correspondent \u00e0 la rotation dans le sens anti-horaire des valeurs de la matrice. Fig.3.4 - Roration anti-horaire de la Fig.4 \u26aa \u26aa \u26ab \u26ab \u26ab \u26ab \u26aa \u26ab \u26aa \u26ab \u26aa \u26ab \u26ab \u26aa \u26aa \u26ab \u26aa \u26ab \u26aa \u26ab \u26aa \u26ab \u26ab \u26ab \u26aa \u26aa \u26ab \u26ab \u26aa \u26ab \u26aa \u26aa \u26aa \u26ab \u26ab \u26ab Pour valider vos fonctions, vous pouvez r\u00e9aliser sur papier les op\u00e9rations miroir et de rotation sur la Fig.4 et v\u00e9rifier que les r\u00e9sultats obtenus sont conformes. Fig.4 - Dessin d'un bateau avec une mouette \u26aa \u26aa \u26ab \u26aa \u26aa \u26aa \u26aa \u26aa \u26ab \u26ab \u26aa \u26ab \u26aa \u26ab \u26ab \u26aa \u26ab \u26aa \u26aa \u26ab \u26aa \u26aa \u26ab \u26ab \u26aa \u26aa \u26aa \u26aa \u26aa \u26aa \u26ab \u26aa \u26aa \u26aa \u26aa \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26ab \u26aa \u26aa \u26aa \u26aa \u26aa \u26ab \u26aa \u26ab \u26ab \u26ab \u26ab \u26ab \u26aa D\u00e9claration de la matrice correspondante \u00e0 la Fig.4 : 1 2 3 4 5 6 7 8 9 10 matrice = [ [ '\u26aa' , '\u26aa' , '\u26ab' , '\u26aa' , '\u26aa' , '\u26aa' , '\u26aa' ], [ '\u26aa' , '\u26ab' , '\u26ab' , '\u26aa' , '\u26ab' , '\u26aa' , '\u26ab' ], [ '\u26ab' , '\u26aa' , '\u26ab' , '\u26aa' , '\u26aa' , '\u26ab' , '\u26aa' ], [ '\u26aa' , '\u26ab' , '\u26ab' , '\u26aa' , '\u26aa' , '\u26aa' , '\u26aa' ], [ '\u26aa' , '\u26aa' , '\u26ab' , '\u26aa' , '\u26aa' , '\u26aa' , '\u26aa' ], [ '\u26ab' , '\u26ab' , '\u26ab' , '\u26ab' , '\u26ab' , '\u26ab' , '\u26ab' ], [ '\u26ab' , '\u26aa' , '\u26aa' , '\u26aa' , '\u26aa' , '\u26aa' , '\u26ab' ], [ '\u26aa' , '\u26ab' , '\u26ab' , '\u26ab' , '\u26ab' , '\u26ab' , '\u26aa' ] ]","title":"TP : Les Tableaux"},{"location":"premiere/bloc2/chapitre-01/TP/#tp-les-tableaux","text":"Ce TP va nous permettre de manipuler les tableaux en Python, et de travailler les comp\u00e9tences suivantes : Comp\u00e9tence 3.2.1 : Lire et modifier les \u00e9l\u00e9ments d\u2019un tableau gr\u00e2ce \u00e0 leurs index Comp\u00e9tence 3.2.3 : Utiliser des tableaux de tableaux pour repr\u00e9senter des matrices : notation a[i][j] Comp\u00e9tence 3.2.4 : It\u00e9rer sur les \u00e9l\u00e9ments d\u2019un tableau Comp\u00e9tence 8.1.1 : \u00c9crire un algorithme de recherche d\u2019une occurrence sur des valeurs de type quelconque Comp\u00e9tence 8.1.2 : \u00c9crire un algorithme de recherche d\u2019un extr\u00e9mum, de calcul d\u2019une moyenne","title":"TP : Les Tableaux"},{"location":"premiere/bloc2/chapitre-01/TP/#rappel","text":"Pour cr\u00e9er un tableau en python, la syntaxe est la suivante : 1 >>> tableau = [] Pour ajouter un \u00e9l\u00e9ment \u00e0 un tableau, on utilise la m\u00e9thode append : 1 2 3 4 >>> tableau . append ( 'NSI' ) >>> tableau . append ( 'ANGLAIS' ) >>> tableau [ 'NSI' , 'ANGLAIS' ] Pour acc\u00e9der \u00e0 un \u00e9l\u00e9ment, on utilise son indice : 1 2 3 4 >>> tableau [ 0 ] 'NSI' >>> tableau [ 1 ] 'ANGLAIS' Il est \u00e9galement possible de cr\u00e9er un tableau avec un ensemble d'\u00e9l\u00e9ments : 1 2 3 >>> tableau = [ 'NSI' , 'ANGLAIS' , 'PHYSIQUE' ] >>> tableau [ 'NSI' , 'ANGLAIS' , 'PHYSIQUE' ] Il est possible d'obtenir la taille du tableau, i.e le nombre d'\u00e9l\u00e9ments gr\u00e2ce \u00e0 la m\u00e9thode len : 1 2 >>> len ( tableau ) 3","title":"Rappel"},{"location":"premiere/bloc2/chapitre-01/TP/#exercices","text":"","title":"Exercices"},{"location":"premiere/bloc2/chapitre-01/TP/#exercice-1-creation-de-tableaux","text":"1.1 Cr\u00e9er un tableau contenant l'ensemble des noms des personnes dans la salle de TP 1.2 Cr\u00e9er un tableau contenant l'ensemble des entiers pairs entre 0 et 20 inclus, 1.3 Afficher uniquement les entiers du tableau qui sont multiples de 4. 1.4 Cr\u00e9er une fonction aleatoire qui renvoie un tableau de valeurs al\u00e9atoires. Elle prend 3 entiers en param\u00e8tre : - \\(n\\) : le nombre d'\u00e9l\u00e9ments du tableau - \\(min\\) : la valeur minimale possible - \\(max\\) : la valeur maximale possible","title":"Exercice 1 : Cr\u00e9ation de tableaux"},{"location":"premiere/bloc2/chapitre-01/TP/#exercice-2-operations-sur-les-tableaux","text":"$ + $ et $ \\times $","title":"Exercice 2 : Op\u00e9rations sur les tableaux"},{"location":"premiere/bloc2/chapitre-01/TP/#exercice-3-parcours-et-recherche","text":"1 2 >>> groupe_1 = [ 'Alan' , 'Brice' , 'Chlo\u00e9' , 'Damien' , 'El\u00e9onore' , 'Farid' ] >>> groupe_2 = [ 'Damien' , 'Killian' , 'Margot' , 'Tom' , 'Hugo' , 'Killian' ] 3.1 \u00c9crire une fonction indice qui prend en param\u00e8tre un tableau de noms et un nom et permet d'obtenir l'indice du nom dans le tableau. 3.2 \u00c9crire une fonction est_present qui prend en param\u00e8tre un tableau et un nom et renvoie True si le nom est pr\u00e9sent dans le tableau, False sinon. 3.3 \u00c9crire une fonction indices qui prend en param\u00e8tre un tableau de noms et un nom et permet d'obtenir l'ensemble des indices du nom dans le tableau. 3.4 \u00c9crire une fonction compte qui prend en param\u00e8tre un tableau de noms et un nom et permet d'obtenir le nombre d'occurrences du nom dans le tableau.","title":"Exercice 3 : Parcours et Recherche"},{"location":"premiere/bloc2/chapitre-01/TP/#exercice-4-agregation","text":"1 >>> notes = [ 14.5 , 13 , 7 , 10.25 , 16 , 12.5 , 9.5 ] 4.1 \u00c9crire une fonction somme qui prend en param\u00e8tre un tableau de flottants et renvoie la somme des valeurs du tableau. 4.2 \u00c9crire une fonction moyenne qui prend en param\u00e8tre un tableau de flottants et renvoie la valeur moyenne du tableau. 4.3 \u00c9crire une fonction maximum qui prend en param\u00e8tre un tableau de flottants et renvoie la valeur maximale du tableau.","title":"Exercice 4 : Agr\u00e9gation"},{"location":"premiere/bloc2/chapitre-01/TP/#exercice-5-manipulations-sur-les-tableaux","text":"Pour tester les fonctions de manipulations, nous utiliserons le Code Konami wikip\u00e9dia 1 >>> code = [ \"\u2191\" , \"\u2191\" , \"\u2193\" , \"\u2193\" , \"\u2190\" , \"\u2192\" , \"\u2190\" , \"\u2192\" , \"B\" , \"A\" ] 5.1 \u00c9crire une m\u00e9thode inverser qui prend en param\u00e8tre un tableau et a pour effet de bord d'inverser l'ensemble des valeurs du tableau. 5.2 \u00c9crire une fonction copie qui prend en param\u00e8tre un tableau et renvoie une copie du tableau. 5.3 \u00c9crire une m\u00e9thode dedoublonner qui prend en param\u00e8tre un tableau et a pour effet de bord de supprimer les doublons d'une m\u00eame valeur. 5.4 \u00c9crire une fonction tranche qui prend en param\u00e8tre un tableau et deux entiers \\(min\\) et \\(max\\) , et renvoie le sous-tableau entre \\(min\\) et \\(max\\) .","title":"Exercice 5 : Manipulations sur les tableaux"},{"location":"premiere/bloc2/chapitre-01/TP/#exercice-6-matrice","text":"6.1 \u00c9crire une fonction ligne qui prend en param\u00e8tre une matrice et un indice de ligne en entr\u00e9es et renvoie un tableau avec l'ensemble des valeurs de la ligne. 6.2 \u00c9crire une fonction colonne qui prend en param\u00e8tre une matrice et un indice de colonne en entr\u00e9es et renvoie un tableau avec l'ensemble des valeurs de la colonne. 6.3 \u00c9crire une fonction diagonale_nord_ouest qui prend en param\u00e8tre une matrice et renvoie un tableau avec l'ensemble des valeurs de la diagonale. La premi\u00e8re valeur est celle \u00e0 l'indice [0][0] et la derni\u00e8re celle correspondant \u00e0 l'indice [len(matrice) - 1][len(matrice) - 1]. 6.4 \u00c9crire une fonction diagonale_nord_est qui prend en param\u00e8tre une matrice et renvoie un tableau avec l'ensemble des valeurs de la diagonale. La premi\u00e8re valeur est celle \u00e0 l'indice [0][len(matrice) - 1] et la derni\u00e8re celle correspondant \u00e0 l'indice [len(matrice) - 1][0].","title":"Exercice 6 : Matrice"},{"location":"premiere/bloc2/chapitre-02/","text":"Tuple","title":"Tuple"},{"location":"premiere/bloc2/chapitre-02/#tuple","text":"","title":"Tuple"},{"location":"premiere/bloc2/chapitre-03/","text":"Dictionnaire","title":"Dictionnaire"},{"location":"premiere/bloc2/chapitre-03/#dictionnaire","text":"","title":"Dictionnaire"},{"location":"premiere/bloc2/chapitre-04/","text":"Traitement des donn\u00e9es en Table","title":"Traitement des donn\u00e9es en Table"},{"location":"premiere/bloc2/chapitre-04/#traitement-des-donnees-en-table","text":"","title":"Traitement des donn\u00e9es en Table"},{"location":"premiere/bloc3/","text":"Sommaire Bloc 3 - R\u00e9seau et Web Source : Wikimedia Pr\u00e9ambule Organisation Le bloc se d\u00e9compose en 2 chapitres : Chapitre 1 : Architecture d'un R\u00e9seau Chapitre 2 : Le Web Programme Officiel Contenus Capacit\u00e9s attendues Modalit\u00e9s de l\u2019interaction entre l\u2019homme et la machine. \u00c9v\u00e9nements Identifier les diff\u00e9rents composants graphiques permettant d\u2019interagir avec une application Web. Identifier les \u00e9v\u00e9nements que les fonctions associ\u00e9es aux diff\u00e9rents composants graphiques sont capables de traiter. Transmission de donn\u00e9es dans un r\u00e9seau. Protocoles de communication Architecture d\u2019un r\u00e9seau Mettre en \u00e9vidence l\u2019int\u00e9r\u00eat du d\u00e9coupage des donn\u00e9es en paquets et de leur encapsulation. D\u00e9rouler le fonctionnement d\u2019un protocole simple de r\u00e9cup\u00e9ration de perte de paquets (bit altern\u00e9). Simuler ou mettre en \u0153uvre un r\u00e9seau. Interaction avec l\u2019utilisateur dans une page Web Analyser et modifier les m\u00e9thodes ex\u00e9cut\u00e9es lors d\u2019un clic sur un bouton d\u2019une page Web. Interaction client / serveur. Requ\u00eates HTTP, r\u00e9ponses du serveur Distinguer ce qui est ex\u00e9cut\u00e9 sur le client ou sur le serveur et dans quel ordre. Distinguer ce qui est m\u00e9moris\u00e9 dans le client et retransmis au serveur. Reconna\u00eetre quand et pourquoi la transmission est chiffr\u00e9e. Formulaire d\u2019une page Web Analyser le fonctionnement d\u2019un formulaire simple. Distinguer les transmissions de param\u00e8tres par les requ\u00eates POST ou GET.","title":"Sommaire"},{"location":"premiere/bloc3/#sommaire","text":"","title":"Sommaire"},{"location":"premiere/bloc3/#bloc-3-reseau-et-web","text":"Source : Wikimedia","title":"Bloc 3 - R\u00e9seau et Web"},{"location":"premiere/bloc3/#preambule","text":"","title":"Pr\u00e9ambule"},{"location":"premiere/bloc3/#organisation","text":"Le bloc se d\u00e9compose en 2 chapitres : Chapitre 1 : Architecture d'un R\u00e9seau Chapitre 2 : Le Web","title":"Organisation"},{"location":"premiere/bloc3/#programme-officiel","text":"Contenus Capacit\u00e9s attendues Modalit\u00e9s de l\u2019interaction entre l\u2019homme et la machine. \u00c9v\u00e9nements Identifier les diff\u00e9rents composants graphiques permettant d\u2019interagir avec une application Web. Identifier les \u00e9v\u00e9nements que les fonctions associ\u00e9es aux diff\u00e9rents composants graphiques sont capables de traiter. Transmission de donn\u00e9es dans un r\u00e9seau. Protocoles de communication Architecture d\u2019un r\u00e9seau Mettre en \u00e9vidence l\u2019int\u00e9r\u00eat du d\u00e9coupage des donn\u00e9es en paquets et de leur encapsulation. D\u00e9rouler le fonctionnement d\u2019un protocole simple de r\u00e9cup\u00e9ration de perte de paquets (bit altern\u00e9). Simuler ou mettre en \u0153uvre un r\u00e9seau. Interaction avec l\u2019utilisateur dans une page Web Analyser et modifier les m\u00e9thodes ex\u00e9cut\u00e9es lors d\u2019un clic sur un bouton d\u2019une page Web. Interaction client / serveur. Requ\u00eates HTTP, r\u00e9ponses du serveur Distinguer ce qui est ex\u00e9cut\u00e9 sur le client ou sur le serveur et dans quel ordre. Distinguer ce qui est m\u00e9moris\u00e9 dans le client et retransmis au serveur. Reconna\u00eetre quand et pourquoi la transmission est chiffr\u00e9e. Formulaire d\u2019une page Web Analyser le fonctionnement d\u2019un formulaire simple. Distinguer les transmissions de param\u00e8tres par les requ\u00eates POST ou GET.","title":"Programme Officiel"},{"location":"premiere/bloc3/chapitre-02/","text":"Cours Contexte Selon une \u00e9tude[1] publi\u00e9e par Hootsuite et We are social en 2020, 89% de la population fran\u00e7aise a acc\u00e8s \u00e0 l'Internet et passent en moyenne 5h08 par jour \u00e0 l'utiliser. Cette \u00e9tude traite des usages de l'internet, qui englobe notamment la navigation sur le Web. Chacun sait ouvrir un navigateur et se rendre sur une page, gr\u00e2ce \u00e0 son ordinateur, son t\u00e9l\u00e9phone ou sa tablette...mais sait-on r\u00e9ellement comment fonctionne le Web ? Questions Web ? Internet ? Quelle est la diff\u00e9rence ? Que se passe-t-il lorsque j'utilise un navigateur web ? Quelles sont les informations manipul\u00e9es ? Sous quelle forme ? Comment cr\u00e9er une page web et la rendre accessible \u00e0 tous ? D\u00e9finition Questions Quelle est la diff\u00e9rence entre Internet et Web ? On confond souvent Internet et le Web (ou \u00ab toile \u00bb en fran\u00e7ais). On trouve des choses sur Internet, on surfe sur le Web. Mais o\u00f9 est la diff\u00e9rence ? En bref, le Web est un ensemble d\u2019informations, tandis qu\u2019Internet est le r\u00e9seau informatique qui permet de les transporter. Pour prendre une analogie avec le r\u00e9seau postal : si l'Internet est le facteur, le Web est le courrier. D\u00e9finition Le terme Web est une contraction de World Wide Web . Il s'agit d'un r\u00e9seau hypertexte fonctionnant sur Internet. Concr\u00e8tement, le Web est constitu\u00e9 par les donn\u00e9es stock\u00e9es sur les serveurs Web. Un serveur est un ordinateur reli\u00e9 \u00e0 Internet qui peut \u00ab servir \u00bb des donn\u00e9es : on le contacte et il r\u00e9pond en envoyant des donn\u00e9es qu\u2019il a stock\u00e9es. On parle de Ressource Web ou Page Web . Un navigateur Web permet d'afficher le contenu des pages web accessibles sur ces sites. Une page Web est un fichier HTML. Il peut contenir un lien hypertexte, c\u2019est-\u00e0-dire une URL ins\u00e9r\u00e9e dans le texte de la page, de sorte qu\u2019en cliquant sur la zone de texte associ\u00e9e, j\u2019indique \u00e0 mon navigateur de charger la page Web point\u00e9e par l\u2019URL en question. Il y a donc un lien logique de la premi\u00e8re page vers la deuxi\u00e8me. Les liens hypertextes forment donc un r\u00e9seau tiss\u00e9 entre les pages Web. Dans le cas d\u2019Internet, les liens correspondent \u00e0 des liens de communication physique (votre fil t\u00e9l\u00e9phonique, ou une fibre optique par exemple) le long desquels circule l\u2019information. Dans le cas du Web, les liens sont logiques, ils ne correspondent \u00e0 rien de physique. Ils nous servent juste \u00e0 passer d\u2019une page \u00e0 l\u2019autre quand nous cliquons dessus, avec tous ses renvois d\u2019une page \u00e0 l\u2019autre que sont ces liens hypertexte. Internet Web Typologie de r\u00e9seau Physique Logique Permet de relier Machines (par des fils t\u00e9l\u00e9phoniques, fibre optique...) Ressource Web (par des liens hypertextes) Fonctionnement Questions Que se passe-t-il lorsque un navigateur affiche une page Web ? URL Tout d\u2019abord, l'utilisateur tape une URL (\u00ab Uniform Ressource Locator \u00bb) comme : https://Philippe-boddaert.github.io/premi\u00e8re/bloc3/chapitre-02/index.html l'URL est l'adresse de la ressource Web et indique 3 choses : le protocole de communication : indique au navigateur comment demander la ressource, ici https (\"hypertext transfer protocol secure\"), le nom du serveur Web qui contient la ressource Web : Philippe-boddaert.github.io , le nom de la ressource Web : index.html qui se trouve sous l'arborescence premi\u00e8re/bloc3/chapitre-02/ Le fonctionnement du protocole http est d\u00e9crit dans la partie [TODO]. Page Web Une page web est un fichier HTML, i.e un fichier texte portant l'extension .htm ou .html . Il est stock\u00e9 dans un serveur web et transmis \u00e0 un client \u00e0 travers son URL . 1 2 3 4 5 6 7 < html > < body > < h1 > Hello World !! </ h1 > </ body > </ html > Historique 13 Novembre 1990 : Cr\u00e9ation de la premi\u00e8re page Web, accessible \u00e0 l'URL http://info.cern.ch/hypertext/WWW/TheProject.html R\u00e9sum\u00e9 Points \u00e0 retenir Le Web est un r\u00e9seau d'informations qui repose sur le r\u00e9seau internet, Le Web repose sur diff\u00e9rentes technologies : Transport (HTTP), Contenu (HTML), Visuel et Graphique (CSS, JS) Le protocole HTTP, via des urls, permet d'interroger un serveur web qui renvoie une ressource web sous la forme d'une page html Une page HTML est un fichier texte qui va \u00eatre interpr\u00e9t\u00e9 et traduit graphiquement par le navigateur. Il contient la description de la page et son contenu (texte, image, vid\u00e9o et liens vers d'autres ressources) Une feuille CSS permet de manipuler l'ensemble de la disposition graphique (texte, taille, couleur, placement ) d'une page HTML L'utilisateur peut interagir avec la page html via des \u00e9l\u00e9ments graphiques via du langage Javascript Selon le navigateur, la plateforme et leurs versions le rendu d'une page peut \u00eatre diff\u00e9rent. Le W3C est l'organisme qui guide l'\u00e9volution du Web. D\u00e9finitions HTML = langage de description, par balise. N'est pas un langage de programmation, il ne permet d'effectuer des calculs CSS = langage de description, par s\u00e9lecteur (balise). N'est pas un langage de programmation, il ne permet pas d'effectuer des calculs. Javascript = langage de programmation multiparadigme, notamment \u00e9v\u00e9nementiel qui permet des interactions locales et distantes. Outils : debugger du navigateur, curl Etapes Cr\u00e9ation d'une page locale statique Gestion des \u00e9v\u00e9nements de la page locale statique Cr\u00e9ation d'un serveur web Gestion des appels de services distants Ressources [1] - \u00c9tude : le num\u00e9rique en France en 2020 , Alexandra Patard sur le site blogdumoderateur.com, https://www.blogdumoderateur.com/internet-reseaux-sociaux-france-2020/ , Publi\u00e9 le 12/02/2020 [2] - Id\u00e9e re\u00e7ue : Web et Internet, c\u2019est la m\u00eame chose ! , Laurent Viennot sur le site interstices.info, https://interstices.info/idee-recue-web-et-internet-cest-la-meme-chose/ , Publi\u00e9 le 06/01/2009 [3] - Les d\u00e9buts du Web\u2026 sous l\u2019\u0153il du W3C , Fabien Gandon , sur le site interstices.info, https://interstices.info/les-debuts-du-web-sous-loeil-du-w3c/ , Publi\u00e9 le 24/03/2009 [4] - Un moteur de recherche, pour le meilleur et pour le pire , Jean-Paul Delahaye sur le site interstice.info, https://interstices.info/un-moteur-de-recherche-pour-le-meilleur-et-pour-le-pire/ , Publi\u00e9 le 13/02/2007","title":"Cours"},{"location":"premiere/bloc3/chapitre-02/#cours","text":"","title":"Cours"},{"location":"premiere/bloc3/chapitre-02/#contexte","text":"Selon une \u00e9tude[1] publi\u00e9e par Hootsuite et We are social en 2020, 89% de la population fran\u00e7aise a acc\u00e8s \u00e0 l'Internet et passent en moyenne 5h08 par jour \u00e0 l'utiliser. Cette \u00e9tude traite des usages de l'internet, qui englobe notamment la navigation sur le Web. Chacun sait ouvrir un navigateur et se rendre sur une page, gr\u00e2ce \u00e0 son ordinateur, son t\u00e9l\u00e9phone ou sa tablette...mais sait-on r\u00e9ellement comment fonctionne le Web ? Questions Web ? Internet ? Quelle est la diff\u00e9rence ? Que se passe-t-il lorsque j'utilise un navigateur web ? Quelles sont les informations manipul\u00e9es ? Sous quelle forme ? Comment cr\u00e9er une page web et la rendre accessible \u00e0 tous ?","title":"Contexte"},{"location":"premiere/bloc3/chapitre-02/#definition","text":"Questions Quelle est la diff\u00e9rence entre Internet et Web ? On confond souvent Internet et le Web (ou \u00ab toile \u00bb en fran\u00e7ais). On trouve des choses sur Internet, on surfe sur le Web. Mais o\u00f9 est la diff\u00e9rence ? En bref, le Web est un ensemble d\u2019informations, tandis qu\u2019Internet est le r\u00e9seau informatique qui permet de les transporter. Pour prendre une analogie avec le r\u00e9seau postal : si l'Internet est le facteur, le Web est le courrier. D\u00e9finition Le terme Web est une contraction de World Wide Web . Il s'agit d'un r\u00e9seau hypertexte fonctionnant sur Internet. Concr\u00e8tement, le Web est constitu\u00e9 par les donn\u00e9es stock\u00e9es sur les serveurs Web. Un serveur est un ordinateur reli\u00e9 \u00e0 Internet qui peut \u00ab servir \u00bb des donn\u00e9es : on le contacte et il r\u00e9pond en envoyant des donn\u00e9es qu\u2019il a stock\u00e9es. On parle de Ressource Web ou Page Web . Un navigateur Web permet d'afficher le contenu des pages web accessibles sur ces sites. Une page Web est un fichier HTML. Il peut contenir un lien hypertexte, c\u2019est-\u00e0-dire une URL ins\u00e9r\u00e9e dans le texte de la page, de sorte qu\u2019en cliquant sur la zone de texte associ\u00e9e, j\u2019indique \u00e0 mon navigateur de charger la page Web point\u00e9e par l\u2019URL en question. Il y a donc un lien logique de la premi\u00e8re page vers la deuxi\u00e8me. Les liens hypertextes forment donc un r\u00e9seau tiss\u00e9 entre les pages Web. Dans le cas d\u2019Internet, les liens correspondent \u00e0 des liens de communication physique (votre fil t\u00e9l\u00e9phonique, ou une fibre optique par exemple) le long desquels circule l\u2019information. Dans le cas du Web, les liens sont logiques, ils ne correspondent \u00e0 rien de physique. Ils nous servent juste \u00e0 passer d\u2019une page \u00e0 l\u2019autre quand nous cliquons dessus, avec tous ses renvois d\u2019une page \u00e0 l\u2019autre que sont ces liens hypertexte. Internet Web Typologie de r\u00e9seau Physique Logique Permet de relier Machines (par des fils t\u00e9l\u00e9phoniques, fibre optique...) Ressource Web (par des liens hypertextes)","title":"D\u00e9finition"},{"location":"premiere/bloc3/chapitre-02/#fonctionnement","text":"Questions Que se passe-t-il lorsque un navigateur affiche une page Web ?","title":"Fonctionnement"},{"location":"premiere/bloc3/chapitre-02/#url","text":"Tout d\u2019abord, l'utilisateur tape une URL (\u00ab Uniform Ressource Locator \u00bb) comme : https://Philippe-boddaert.github.io/premi\u00e8re/bloc3/chapitre-02/index.html l'URL est l'adresse de la ressource Web et indique 3 choses : le protocole de communication : indique au navigateur comment demander la ressource, ici https (\"hypertext transfer protocol secure\"), le nom du serveur Web qui contient la ressource Web : Philippe-boddaert.github.io , le nom de la ressource Web : index.html qui se trouve sous l'arborescence premi\u00e8re/bloc3/chapitre-02/ Le fonctionnement du protocole http est d\u00e9crit dans la partie [TODO].","title":"URL"},{"location":"premiere/bloc3/chapitre-02/#page-web","text":"Une page web est un fichier HTML, i.e un fichier texte portant l'extension .htm ou .html . Il est stock\u00e9 dans un serveur web et transmis \u00e0 un client \u00e0 travers son URL . 1 2 3 4 5 6 7 < html > < body > < h1 > Hello World !! </ h1 > </ body > </ html >","title":"Page Web"},{"location":"premiere/bloc3/chapitre-02/#historique","text":"13 Novembre 1990 : Cr\u00e9ation de la premi\u00e8re page Web, accessible \u00e0 l'URL http://info.cern.ch/hypertext/WWW/TheProject.html","title":"Historique"},{"location":"premiere/bloc3/chapitre-02/#resume","text":"Points \u00e0 retenir Le Web est un r\u00e9seau d'informations qui repose sur le r\u00e9seau internet, Le Web repose sur diff\u00e9rentes technologies : Transport (HTTP), Contenu (HTML), Visuel et Graphique (CSS, JS) Le protocole HTTP, via des urls, permet d'interroger un serveur web qui renvoie une ressource web sous la forme d'une page html Une page HTML est un fichier texte qui va \u00eatre interpr\u00e9t\u00e9 et traduit graphiquement par le navigateur. Il contient la description de la page et son contenu (texte, image, vid\u00e9o et liens vers d'autres ressources) Une feuille CSS permet de manipuler l'ensemble de la disposition graphique (texte, taille, couleur, placement ) d'une page HTML L'utilisateur peut interagir avec la page html via des \u00e9l\u00e9ments graphiques via du langage Javascript Selon le navigateur, la plateforme et leurs versions le rendu d'une page peut \u00eatre diff\u00e9rent. Le W3C est l'organisme qui guide l'\u00e9volution du Web. D\u00e9finitions HTML = langage de description, par balise. N'est pas un langage de programmation, il ne permet d'effectuer des calculs CSS = langage de description, par s\u00e9lecteur (balise). N'est pas un langage de programmation, il ne permet pas d'effectuer des calculs. Javascript = langage de programmation multiparadigme, notamment \u00e9v\u00e9nementiel qui permet des interactions locales et distantes. Outils : debugger du navigateur, curl Etapes Cr\u00e9ation d'une page locale statique Gestion des \u00e9v\u00e9nements de la page locale statique Cr\u00e9ation d'un serveur web Gestion des appels de services distants","title":"R\u00e9sum\u00e9"},{"location":"premiere/bloc3/chapitre-02/#ressources","text":"[1] - \u00c9tude : le num\u00e9rique en France en 2020 , Alexandra Patard sur le site blogdumoderateur.com, https://www.blogdumoderateur.com/internet-reseaux-sociaux-france-2020/ , Publi\u00e9 le 12/02/2020 [2] - Id\u00e9e re\u00e7ue : Web et Internet, c\u2019est la m\u00eame chose ! , Laurent Viennot sur le site interstices.info, https://interstices.info/idee-recue-web-et-internet-cest-la-meme-chose/ , Publi\u00e9 le 06/01/2009 [3] - Les d\u00e9buts du Web\u2026 sous l\u2019\u0153il du W3C , Fabien Gandon , sur le site interstices.info, https://interstices.info/les-debuts-du-web-sous-loeil-du-w3c/ , Publi\u00e9 le 24/03/2009 [4] - Un moteur de recherche, pour le meilleur et pour le pire , Jean-Paul Delahaye sur le site interstice.info, https://interstices.info/un-moteur-de-recherche-pour-le-meilleur-et-pour-le-pire/ , Publi\u00e9 le 13/02/2007","title":"Ressources"},{"location":"premiere/bloc3/chapitre-02/HTML/","text":"HTML D\u00e9finition Le HyperText Markup Language (HTML) est un langage de balisage con\u00e7u pour repr\u00e9senter les pages Web . Attention On parle de langage de balisage. Le HTML n'est pas un langage de programmation. il ne permet pas d'effetuer des calculs mais permet de d\u00e9crire la structure d'une page web. Ce langage permet : d\u2019\u00e9crire de l\u2019hypertexte, d\u2019o\u00f9 son nom, de structurer s\u00e9mantiquement la page, de mettre en forme le contenu, de cr\u00e9er des formulaires de saisie, d\u2019inclure des ressources multim\u00e9dias dont des images, des vid\u00e9os, et des programmes informatiques, de cr\u00e9er des documents interop\u00e9rables avec des \u00e9quipements tr\u00e8s vari\u00e9s de mani\u00e8re conforme aux exigences de l\u2019accessibilit\u00e9 du web. Quelques infos supppl\u00e9mentaires D\u00e9velopp\u00e9 par le World Wide Web Consortium, La version initiale date de 1993 et la version 5 est la derni\u00e8re en vigueur, La sp\u00e9cification compl\u00e8te est disponible \u00e0 cette adresse : https://html.spec.whatwg.org/multipage/ Description Structure d'une page HTML Un document HTML est compos\u00e9 de 4 parties obligatoires : l'instruction du langage, \u00e0 destination du navigateur afin qu'il interpr\u00e8te correctement le document, une structure, entre les balises <html> et </html> , une en-t\u00eate, entre les balises <head> et </head> , un corps, entre les balises <body> et </body> . Un exemple de document HTML minimal : 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> < html lang = 'fr' > < head > < title > Une premi\u00e8re page </ title > </ head > < body > <!-- Ceci est un commentaire --> < p > Ceci est une page HTML </ p > </ body > </ html > Syntaxe des balises Les balises HTML respectent une syntaxe simple et stricte : Un chevron ouvrant (<) Le nom de la balise Des attributs (optionnels). Un espace, suivi du nom de l'attribut, d'un signe \u00e9gal (=) et d'une valeur entre doubles quotes (\"\"). Un chevron fermant (>) Anatomie d'un \u00e9l\u00e9ment : \\[ \\overbrace{\\color{green}{<}\\underbrace{\\color{green}{\\mbox{p}}}_{nom}\\color{green}{>}}^{Balise \\; ouvrante}\\mbox{Ceci est une page HTML}\\overbrace{\\color{green}{\\mbox{</p>}}}^{Balise \\; fermante} \\] Anatomie d'un \u00e9l\u00e9ment avec attribut : \\[ \\overbrace{\\color{green}{<}\\underbrace{\\color{green}{\\mbox{html}}}_{nom}\\quad \\underbrace{\\color{blue}{\\mbox{lang}}=\\color{red}{\\mbox{'fr'}}}_{attributs}\\color{green}{>}}^{Balise \\; ouvrante}\\dots\\overbrace{\\color{green}{\\mbox{</html>}}}^{Balise \\; fermante} \\] La structure document repose sur l'arborescence des balises. Une balise peut contenir d'autres balises. On peut repr\u00e9senter la structure d'un document html \u00e0 l'aide d'un arbre, on parle alors d' arbre DOM (Document Object Model). Balises de bases Liste des balises HTML Type Description Syntaxe Exemple d'utilisation h1, h2, h3, h4 Titre Ces balises permetttent de d\u00e9finir des titres de diff\u00e9rents niveaux : `h1` pour les grands titres et `h6` pour les titres des sections tr\u00e8s sp\u00e9cifiques. <h1>Test</h1> Test p Paragraphe La balise utilis\u00e9e pour cr\u00e9er des paragraphes. Ces paragraphes sont g\u00e9n\u00e9ralement s\u00e9par\u00e9s par des sauts de ligne. <p>Ceci est un paragraphe</p> Ceci est un paragraphe i Texte en italique Le texte contenu dans le corps de la balise est \u00e9crit en italique <i>Texte en italique</i> Texte en italique b Texte en gras Le texte contenu dans le corps de la balise est \u00e9crit en gras <b>Texte en gras</b> Texte en gras a Lien Cette balise est utilis\u00e9e afin de cr\u00e9er des liens vers des ressources externes. Les balises <a> contiennent le texte qui sera utilis\u00e9 pour le lien. L'attribut href de cet \u00e9l\u00e9ment est utilis\u00e9 pour d\u00e9finir l'URL cible <a href=\"https://www.education.gouv.fr\" > Lien vers le site de l'\u00e9ducation nationale </a> Lien vers le site de l'\u00e9ducation nationale img Image Cette balise permet d'int\u00e9grer une image dans un document HTML. L'attribut src de cet \u00e9l\u00e9ment est utilis\u00e9 pour d\u00e9finir l'URL cible <img src=\"./assets/html5-logo.png\" /> ul Liste Cette balise est utilis\u00e9e pour cr\u00e9er une liste non-ordonn\u00e9e. Ce sera la balise <li> qui permettra de d\u00e9finir un \u00e9l\u00e9ment de la liste. <ul> <li>Caf\u00e9</li> <li>Th\u00e9</li> <li>Lait</li> </ul> Caf\u00e9 Th\u00e9 Lait ol Liste Cette balise est utilis\u00e9e pour cr\u00e9er une liste ordonn\u00e9e. Ce sera la balise <li> qui permettra de d\u00e9finir un \u00e9l\u00e9ment de la liste. <ol> <li>Caf\u00e9</li> <li>Th\u00e9</li> <li>Lait</li> </ol> Caf\u00e9 Th\u00e9 Lait table, tr, td Tableau Ces balises permettent de repr\u00e9senter un tableau de donn\u00e9es, c'est-\u00e0-dire des informations exprim\u00e9es sur un tableau en deux dimensions. <table> <tr> <th>Pr\u00e9nom</th> <th>Nom</th> </tr> <tr> <td>Jean</td> <td>Dupont</td> </tr> <tr> <td>Marion</td> <td>Duval</td> </tr> </table> Pr\u00e9nom Nom Jean Dupont Marion Duval \u00c9l\u00e9ments sp\u00e9ciaux Les commentaires Syntaxe Exemple d'utilisation <!-- Ceci est un commentaire. Il ne sera pas affich\u00e9 dans le navigateur.--> Ce texte s'affichera dans le navigateur. Ce texte s'affichera dans le navigateur. Les sauts de ligne Vous pouvez ajouter autant de retours \u00e0 la ligne dans votre code, ceux-ci ne seront jamais affich\u00e9s visuellement dans votre navigateur. La balise br est \u00e0 utiliser pour cr\u00e9er un saut de ligne dans le texte. Syntaxe Exemple d'utilisation Une ligne< br />Une autre ligne Une ligne Une autre ligne L'espace ins\u00e9cable Comme les sauts de ligne, les espaces dans le code HTML ne seront jamais affich\u00e9s visuellement dans votre navigateur. L'entit\u00e9 &nbsp; est \u00e0 utiliser pour cr\u00e9er un espace ins\u00e9cable, i.e qui ne peut \u00eatre coup\u00e9. Syntaxe Exemple d'utilisation Un&nbsp;espace Un espace Ressources [1] Service de validation de document HTML : http://validator.w3.org [2] R\u00e9f\u00e9rence des \u00e9l\u00e9ments HTML, MDN Web Docs","title":"HTML"},{"location":"premiere/bloc3/chapitre-02/HTML/#html","text":"","title":"HTML"},{"location":"premiere/bloc3/chapitre-02/HTML/#definition","text":"Le HyperText Markup Language (HTML) est un langage de balisage con\u00e7u pour repr\u00e9senter les pages Web . Attention On parle de langage de balisage. Le HTML n'est pas un langage de programmation. il ne permet pas d'effetuer des calculs mais permet de d\u00e9crire la structure d'une page web. Ce langage permet : d\u2019\u00e9crire de l\u2019hypertexte, d\u2019o\u00f9 son nom, de structurer s\u00e9mantiquement la page, de mettre en forme le contenu, de cr\u00e9er des formulaires de saisie, d\u2019inclure des ressources multim\u00e9dias dont des images, des vid\u00e9os, et des programmes informatiques, de cr\u00e9er des documents interop\u00e9rables avec des \u00e9quipements tr\u00e8s vari\u00e9s de mani\u00e8re conforme aux exigences de l\u2019accessibilit\u00e9 du web. Quelques infos supppl\u00e9mentaires D\u00e9velopp\u00e9 par le World Wide Web Consortium, La version initiale date de 1993 et la version 5 est la derni\u00e8re en vigueur, La sp\u00e9cification compl\u00e8te est disponible \u00e0 cette adresse : https://html.spec.whatwg.org/multipage/","title":"D\u00e9finition"},{"location":"premiere/bloc3/chapitre-02/HTML/#description","text":"","title":"Description"},{"location":"premiere/bloc3/chapitre-02/HTML/#structure-dune-page-html","text":"Un document HTML est compos\u00e9 de 4 parties obligatoires : l'instruction du langage, \u00e0 destination du navigateur afin qu'il interpr\u00e8te correctement le document, une structure, entre les balises <html> et </html> , une en-t\u00eate, entre les balises <head> et </head> , un corps, entre les balises <body> et </body> . Un exemple de document HTML minimal : 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> < html lang = 'fr' > < head > < title > Une premi\u00e8re page </ title > </ head > < body > <!-- Ceci est un commentaire --> < p > Ceci est une page HTML </ p > </ body > </ html >","title":"Structure d'une page HTML"},{"location":"premiere/bloc3/chapitre-02/HTML/#syntaxe-des-balises","text":"Les balises HTML respectent une syntaxe simple et stricte : Un chevron ouvrant (<) Le nom de la balise Des attributs (optionnels). Un espace, suivi du nom de l'attribut, d'un signe \u00e9gal (=) et d'une valeur entre doubles quotes (\"\"). Un chevron fermant (>) Anatomie d'un \u00e9l\u00e9ment : \\[ \\overbrace{\\color{green}{<}\\underbrace{\\color{green}{\\mbox{p}}}_{nom}\\color{green}{>}}^{Balise \\; ouvrante}\\mbox{Ceci est une page HTML}\\overbrace{\\color{green}{\\mbox{</p>}}}^{Balise \\; fermante} \\] Anatomie d'un \u00e9l\u00e9ment avec attribut : \\[ \\overbrace{\\color{green}{<}\\underbrace{\\color{green}{\\mbox{html}}}_{nom}\\quad \\underbrace{\\color{blue}{\\mbox{lang}}=\\color{red}{\\mbox{'fr'}}}_{attributs}\\color{green}{>}}^{Balise \\; ouvrante}\\dots\\overbrace{\\color{green}{\\mbox{</html>}}}^{Balise \\; fermante} \\] La structure document repose sur l'arborescence des balises. Une balise peut contenir d'autres balises. On peut repr\u00e9senter la structure d'un document html \u00e0 l'aide d'un arbre, on parle alors d' arbre DOM (Document Object Model).","title":"Syntaxe des balises"},{"location":"premiere/bloc3/chapitre-02/HTML/#balises-de-bases","text":"Liste des balises HTML Type Description Syntaxe Exemple d'utilisation h1, h2, h3, h4 Titre Ces balises permetttent de d\u00e9finir des titres de diff\u00e9rents niveaux : `h1` pour les grands titres et `h6` pour les titres des sections tr\u00e8s sp\u00e9cifiques. <h1>Test</h1>","title":"Balises de bases"},{"location":"premiere/bloc3/chapitre-02/HTML/#elements-speciaux","text":"","title":"\u00c9l\u00e9ments sp\u00e9ciaux"},{"location":"premiere/bloc3/chapitre-02/HTML/#les-commentaires","text":"Syntaxe Exemple d'utilisation <!-- Ceci est un commentaire. Il ne sera pas affich\u00e9 dans le navigateur.--> Ce texte s'affichera dans le navigateur. Ce texte s'affichera dans le navigateur.","title":"Les commentaires"},{"location":"premiere/bloc3/chapitre-02/HTML/#les-sauts-de-ligne","text":"Vous pouvez ajouter autant de retours \u00e0 la ligne dans votre code, ceux-ci ne seront jamais affich\u00e9s visuellement dans votre navigateur. La balise br est \u00e0 utiliser pour cr\u00e9er un saut de ligne dans le texte. Syntaxe Exemple d'utilisation Une ligne< br />Une autre ligne Une ligne Une autre ligne","title":"Les sauts de ligne"},{"location":"premiere/bloc3/chapitre-02/HTML/#lespace-insecable","text":"Comme les sauts de ligne, les espaces dans le code HTML ne seront jamais affich\u00e9s visuellement dans votre navigateur. L'entit\u00e9 &nbsp; est \u00e0 utiliser pour cr\u00e9er un espace ins\u00e9cable, i.e qui ne peut \u00eatre coup\u00e9. Syntaxe Exemple d'utilisation Un&nbsp;espace Un espace","title":"L'espace ins\u00e9cable"},{"location":"premiere/bloc3/chapitre-02/HTML/#ressources","text":"[1] Service de validation de document HTML : http://validator.w3.org [2] R\u00e9f\u00e9rence des \u00e9l\u00e9ments HTML, MDN Web Docs","title":"Ressources"},{"location":"premiere/bloc3/chapitre-04/","text":"Protocole HTTP Le protocole HTTP (HyperText Transfer Protocol) est le protocole le plus utilis\u00e9 sur Internet depuis 1990. Le protocole HTTPS est la combinaison du HTTP avec une couche de chiffrement comme SSL ou TLS. Le m\u00e9canisme est le m\u00eame que le protocole HTTP. L'aspect chiffrement fera l'objet d'un autre cours. Dans ce cours, on se limitera \u00e0 l'\u00e9tude du protocole HTTP. En premi\u00e8re, vous avez vu le protocole TCP/IP, qui a en charge de router les paquets dans un r\u00e9seau et d'en assurer le bon acheminement Le protocole HTTP est un protocole de plus haut niveau (Couche Application du mod\u00e8le OSI) et s'appuie sur le protocole TCP/IP (Couche Transport du mod\u00e8le OSI) Mod\u00e8le OSI Source : wikimedia Contexte Le but du protocole HTTP est de permettre un transfert de fichiers (essentiellement au format HTML) localis\u00e9s gr\u00e2ce \u00e0 une cha\u00eene de caract\u00e8res appel\u00e9e URL entre un navigateur (le client) et un serveur Web. Source : commentcamarche.net Le navigateur effectue une requ\u00eate HTTP Le serveur traite la requ\u00eate puis envoie une r\u00e9ponse HTTP Description Requ\u00eate Une requ\u00eate HTTP est un ensemble de lignes envoy\u00e9 au serveur par le navigateur. Elle comprend : Une ligne de requ\u00eate : c'est une ligne pr\u00e9cisant le type de document demand\u00e9, la m\u00e9thode qui doit \u00eatre appliqu\u00e9e, et la version du protocole utilis\u00e9e. La ligne comprend trois \u00e9l\u00e9ments devant \u00eatre s\u00e9par\u00e9s par un espace : La m\u00e9thode L'URL La version du protocole utilis\u00e9 par le client (g\u00e9n\u00e9ralement HTTP/1.0) Les champs d'en-t\u00eate de la requ\u00eate : il s'agit d'un ensemble de lignes facultatives permettant de donner des informations suppl\u00e9mentaires sur la requ\u00eate et/ou le client (Navigateur, syst\u00e8me d'exploitation, ...). Chacune de ces lignes est compos\u00e9e d'un nom qualifiant le type d'en-t\u00eate, suivi de deux points (:) et de la valeur de l'en-t\u00eate Le corps de la requ\u00eate : c'est un ensemble de lignes optionnelles devant \u00eatre s\u00e9par\u00e9es des lignes pr\u00e9c\u00e9dentes par une ligne vide et permettant par exemple un envoi de donn\u00e9es par une commande POST lors de l'envoi de donn\u00e9es au serveur par un formulaire Exemple de requ\u00eate HTTP : 1 2 3 GET https://Philippe-Boddaert.github.io HTTP/1.0 Accept : text/html User-Agent : Mozilla/4.0 (compatible; MSIE 5.0; Windows 95) R\u00e9ponse Une r\u00e9ponse HTTP est un ensemble de lignes envoy\u00e9es au navigateur par le serveur. Elle comprend : Une ligne de statut : c'est une ligne pr\u00e9cisant la version du protocole utilis\u00e9 et l'\u00e9tat du traitement de la requ\u00eate \u00e0 l'aide d'un code et d'un texte explicatif. La ligne comprend trois \u00e9l\u00e9ments devant \u00eatre s\u00e9par\u00e9s par un espace : La version du protocole utilis\u00e9 Le code de statut La signification du code Les champs d'en-t\u00eate de la r\u00e9ponse : il s'agit d'un ensemble de lignes facultatives permettant de donner des informations suppl\u00e9mentaires sur la r\u00e9ponse et/ou le serveur. Chacune de ces lignes est compos\u00e9e d'un nom qualifiant le type d'en-t\u00eate, suivi de deux points (:) et de la valeur de l'en-t\u00eate Le corps de la r\u00e9ponse : il contient le document demand\u00e9 Les navigateurs modernes permettent de visualiser les requ\u00eates et r\u00e9ponses HTTP qu'il g\u00e9n\u00e8re. Exemple de r\u00e9ponse HTTP : 1 2 3 4 5 HTTP / 1.0 200 OK Date : Sat, 15 Jan 2000 14:37:12 GMT Server : Microsoft-IIS/2.0 Content-Type : text/HTML Content-Length : 1245 Last-Modified : Fri, 14 Jan 2000 08:25:13 GMT Exercices d'application Travail 1 Ouvrir l'inspecteur Web de votre navigateur internet, et s\u00e9lectionner l'onglet R\u00e9seau. Saisir l'url de cette page de cours https://Philippe-Boddaert.github.io/premiere/bloc3/chapitre-04/hello.html Identifier les \u00e9l\u00e9ments de la requ\u00eate HTTP et classer les selon la d\u00e9finition ci-dessus Travail 2 Ouvrir l'inspecteur Web de votre navigateur internet, et s\u00e9lectionner l'onglet R\u00e9seau. Saisir l'url de cette page de cours https://Philippe-Boddaert.github.io/premiere/bloc3/chapitre-04/inconnu.html Identifier les \u00e9l\u00e9ments de la requ\u00eate HTTP et classer les selon la d\u00e9finition ci-dessus Quelles diff\u00e9rences constatez-vous dans la r\u00e9ponse HTTP avec elle du Travail 1 ? Les requ\u00eates et r\u00e9ponses HTTP sont g\u00e9n\u00e9r\u00e9es et interpr\u00e9t\u00e9es par le navigateur mais il est tout \u00e0 fait possible de g\u00e9n\u00e9rer celles-ci en dehors d'un navigateur !! Pour cela, nous allons utiliser l'outil curl , une interface en ligne de commandes destin\u00e9e \u00e0 r\u00e9cup\u00e9rer le contenu de ressource accessible par un r\u00e9seau. Travail 3 Ouvrir une invite de commandes et saisir la commande suivante : 1 $ curl -v https://Philippe-Boddaert.github.io/premiere/bloc3/chapitre-04/hello.html Comparer le r\u00e9sultat obtenu avec le travail 1 Copier le contenu de la r\u00e9ponse dans un fichier .html et ouvrer le avec un navigateur web. Que constatez-vous ? Travail 4 Ouvrir une invite de commandes et saisir la commande suivante : 1 $ curl -v https://Philippe-Boddaert.github.io/premiere/bloc3/chapitre-04/inconnu.html Comparer le r\u00e9sultat obtenu avec le travail 2. Compl\u00e9ments M\u00e9thodes de Requ\u00eate Le protocole HTTP est un protocole de haut niveau et permet d'int\u00e9ragir avec des ressources en sp\u00e9cifiant au serveur l'action que l'on souhaite r\u00e9aliser. Pour une m\u00eame URL, Il est possible de sp\u00e9cifier la m\u00e9thode , i.e l'action \u00e0 r\u00e9aliser : M\u00e9thode Description GET Requ\u00eate de r\u00e9cup\u00e9ration de la ressource POST Requ\u00eate d'envoi de donn\u00e9es PUT Requ\u00eate d'envoi de donn\u00e9es de mise \u00e0 jour DELETE Suppression de la ressource Code de r\u00e9ponses Le serveur WEB indique par le code de r\u00e9ponse l'\u00e9tat du traitement de la ressource. Le code de r\u00e9ponse est un nombre \u00e0 3 chiffres : le premier indiquant la classe de statut et les suivants la nature du statut. Code \u00c8tat de traitement de la ressource Description 10x Message d'information Non utilis\u00e9 dans la version 1.0 du protocole HTTP 20x R\u00e9ussite Ces codes indiquent le bon d\u00e9roulement de la requ\u00eate 200 OK La requ\u00eate a \u00e9t\u00e9 accomplie correctement 201 CREATED Elle suit une commande POST, elle indique la r\u00e9ussite, le corps du reste du document est sens\u00e9 indiquer l'URL \u00e0 laquelle le document nouvellement cr\u00e9\u00e9 devrait se trouver. 202 ACCEPTED La requ\u00eate a \u00e9t\u00e9 accept\u00e9e, mais la proc\u00e9dure qui suit n'a pas \u00e9t\u00e9 accomplie 203 PARTIAL INFORMATION Lorsque ce code est re\u00e7u en r\u00e9ponse \u00e0 une commande GET, cela indique que la r\u00e9ponse n'est pas compl\u00e8te. 204 NO RESPONSE Le serveur a re\u00e7u la requ\u00eate mais il n'y a pas d'information \u00e0 renvoyer 205 RESET CONTENT Le serveur indique au navigateur de supprimer le contenu des champs d'un formulaire 30x Redirection Ces codes indiquent que la ressource n'est plus \u00e0 l'emplacement indiqu\u00e9 301 MOVED Les donn\u00e9es demand\u00e9es ont \u00e9t\u00e9 transf\u00e9r\u00e9es \u00e0 une nouvelle adresse 302 FOUND Les donn\u00e9es demand\u00e9es sont \u00e0 une nouvelle URL, mais ont cependant peut-\u00eatre \u00e9t\u00e9 d\u00e9plac\u00e9es depuis... 303 METHOD Cela implique que le client doit essayer une nouvelle adresse, en essayant de pr\u00e9f\u00e9rence une autre m\u00e9thode que GET 40x Erreur due au client Ces codes indiquent que la requ\u00eate est incorrecte 400 BAD REQUEST La syntaxe de la requ\u00eate est mal formul\u00e9e ou est impossible \u00e0 satisfaire 401 UNAUTHORIZED Le param\u00e8tre du message donne les sp\u00e9cifications des formes d'autorisation acceptables. Le client doit reformuler sa requ\u00eate avec les bonnes donn\u00e9es d'autorisation 403 FORBIDDEN L'acc\u00e8s \u00e0 la ressource est tout simplement interdit 404 NOT FOUND Le serveur n'a rien trouv\u00e9 \u00e0 l'adresse sp\u00e9cifi\u00e9e. 50x Erreur due au serveur Ces codes indiquent qu'il y a eu une erreur interne du serveur 500 INTERNAL ERROR Le serveur a rencontr\u00e9 une condition inattendue qui l'a emp\u00each\u00e9 de donner suite \u00e0 la demande 501 NOT IMPLEMENTED Le serveur ne supporte pas le service demand\u00e9 503 SERVICE UNAVAILABLE Le serveur ne peut pas vous r\u00e9pondre \u00e0 l'instant pr\u00e9sent, car le trafic est trop dense 504 GATEWAY TIMEOUT La r\u00e9ponse du serveur a \u00e9t\u00e9 trop longue vis-\u00e0-vis du temps pendant lequel la passerelle \u00e9tait pr\u00e9par\u00e9e \u00e0 l'attendre Ressources [1] RFC 2616 - sp\u00e9cification du protocole HTTP/1.1 , Internet Engineering Task Force , https://www.ietf.org/rfc/rfc2616.txt [2] man page de Curl , Daniel Stenberg , https://curl.se/docs/manpage.html","title":"Protocole HTTP"},{"location":"premiere/bloc3/chapitre-04/#protocole-http","text":"Le protocole HTTP (HyperText Transfer Protocol) est le protocole le plus utilis\u00e9 sur Internet depuis 1990. Le protocole HTTPS est la combinaison du HTTP avec une couche de chiffrement comme SSL ou TLS. Le m\u00e9canisme est le m\u00eame que le protocole HTTP. L'aspect chiffrement fera l'objet d'un autre cours. Dans ce cours, on se limitera \u00e0 l'\u00e9tude du protocole HTTP. En premi\u00e8re, vous avez vu le protocole TCP/IP, qui a en charge de router les paquets dans un r\u00e9seau et d'en assurer le bon acheminement Le protocole HTTP est un protocole de plus haut niveau (Couche Application du mod\u00e8le OSI) et s'appuie sur le protocole TCP/IP (Couche Transport du mod\u00e8le OSI) Mod\u00e8le OSI Source : wikimedia","title":"Protocole HTTP"},{"location":"premiere/bloc3/chapitre-04/#contexte","text":"Le but du protocole HTTP est de permettre un transfert de fichiers (essentiellement au format HTML) localis\u00e9s gr\u00e2ce \u00e0 une cha\u00eene de caract\u00e8res appel\u00e9e URL entre un navigateur (le client) et un serveur Web. Source : commentcamarche.net Le navigateur effectue une requ\u00eate HTTP Le serveur traite la requ\u00eate puis envoie une r\u00e9ponse HTTP","title":"Contexte"},{"location":"premiere/bloc3/chapitre-04/#description","text":"","title":"Description"},{"location":"premiere/bloc3/chapitre-04/#requete","text":"Une requ\u00eate HTTP est un ensemble de lignes envoy\u00e9 au serveur par le navigateur. Elle comprend : Une ligne de requ\u00eate : c'est une ligne pr\u00e9cisant le type de document demand\u00e9, la m\u00e9thode qui doit \u00eatre appliqu\u00e9e, et la version du protocole utilis\u00e9e. La ligne comprend trois \u00e9l\u00e9ments devant \u00eatre s\u00e9par\u00e9s par un espace : La m\u00e9thode L'URL La version du protocole utilis\u00e9 par le client (g\u00e9n\u00e9ralement HTTP/1.0) Les champs d'en-t\u00eate de la requ\u00eate : il s'agit d'un ensemble de lignes facultatives permettant de donner des informations suppl\u00e9mentaires sur la requ\u00eate et/ou le client (Navigateur, syst\u00e8me d'exploitation, ...). Chacune de ces lignes est compos\u00e9e d'un nom qualifiant le type d'en-t\u00eate, suivi de deux points (:) et de la valeur de l'en-t\u00eate Le corps de la requ\u00eate : c'est un ensemble de lignes optionnelles devant \u00eatre s\u00e9par\u00e9es des lignes pr\u00e9c\u00e9dentes par une ligne vide et permettant par exemple un envoi de donn\u00e9es par une commande POST lors de l'envoi de donn\u00e9es au serveur par un formulaire Exemple de requ\u00eate HTTP : 1 2 3 GET https://Philippe-Boddaert.github.io HTTP/1.0 Accept : text/html User-Agent : Mozilla/4.0 (compatible; MSIE 5.0; Windows 95)","title":"Requ\u00eate"},{"location":"premiere/bloc3/chapitre-04/#reponse","text":"Une r\u00e9ponse HTTP est un ensemble de lignes envoy\u00e9es au navigateur par le serveur. Elle comprend : Une ligne de statut : c'est une ligne pr\u00e9cisant la version du protocole utilis\u00e9 et l'\u00e9tat du traitement de la requ\u00eate \u00e0 l'aide d'un code et d'un texte explicatif. La ligne comprend trois \u00e9l\u00e9ments devant \u00eatre s\u00e9par\u00e9s par un espace : La version du protocole utilis\u00e9 Le code de statut La signification du code Les champs d'en-t\u00eate de la r\u00e9ponse : il s'agit d'un ensemble de lignes facultatives permettant de donner des informations suppl\u00e9mentaires sur la r\u00e9ponse et/ou le serveur. Chacune de ces lignes est compos\u00e9e d'un nom qualifiant le type d'en-t\u00eate, suivi de deux points (:) et de la valeur de l'en-t\u00eate Le corps de la r\u00e9ponse : il contient le document demand\u00e9 Les navigateurs modernes permettent de visualiser les requ\u00eates et r\u00e9ponses HTTP qu'il g\u00e9n\u00e8re. Exemple de r\u00e9ponse HTTP : 1 2 3 4 5 HTTP / 1.0 200 OK Date : Sat, 15 Jan 2000 14:37:12 GMT Server : Microsoft-IIS/2.0 Content-Type : text/HTML Content-Length : 1245 Last-Modified : Fri, 14 Jan 2000 08:25:13 GMT","title":"R\u00e9ponse"},{"location":"premiere/bloc3/chapitre-04/#exercices-dapplication","text":"Travail 1 Ouvrir l'inspecteur Web de votre navigateur internet, et s\u00e9lectionner l'onglet R\u00e9seau. Saisir l'url de cette page de cours https://Philippe-Boddaert.github.io/premiere/bloc3/chapitre-04/hello.html Identifier les \u00e9l\u00e9ments de la requ\u00eate HTTP et classer les selon la d\u00e9finition ci-dessus Travail 2 Ouvrir l'inspecteur Web de votre navigateur internet, et s\u00e9lectionner l'onglet R\u00e9seau. Saisir l'url de cette page de cours https://Philippe-Boddaert.github.io/premiere/bloc3/chapitre-04/inconnu.html Identifier les \u00e9l\u00e9ments de la requ\u00eate HTTP et classer les selon la d\u00e9finition ci-dessus Quelles diff\u00e9rences constatez-vous dans la r\u00e9ponse HTTP avec elle du Travail 1 ? Les requ\u00eates et r\u00e9ponses HTTP sont g\u00e9n\u00e9r\u00e9es et interpr\u00e9t\u00e9es par le navigateur mais il est tout \u00e0 fait possible de g\u00e9n\u00e9rer celles-ci en dehors d'un navigateur !! Pour cela, nous allons utiliser l'outil curl , une interface en ligne de commandes destin\u00e9e \u00e0 r\u00e9cup\u00e9rer le contenu de ressource accessible par un r\u00e9seau. Travail 3 Ouvrir une invite de commandes et saisir la commande suivante : 1 $ curl -v https://Philippe-Boddaert.github.io/premiere/bloc3/chapitre-04/hello.html Comparer le r\u00e9sultat obtenu avec le travail 1 Copier le contenu de la r\u00e9ponse dans un fichier .html et ouvrer le avec un navigateur web. Que constatez-vous ? Travail 4 Ouvrir une invite de commandes et saisir la commande suivante : 1 $ curl -v https://Philippe-Boddaert.github.io/premiere/bloc3/chapitre-04/inconnu.html Comparer le r\u00e9sultat obtenu avec le travail 2.","title":"Exercices d'application"},{"location":"premiere/bloc3/chapitre-04/#complements","text":"","title":"Compl\u00e9ments"},{"location":"premiere/bloc3/chapitre-04/#methodes-de-requete","text":"Le protocole HTTP est un protocole de haut niveau et permet d'int\u00e9ragir avec des ressources en sp\u00e9cifiant au serveur l'action que l'on souhaite r\u00e9aliser. Pour une m\u00eame URL, Il est possible de sp\u00e9cifier la m\u00e9thode , i.e l'action \u00e0 r\u00e9aliser : M\u00e9thode Description GET Requ\u00eate de r\u00e9cup\u00e9ration de la ressource POST Requ\u00eate d'envoi de donn\u00e9es PUT Requ\u00eate d'envoi de donn\u00e9es de mise \u00e0 jour DELETE Suppression de la ressource","title":"M\u00e9thodes de Requ\u00eate"},{"location":"premiere/bloc3/chapitre-04/#code-de-reponses","text":"Le serveur WEB indique par le code de r\u00e9ponse l'\u00e9tat du traitement de la ressource. Le code de r\u00e9ponse est un nombre \u00e0 3 chiffres : le premier indiquant la classe de statut et les suivants la nature du statut. Code \u00c8tat de traitement de la ressource Description 10x Message d'information Non utilis\u00e9 dans la version 1.0 du protocole HTTP 20x R\u00e9ussite Ces codes indiquent le bon d\u00e9roulement de la requ\u00eate 200 OK La requ\u00eate a \u00e9t\u00e9 accomplie correctement 201 CREATED Elle suit une commande POST, elle indique la r\u00e9ussite, le corps du reste du document est sens\u00e9 indiquer l'URL \u00e0 laquelle le document nouvellement cr\u00e9\u00e9 devrait se trouver. 202 ACCEPTED La requ\u00eate a \u00e9t\u00e9 accept\u00e9e, mais la proc\u00e9dure qui suit n'a pas \u00e9t\u00e9 accomplie 203 PARTIAL INFORMATION Lorsque ce code est re\u00e7u en r\u00e9ponse \u00e0 une commande GET, cela indique que la r\u00e9ponse n'est pas compl\u00e8te. 204 NO RESPONSE Le serveur a re\u00e7u la requ\u00eate mais il n'y a pas d'information \u00e0 renvoyer 205 RESET CONTENT Le serveur indique au navigateur de supprimer le contenu des champs d'un formulaire 30x Redirection Ces codes indiquent que la ressource n'est plus \u00e0 l'emplacement indiqu\u00e9 301 MOVED Les donn\u00e9es demand\u00e9es ont \u00e9t\u00e9 transf\u00e9r\u00e9es \u00e0 une nouvelle adresse 302 FOUND Les donn\u00e9es demand\u00e9es sont \u00e0 une nouvelle URL, mais ont cependant peut-\u00eatre \u00e9t\u00e9 d\u00e9plac\u00e9es depuis... 303 METHOD Cela implique que le client doit essayer une nouvelle adresse, en essayant de pr\u00e9f\u00e9rence une autre m\u00e9thode que GET 40x Erreur due au client Ces codes indiquent que la requ\u00eate est incorrecte 400 BAD REQUEST La syntaxe de la requ\u00eate est mal formul\u00e9e ou est impossible \u00e0 satisfaire 401 UNAUTHORIZED Le param\u00e8tre du message donne les sp\u00e9cifications des formes d'autorisation acceptables. Le client doit reformuler sa requ\u00eate avec les bonnes donn\u00e9es d'autorisation 403 FORBIDDEN L'acc\u00e8s \u00e0 la ressource est tout simplement interdit 404 NOT FOUND Le serveur n'a rien trouv\u00e9 \u00e0 l'adresse sp\u00e9cifi\u00e9e. 50x Erreur due au serveur Ces codes indiquent qu'il y a eu une erreur interne du serveur 500 INTERNAL ERROR Le serveur a rencontr\u00e9 une condition inattendue qui l'a emp\u00each\u00e9 de donner suite \u00e0 la demande 501 NOT IMPLEMENTED Le serveur ne supporte pas le service demand\u00e9 503 SERVICE UNAVAILABLE Le serveur ne peut pas vous r\u00e9pondre \u00e0 l'instant pr\u00e9sent, car le trafic est trop dense 504 GATEWAY TIMEOUT La r\u00e9ponse du serveur a \u00e9t\u00e9 trop longue vis-\u00e0-vis du temps pendant lequel la passerelle \u00e9tait pr\u00e9par\u00e9e \u00e0 l'attendre","title":"Code de r\u00e9ponses"},{"location":"premiere/bloc3/chapitre-04/#ressources","text":"[1] RFC 2616 - sp\u00e9cification du protocole HTTP/1.1 , Internet Engineering Task Force , https://www.ietf.org/rfc/rfc2616.txt [2] man page de Curl , Daniel Stenberg , https://curl.se/docs/manpage.html","title":"Ressources"},{"location":"premiere/bloc4/","text":"Sommaire Bloc 4 - Architectures mat\u00e9rielles et syst\u00e8mes d'exploitation ENIAC (Electronic Numerical Integrator And Computer) Source : U.S Army Photo Pr\u00e9ambule Organisation Le bloc se d\u00e9compose en 3 chapitres : Chapitre 1 : Mod\u00e8le d'architecture d'une machine Chapitre 2 : Syst\u00e8mes d'exploitation Chapitre 3 : Interface Homme / Machine Programme Officiel Contenus Capacit\u00e9s attendues Mod\u00e8le d\u2019architecture s\u00e9quentielle (von Neumann) Distinguer les r\u00f4les et les caract\u00e9ristiques des diff\u00e9rents constituants d\u2019une machine. D\u00e9rouler l\u2019ex\u00e9cution d\u2019une s\u00e9quence d\u2019instructions simples du type langage machine. Syst\u00e8mes d\u2019exploitation Identifier les fonctions d\u2019un syst\u00e8me d\u2019exploitation. Utiliser les commandes de base en ligne de commande. G\u00e9rer les droits et permissions d\u2019acc\u00e8s aux fichiers. P\u00e9riph\u00e9riques d\u2019entr\u00e9e et de sortie Interface Homme / Machine (IHM) Identifier le r\u00f4le des capteurs et actionneurs. R\u00e9aliser par programmation une IHM r\u00e9pondant \u00e0 un cahier des charges donn\u00e9.","title":"Sommaire"},{"location":"premiere/bloc4/#sommaire","text":"","title":"Sommaire"},{"location":"premiere/bloc4/#bloc-4-architectures-materielles-et-systemes-dexploitation","text":"ENIAC (Electronic Numerical Integrator And Computer) Source : U.S Army Photo","title":"Bloc 4 - Architectures mat\u00e9rielles et syst\u00e8mes d'exploitation"},{"location":"premiere/bloc4/#preambule","text":"","title":"Pr\u00e9ambule"},{"location":"premiere/bloc4/#organisation","text":"Le bloc se d\u00e9compose en 3 chapitres : Chapitre 1 : Mod\u00e8le d'architecture d'une machine Chapitre 2 : Syst\u00e8mes d'exploitation Chapitre 3 : Interface Homme / Machine","title":"Organisation"},{"location":"premiere/bloc4/#programme-officiel","text":"Contenus Capacit\u00e9s attendues Mod\u00e8le d\u2019architecture s\u00e9quentielle (von Neumann) Distinguer les r\u00f4les et les caract\u00e9ristiques des diff\u00e9rents constituants d\u2019une machine. D\u00e9rouler l\u2019ex\u00e9cution d\u2019une s\u00e9quence d\u2019instructions simples du type langage machine. Syst\u00e8mes d\u2019exploitation Identifier les fonctions d\u2019un syst\u00e8me d\u2019exploitation. Utiliser les commandes de base en ligne de commande. G\u00e9rer les droits et permissions d\u2019acc\u00e8s aux fichiers. P\u00e9riph\u00e9riques d\u2019entr\u00e9e et de sortie Interface Homme / Machine (IHM) Identifier le r\u00f4le des capteurs et actionneurs. R\u00e9aliser par programmation une IHM r\u00e9pondant \u00e0 un cahier des charges donn\u00e9.","title":"Programme Officiel"},{"location":"premiere/bloc4/chapitre-01/COURS/","text":"Ressources [1] - Le mod\u00e8le d\u2019architecture de von Neumann, Interstices.info, 18/11/2011, https://interstices.info/le-modele-darchitecture-de-von-neumann/","title":"COURS"},{"location":"premiere/bloc4/chapitre-01/COURS/#ressources","text":"[1] - Le mod\u00e8le d\u2019architecture de von Neumann, Interstices.info, 18/11/2011, https://interstices.info/le-modele-darchitecture-de-von-neumann/","title":"Ressources"},{"location":"premiere/bloc5/","text":"Sommaire Bloc 5 - Langages et Programmation 1 2 3 4 >>> def main (): print ( \"Hello World !!!\" ) >>> main () Hello World !!! Pr\u00e9ambule Organisation Le bloc se d\u00e9compose en 2 chapitres : Chapitre 1 : Les variables Chapitre 2 : Les op\u00e9rateurs Chapitre 3 : Les fonctions Chapitre 4 : Les structures conditionnelles Chapitre 5 : Les structures it\u00e9ratives Chapitre 6 : Les modules Programme Officiel Contenus Capacit\u00e9s attendues Constructions \u00e9l\u00e9mentaires Mettre en \u00e9vidence un corpus de constructions \u00e9l\u00e9mentaires. Diversit\u00e9 et unit\u00e9 des langages de programmation Rep\u00e9rer, dans un nouveau langage de programmation, les traits communs et les traits particuliers \u00e0 ce langage. Sp\u00e9cification Prototyper une fonction. D\u00e9crire les pr\u00e9conditions sur les arguments. D\u00e9crire des postconditions sur les r\u00e9sultats. Mise au point de programmes Utiliser des jeux de tests. Utilisation de biblioth\u00e8ques Utiliser la documentation d\u2019une biblioth\u00e8que.","title":"Sommaire"},{"location":"premiere/bloc5/#sommaire","text":"","title":"Sommaire"},{"location":"premiere/bloc5/#bloc-5-langages-et-programmation","text":"1 2 3 4 >>> def main (): print ( \"Hello World !!!\" ) >>> main () Hello World !!!","title":"Bloc 5 - Langages et Programmation"},{"location":"premiere/bloc5/#preambule","text":"","title":"Pr\u00e9ambule"},{"location":"premiere/bloc5/#organisation","text":"Le bloc se d\u00e9compose en 2 chapitres : Chapitre 1 : Les variables Chapitre 2 : Les op\u00e9rateurs Chapitre 3 : Les fonctions Chapitre 4 : Les structures conditionnelles Chapitre 5 : Les structures it\u00e9ratives Chapitre 6 : Les modules","title":"Organisation"},{"location":"premiere/bloc5/#programme-officiel","text":"Contenus Capacit\u00e9s attendues Constructions \u00e9l\u00e9mentaires Mettre en \u00e9vidence un corpus de constructions \u00e9l\u00e9mentaires. Diversit\u00e9 et unit\u00e9 des langages de programmation Rep\u00e9rer, dans un nouveau langage de programmation, les traits communs et les traits particuliers \u00e0 ce langage. Sp\u00e9cification Prototyper une fonction. D\u00e9crire les pr\u00e9conditions sur les arguments. D\u00e9crire des postconditions sur les r\u00e9sultats. Mise au point de programmes Utiliser des jeux de tests. Utilisation de biblioth\u00e8ques Utiliser la documentation d\u2019une biblioth\u00e8que.","title":"Programme Officiel"},{"location":"premiere/bloc5/chapitre-01/","text":"Les Variables","title":"Les Variables"},{"location":"premiere/bloc5/chapitre-01/#les-variables","text":"","title":"Les Variables"},{"location":"premiere/bloc5/chapitre-02/","text":"Structures conditionnelles","title":"Structures conditionnelles"},{"location":"premiere/bloc5/chapitre-02/#structures-conditionnelles","text":"","title":"Structures conditionnelles"},{"location":"premiere/bloc5/chapitre-03/","text":"Fonction","title":"Fonction"},{"location":"premiere/bloc5/chapitre-03/#fonction","text":"","title":"Fonction"},{"location":"premiere/bloc5/chapitre-04/","text":"Structures it\u00e9ratives","title":"Structures it\u00e9ratives"},{"location":"premiere/bloc5/chapitre-04/#structures-iteratives","text":"","title":"Structures it\u00e9ratives"},{"location":"premiere/bloc5/chapitre-07/","text":"Pygame Pr\u00e9ambule Cette activit\u00e9 a pour but d'apprendre \u00e0 utiliser le module pygame. Il nous sera possible de cr\u00e9er des interfaces graphiques (affichage de formes, gestion des entr\u00e9es clavier, souris...) D\u00e9finition Pygame est un module pour Python pour le contr\u00f4ler les fen\u00eatres, vid\u00e9os et sons. Ce module fournit des m\u00e9thodes pour faciliter la cr\u00e9ation d'application multim\u00e9dias, qui s'ex\u00e9cuteront sans modification sur toutes les plateformes (windows, Linux, Mac...) La documentation officielle est disponible \u00e0 cette url : https://www.pygame.org/docs/ Installation Comme tout module python, Pygame doit \u00eatre install\u00e9 par l'interm\u00e9diaire de pip. 1 $ python3 -m pip install pygame == 1 .9.6 Importer Pour utiliser le module, il faut l'importer dans un script .py. 1 2 import pygame pygame . init () La fonction pygame.init() doit \u00eatre appel\u00e9e pour que tous les modules import\u00e9s dans pygame soient correctement initialis\u00e9s. Si nous oublions cela, certains modules ne fonctionneront pas. Exercice 1 - Une fen\u00eatre blanche Pour comprendre les m\u00e9canismes du module, copiez le code suivant dans un script .py et ex\u00e9cutez le. 1 2 3 4 5 6 7 8 import pygame pygame . init () screen = pygame . display . set_mode (( 720 , 480 )) while True : screen . fill (( 255 , 255 , 255 )) pygame . display . update () La ligne 4 permet de cr\u00e9er et afficher une fen\u00eatre au dimension (largeur, hauteur) La ligne 7 permet de mettre la couleur de fond \u00e0 blanc. Question 1 Commenter la ligne 6 et ex\u00e9cuter le code. Que constatez-vous ? Question 2 D\u00e9commenter le ligne 6 et commenter la ligne 8 et ex\u00e9cuter le code. Que constatez-vous ? On d\u00e9duit que : une fen\u00eatre g\u00e9r\u00e9e par Pygame reste affich\u00e9e le temps de l'ex\u00e9cution du script. Il est donc n\u00e9cessaire de mettre en place une boucle while . le remplissage de la fen\u00eatre n'est visible \u00e0 l'\u00e9cran qu'apr\u00e8s l'appel \u00e0 la m\u00e9thode pygame.display.update . Question 3 En regardant la documentation de pygame, modifiez le script pour afficher la fen\u00eatre en plein \u00e9cran avec un fond de couleur jaune. Exercice 2 - Un segment vert, un carr\u00e9 bleu, un cercle rouge Copiez le code suivant dans un script .py et ex\u00e9cutez le. 1 2 3 4 5 6 7 8 9 10 import pygame pygame . init () screen = pygame . display . set_mode (( 720 , 480 )) rectangle = pygame . Rect (( 360 , 240 ), ( 32 , 32 )) while True : screen . fill (( 255 , 255 , 255 )) pygame . draw . rect ( screen , ( 0 , 0 , 255 ), rectangle ) pygame . display . update () La ligne 5 permet de cr\u00e9er un rectangle de dimension (largeur, hauteur), positionn\u00e9e aux coordonn\u00e9es (x, y). La ligne 9 permet d'afficher le carr\u00e9 en rouge \u00e0 la position d\u00e9finie dans la fen\u00eatre. Question 1 Placez l'instruction de la ligne 9 avant la ligne 8 et ex\u00e9cutez le code. Que constatez-vous ? L'ordre d'affichage d\u00e9pend de l'ordre de leur manipulation. Question 2 En regardant la documentation de pygame, modifiez le script pour afficher un segment bleu qui passe par les points de coordonn\u00e9es (32,32) et (100, 50) et de largeur 5. Question 3 Modifiez le script pour afficher un cercle rouge de rayon 16 dont le centre est au centre de la fen\u00eatre. Exercice 3 - Les \u00e9v\u00e9nements Copiez le code suivant dans un script .py et ex\u00e9cutez le. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import pygame pygame . init () screen = pygame . display . set_mode (( 720 , 480 )) rectangle = pygame . Rect (( 360 , 240 ), ( 32 , 32 )) COLORS = (( 255 , 0 , 0 ), ( 0 , 255 , 0 ), ( 0 , 0 , 255 )) color = 0 while True : for event in pygame . event . get (): if event . type == pygame . MOUSEBUTTONDOWN : color = ( color + 1 ) % len ( COLORS ) elif event . type == pygame . KEYDOWN : if event . key == pygame . K_ESCAPE : quit () elif event . key == pygame . K_RIGHT : rectangle . move_ip (( 10 , 0 )) screen . fill (( 255 , 255 , 255 )) pygame . draw . rect ( screen , COLORS [ color ], rectangle ) pygame . display . update () Question 1 Cliquez sur le bouton gauche de votre souris, que constatez-vous ? Question 2 Appuyez plusieurs fois sur la fl\u00e8che \u2192 , que constatez-vous ? Question 3 Appuyez sur la touche Esc, que constatez-vous ? On d\u00e9duit qu'il est possible de capturer les saisies du clavier, ou de la souris et d'y associer des actions. Question 4 En regardant la documentation de pygame, modifiez le script pour d\u00e9placer le carr\u00e9 selon les directions \u2190, \u2191 et \u2193. Question 5 En regardant la documentation de pygame, modifiez le script pour r\u00e9duire la taille du carr\u00e9 sur la touche \\(-\\) du pav\u00e9 num\u00e9rique et agrandir la taille du carr\u00e9 sur un la touche \\(+\\) du pav\u00e9 num\u00e9rique. Question 6 En regardant la documentation de pygame, modifiez le script pour que le carr\u00e9 rouge suive les d\u00e9placements de la souris. Exercice 4 - Les collisions Copiez le code suivant dans un script .py et ex\u00e9cutez le. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import pygame pygame . init () screen = pygame . display . set_mode (( 720 , 480 )) rectangle = pygame . Rect (( 360 , 240 ), ( 32 , 32 )) ground = pygame . Rect (( 0 , 460 ), ( 720 , 20 )) COLORS = (( 255 , 0 , 0 ), ( 0 , 255 , 0 ), ( 0 , 0 , 255 )) color = 0 while True : for event in pygame . event . get (): if event . type == pygame . KEYDOWN : if event . key == pygame . K_ESCAPE : quit () elif event . key == pygame . K_RIGHT : rectangle . move_ip (( 10 , 0 )) elif event . key == pygame . K_LEFT : rectangle . move_ip (( - 10 , 0 )) elif event . key == pygame . K_UP : rectangle . move_ip (( 0 , - 10 )) elif event . key == pygame . K_DOWN : rectangle . move_ip (( 0 , 10 )) color = 1 if rectangle . colliderect ( ground ) else 0 screen . fill (( 255 , 255 , 255 )) pygame . draw . rect ( screen , COLORS [ color ], rectangle ) pygame . draw . rect ( screen , COLORS [ 1 ], ground ) pygame . display . update () Question 1 Appuyez plusieurs fois sur la fl\u00e8che \u2193, que constatez-vous lorsque le rectangle touche la barre verte ? Question 2 En consultant la documentation de pygame, modifiez le script pr\u00e9c\u00e9dent pour qu'un cercle rouge suive le mouvement de la souris et que le carr\u00e9 change de couleur lorsque vous passez la souris au-dessus de sa position (Cf vid\u00e9o ci-dessous) R\u00e9sultat attendu pour la question 2 (Source : exercice-4-2.mp4 ) Question 3 En consultant la documentation de pygame, modifiez le script de la question 2 pour qu'\u00e0 chaque fois que la souris passe au-dessus du carr\u00e9, le compteur de collision est mise \u00e0 jour R\u00e9sultat attendu pour la question 3 (Source : exercice-4-3.mp4 )","title":"Pygame"},{"location":"premiere/bloc5/chapitre-07/#pygame","text":"","title":"Pygame"},{"location":"premiere/bloc5/chapitre-07/#preambule","text":"Cette activit\u00e9 a pour but d'apprendre \u00e0 utiliser le module pygame. Il nous sera possible de cr\u00e9er des interfaces graphiques (affichage de formes, gestion des entr\u00e9es clavier, souris...)","title":"Pr\u00e9ambule"},{"location":"premiere/bloc5/chapitre-07/#definition","text":"Pygame est un module pour Python pour le contr\u00f4ler les fen\u00eatres, vid\u00e9os et sons. Ce module fournit des m\u00e9thodes pour faciliter la cr\u00e9ation d'application multim\u00e9dias, qui s'ex\u00e9cuteront sans modification sur toutes les plateformes (windows, Linux, Mac...) La documentation officielle est disponible \u00e0 cette url : https://www.pygame.org/docs/","title":"D\u00e9finition"},{"location":"premiere/bloc5/chapitre-07/#installation","text":"Comme tout module python, Pygame doit \u00eatre install\u00e9 par l'interm\u00e9diaire de pip. 1 $ python3 -m pip install pygame == 1 .9.6","title":"Installation"},{"location":"premiere/bloc5/chapitre-07/#importer","text":"Pour utiliser le module, il faut l'importer dans un script .py. 1 2 import pygame pygame . init () La fonction pygame.init() doit \u00eatre appel\u00e9e pour que tous les modules import\u00e9s dans pygame soient correctement initialis\u00e9s. Si nous oublions cela, certains modules ne fonctionneront pas.","title":"Importer"},{"location":"premiere/bloc5/chapitre-07/#exercice-1-une-fenetre-blanche","text":"Pour comprendre les m\u00e9canismes du module, copiez le code suivant dans un script .py et ex\u00e9cutez le. 1 2 3 4 5 6 7 8 import pygame pygame . init () screen = pygame . display . set_mode (( 720 , 480 )) while True : screen . fill (( 255 , 255 , 255 )) pygame . display . update () La ligne 4 permet de cr\u00e9er et afficher une fen\u00eatre au dimension (largeur, hauteur) La ligne 7 permet de mettre la couleur de fond \u00e0 blanc. Question 1 Commenter la ligne 6 et ex\u00e9cuter le code. Que constatez-vous ? Question 2 D\u00e9commenter le ligne 6 et commenter la ligne 8 et ex\u00e9cuter le code. Que constatez-vous ? On d\u00e9duit que : une fen\u00eatre g\u00e9r\u00e9e par Pygame reste affich\u00e9e le temps de l'ex\u00e9cution du script. Il est donc n\u00e9cessaire de mettre en place une boucle while . le remplissage de la fen\u00eatre n'est visible \u00e0 l'\u00e9cran qu'apr\u00e8s l'appel \u00e0 la m\u00e9thode pygame.display.update . Question 3 En regardant la documentation de pygame, modifiez le script pour afficher la fen\u00eatre en plein \u00e9cran avec un fond de couleur jaune.","title":"Exercice 1 - Une fen\u00eatre blanche"},{"location":"premiere/bloc5/chapitre-07/#exercice-2-un-segment-vert-un-carre-bleu-un-cercle-rouge","text":"Copiez le code suivant dans un script .py et ex\u00e9cutez le. 1 2 3 4 5 6 7 8 9 10 import pygame pygame . init () screen = pygame . display . set_mode (( 720 , 480 )) rectangle = pygame . Rect (( 360 , 240 ), ( 32 , 32 )) while True : screen . fill (( 255 , 255 , 255 )) pygame . draw . rect ( screen , ( 0 , 0 , 255 ), rectangle ) pygame . display . update () La ligne 5 permet de cr\u00e9er un rectangle de dimension (largeur, hauteur), positionn\u00e9e aux coordonn\u00e9es (x, y). La ligne 9 permet d'afficher le carr\u00e9 en rouge \u00e0 la position d\u00e9finie dans la fen\u00eatre. Question 1 Placez l'instruction de la ligne 9 avant la ligne 8 et ex\u00e9cutez le code. Que constatez-vous ? L'ordre d'affichage d\u00e9pend de l'ordre de leur manipulation. Question 2 En regardant la documentation de pygame, modifiez le script pour afficher un segment bleu qui passe par les points de coordonn\u00e9es (32,32) et (100, 50) et de largeur 5. Question 3 Modifiez le script pour afficher un cercle rouge de rayon 16 dont le centre est au centre de la fen\u00eatre.","title":"Exercice 2 - Un segment vert, un carr\u00e9 bleu, un cercle rouge"},{"location":"premiere/bloc5/chapitre-07/#exercice-3-les-evenements","text":"Copiez le code suivant dans un script .py et ex\u00e9cutez le. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import pygame pygame . init () screen = pygame . display . set_mode (( 720 , 480 )) rectangle = pygame . Rect (( 360 , 240 ), ( 32 , 32 )) COLORS = (( 255 , 0 , 0 ), ( 0 , 255 , 0 ), ( 0 , 0 , 255 )) color = 0 while True : for event in pygame . event . get (): if event . type == pygame . MOUSEBUTTONDOWN : color = ( color + 1 ) % len ( COLORS ) elif event . type == pygame . KEYDOWN : if event . key == pygame . K_ESCAPE : quit () elif event . key == pygame . K_RIGHT : rectangle . move_ip (( 10 , 0 )) screen . fill (( 255 , 255 , 255 )) pygame . draw . rect ( screen , COLORS [ color ], rectangle ) pygame . display . update () Question 1 Cliquez sur le bouton gauche de votre souris, que constatez-vous ? Question 2 Appuyez plusieurs fois sur la fl\u00e8che \u2192 , que constatez-vous ? Question 3 Appuyez sur la touche Esc, que constatez-vous ? On d\u00e9duit qu'il est possible de capturer les saisies du clavier, ou de la souris et d'y associer des actions. Question 4 En regardant la documentation de pygame, modifiez le script pour d\u00e9placer le carr\u00e9 selon les directions \u2190, \u2191 et \u2193. Question 5 En regardant la documentation de pygame, modifiez le script pour r\u00e9duire la taille du carr\u00e9 sur la touche \\(-\\) du pav\u00e9 num\u00e9rique et agrandir la taille du carr\u00e9 sur un la touche \\(+\\) du pav\u00e9 num\u00e9rique. Question 6 En regardant la documentation de pygame, modifiez le script pour que le carr\u00e9 rouge suive les d\u00e9placements de la souris.","title":"Exercice 3 - Les \u00e9v\u00e9nements"},{"location":"premiere/bloc5/chapitre-07/#exercice-4-les-collisions","text":"Copiez le code suivant dans un script .py et ex\u00e9cutez le. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import pygame pygame . init () screen = pygame . display . set_mode (( 720 , 480 )) rectangle = pygame . Rect (( 360 , 240 ), ( 32 , 32 )) ground = pygame . Rect (( 0 , 460 ), ( 720 , 20 )) COLORS = (( 255 , 0 , 0 ), ( 0 , 255 , 0 ), ( 0 , 0 , 255 )) color = 0 while True : for event in pygame . event . get (): if event . type == pygame . KEYDOWN : if event . key == pygame . K_ESCAPE : quit () elif event . key == pygame . K_RIGHT : rectangle . move_ip (( 10 , 0 )) elif event . key == pygame . K_LEFT : rectangle . move_ip (( - 10 , 0 )) elif event . key == pygame . K_UP : rectangle . move_ip (( 0 , - 10 )) elif event . key == pygame . K_DOWN : rectangle . move_ip (( 0 , 10 )) color = 1 if rectangle . colliderect ( ground ) else 0 screen . fill (( 255 , 255 , 255 )) pygame . draw . rect ( screen , COLORS [ color ], rectangle ) pygame . draw . rect ( screen , COLORS [ 1 ], ground ) pygame . display . update () Question 1 Appuyez plusieurs fois sur la fl\u00e8che \u2193, que constatez-vous lorsque le rectangle touche la barre verte ? Question 2 En consultant la documentation de pygame, modifiez le script pr\u00e9c\u00e9dent pour qu'un cercle rouge suive le mouvement de la souris et que le carr\u00e9 change de couleur lorsque vous passez la souris au-dessus de sa position (Cf vid\u00e9o ci-dessous) R\u00e9sultat attendu pour la question 2 (Source : exercice-4-2.mp4 ) Question 3 En consultant la documentation de pygame, modifiez le script de la question 2 pour qu'\u00e0 chaque fois que la souris passe au-dessus du carr\u00e9, le compteur de collision est mise \u00e0 jour R\u00e9sultat attendu pour la question 3 (Source : exercice-4-3.mp4 )","title":"Exercice 4 - Les collisions"},{"location":"premiere/bloc6/","text":"Sommaire Bloc 6 - Algorithmique Source : iconspng.com Pr\u00e9ambule Organisation Le bloc se d\u00e9compose en 2 chapitres : Chapitre 1 : L'algorithmique Chapitre 2 : Preuve de programme Chapitre 3 : Les tris Chapitre 4 : Les k plus proches voisins Chapitre 5 : La recherche dichotomique Chapitre 6 : La strat\u00e9gie gloutonne Programme Officiel Contenus Capacit\u00e9s attendues Parcours s\u00e9quentiel d\u2019un tableau \u00c9crire un algorithme de recherche d\u2019une occurrence sur des valeurs de type quelconque. \u00c9crire un algorithme de recherche d\u2019un extremum, de calcul d\u2019une moyenne. Tris par insertion, par s\u00e9lection \u00c9crire un algorithme de tri. D\u00e9crire un invariant de boucle qui prouve la correction des tris par insertion, par s\u00e9lection. Algorithme des k plus proches voisins \u00c9crire un algorithme qui pr\u00e9dit la classe d\u2019un \u00e9l\u00e9ment en fonction de la classe majoritaire de ses k plus proches voisins. Recherche dichotomique dans un tableau tri\u00e9 Montrer la terminaison de la recherche dichotomique \u00e0 l\u2019aide d\u2019un variant de boucle. Algorithmes gloutons R\u00e9soudre un probl\u00e8me gr\u00e2ce \u00e0 un algorithme glouton.","title":"Sommaire"},{"location":"premiere/bloc6/#sommaire","text":"","title":"Sommaire"},{"location":"premiere/bloc6/#bloc-6-algorithmique","text":"Source : iconspng.com","title":"Bloc 6 - Algorithmique"},{"location":"premiere/bloc6/#preambule","text":"","title":"Pr\u00e9ambule"},{"location":"premiere/bloc6/#organisation","text":"Le bloc se d\u00e9compose en 2 chapitres : Chapitre 1 : L'algorithmique Chapitre 2 : Preuve de programme Chapitre 3 : Les tris Chapitre 4 : Les k plus proches voisins Chapitre 5 : La recherche dichotomique Chapitre 6 : La strat\u00e9gie gloutonne","title":"Organisation"},{"location":"premiere/bloc6/#programme-officiel","text":"Contenus Capacit\u00e9s attendues Parcours s\u00e9quentiel d\u2019un tableau \u00c9crire un algorithme de recherche d\u2019une occurrence sur des valeurs de type quelconque. \u00c9crire un algorithme de recherche d\u2019un extremum, de calcul d\u2019une moyenne. Tris par insertion, par s\u00e9lection \u00c9crire un algorithme de tri. D\u00e9crire un invariant de boucle qui prouve la correction des tris par insertion, par s\u00e9lection. Algorithme des k plus proches voisins \u00c9crire un algorithme qui pr\u00e9dit la classe d\u2019un \u00e9l\u00e9ment en fonction de la classe majoritaire de ses k plus proches voisins. Recherche dichotomique dans un tableau tri\u00e9 Montrer la terminaison de la recherche dichotomique \u00e0 l\u2019aide d\u2019un variant de boucle. Algorithmes gloutons R\u00e9soudre un probl\u00e8me gr\u00e2ce \u00e0 un algorithme glouton.","title":"Programme Officiel"},{"location":"premiere/bloc6/chapitre-02/","text":"Preuve de programme Contexte Ex\u00e9cuter l'algorithme sur quelques cas ne permet pas de valider qu'il effectue correctement ce qui est attendu de lui. Il faut donc pouvoir utiliser un syst\u00e8me de preuve de programme. 1 2 3 4 5 6 7 8 9 Algorithme gonflerBallon ( ballon ) Entr\u00e9e : ballon Sortie : & Oslash ; Effet de bord : A la fin de l '&#39;' algorithme , le ballon est gonfl\u00e9 . D\u00e9but Tant que ballon non gonfl\u00e9 faire soufflerDans ( ballon ) FinTantQue Fin Important Face \u00e0 un algorithme, il faut se poser et r\u00e9pondre \u00e0 3 questions : Est-ce-que l'algorithme s'arr\u00eate ? Est-ce-que le r\u00e9sultat obtenu est conforme au r\u00e9sultat attendu ? Est-ce-qu\u2019il donne le r\u00e9sultat en un temps raisonnable ? Terminaison D\u00e9finition Un algorithme termine si l'ensemble de ses instructions terminent. Question Est-ce que l'algorithme suivant termine ? 1 2 3 4 5 6 7 Algorithme fois2 ( x ) Entr\u00e9e : x , entier Sortie : entier , correspondant \u00e0 2 * x D\u00e9but resultat & larr ; 2 * x Renvoyer resultat Fin R\u00e9ponse Le nombre d\u2019instructions \u00e0 effectuer est connu \u00e0 l\u2019avance. L'algorithme est compos\u00e9 de 3 op\u00e9rations \u00e9l\u00e9mentaires (*, \u2190 et un renvoi) qui terminent. Important Un algorithme (ou un bloc d'instructions) s\u00e9quentiel compos\u00e9 d'op\u00e9rations \u00e9l\u00e9mentaires termine. Question Est-ce que l'algorithme suivant termine ? R\u00e9ponse L'algorithme n'est compos\u00e9 que d'op\u00e9rations \u00e9l\u00e9mentaires qui terminent. Question Est-ce que l'algorithme suivant termine ? R\u00e9ponse Il y a une boucle, mais le nombre de passages dans la boucle est connu a priori. Donc l\u2019algorithme se termine toujours. Comment d\u00e9terminer qu'un algorithme termine ? On peut voir, par le biais des exemples ci-dessus, qu'en lisant la suite des instructions, nous avons l'intuition que les algorithmes terminent. Pour des algorithmes avec plus d'instructions, il nous faut un moyen formel de prouver la terminaison d'un algorithme. Th\u00e9or\u00e8me Toute suite d\u2019entiers naturels strictement d\u00e9croissante est finie. 3\u00e8me axiome fondamental de l'arithm\u00e9tique Ce th\u00e9or\u00e8me indique qu'il n\u2019existe pas de suite infinie d'entiers naturels strictement d\u00e9croissante. Pour prouver la terminaison d'un algorithme, il suffit de trouver un entier naturel strictement d\u00e9croissant pendant l'ex\u00e9cution de l'algorithme . Cet entier est appel\u00e9 variant de boucle . Pour identifier si une boucle se termine effectivement, il faut : identifier le variant de boucle et v\u00e9rifier qu\u2019il est positif, v\u00e9rifier qu\u2019il d\u00e9cro\u00eet effectivement et strictement \u00e0 chaque it\u00e9ration, Si c'est le cas, la boucle se termine, en vertu du 3\u00e8me axiome fondamental de l'arithm\u00e9tique. Dans le cas contraire, la boucle est infinie. Probl\u00e8me de la terminaison Question Existe-t-il un algorithme qui permet de dire si un algorithme termine ? R\u00e9ponse Alan Turing en 1936 a prouv\u00e9 que le probl\u00e8me de l'arr\u00eat est ind\u00e9cidable , c'est-\u00e0-dire qu'il n'existe pas de programme informatique qui prend comme entr\u00e9e une description d'un programme informatique avec toutes ses entr\u00e9es et qui, gr\u00e2ce \u00e0 la seule analyse de ce code, r\u00e9pond VRAI si le programme s'arr\u00eate sur son param\u00e8tre et FAUX sinon. Nous reviendrons sur la notion d'ind\u00e9cidabilit\u00e9 en Terminale. Correction Complexit\u00e9 Source : Pixabay.com Question Combien de temps prend un algorithme pour s'ex\u00e9cuter ? Quelle quantit\u00e9 de m\u00e9moire utilise-t-il au cours de son ex\u00e9cution ? La notion de complexit\u00e9 d'un algorithme va permettre de r\u00e9pondre \u00e0 ces 2 questions. D\u00e9finition D\u00e9finition La complexit\u00e9 d'un algorithme est une mesure d'efficacit\u00e9 (temporelle et spatiale) qui permet de comparer des algorithmes solutionnant le m\u00eame probl\u00e8me. On dira qu'un algorithme \\(A\\) est plus efficace en temps qu'un algorithme \\(B\\) , si sa complexit\u00e9 en temps est moindre que celui de l'algorithme \\(B\\) . Comment calculer la complexit\u00e9 ? Une mesure naturelle de la complexit\u00e9 d'un algorithme serait d'ex\u00e9cuter l'algorithme et calculer le temps d'ex\u00e9cution r\u00e9el. Il s'agit d'une tr\u00e8s mauvaise mesure. En effet, elle d\u00e9pend de beaucoup de param\u00e8tres : le compilateur, le langage de programmation, la machine,... C'est pourquoi la mesure de complexit\u00e9 utilis\u00e9e est le nombre d'op\u00e9rations de l'algorithme. Cette mesure a l'avantage d'\u00eatre ind\u00e9pendante de la machine et du langage, et d'\u00eatre \u00e9valuable sur le papier. Travail Soit un tableau \\(T\\) un tableau d'entiers et \\(x\\) , un entier. Ci dessous, l'algorithme est_present qui d\u00e9termine si \\(x\\) est pr\u00e9sent dans \\(T\\) . Calculer le nombre d'op\u00e9rations execut\u00e9es par cet algorithme. Analyse On se rend compte que le nombre d'op\u00e9rations d\u00e9pend : du nombre d'op\u00e9rations de l'algorithme Taille , des diff\u00e9rents cas renvoy\u00e9s par l'algorithme, de la taille du tableau \\(T\\) Cas 1 Cas 1 : \\(x\\) n'est pas pr\u00e9sent dans \\(T\\) Le nombre total d'op\u00e9rations \\(C_n = 1 + 1 + 3 \\times n + 1 = 3n + 3\\) Cas 2 Cas 2 : \\(x\\) est pr\u00e9sent dans \\(T\\) Le nombre total d'op\u00e9rations \\(C_n = 1 + 1 + 3 \\times n + 1 + 1 = 3n + 4\\) , ce, quelque ce soit la position de \\(x\\) dans \\(T\\) Nous venons de voir que la complexit\u00e9 d\u00e9pend de la taille du tableau \\(T\\) , plus le tableau est grand et plus le nombre d'op\u00e9rations \u00e0 effectuer est important. Pour effectuer des comparaisons entre plusieurs algorithmes, nous allons raisonner sur des tableaux de grande taille, car plus les tableaux sont grands et plus les diff\u00e9rences entre les algorithmes seront flagrantes. Pour comparer des algorithmes, nous allons donc uniquement nous int\u00e9resser \u00e0 ce que l'on appelle \"l'ordre de grandeur asymptotique\" Ordre de grandeur asymptotique C'est une \u00e9chelle de r\u00e9f\u00e9rence, qui consid\u00e8re les cas o\u00f9 l'ensemble des donn\u00e9es en jeu est tr\u00e8s grand. On note cet ordre de grandeur avec un \\(\\mathcal{O}\\) majuscule (Notation de Landau) En reprenant l'exemple de l'algorithme est_present , le nombre de comparaisons calcul\u00e9 est \\(3n + 4\\) . Ce qui correspond \u00e0 un ordre de grandeur asymptotique en \\(\\mathcal{O}(n)\\) Pour obtenir l'ordre de grandeur \u00e0 partir d'un polynome : Supprimer les constantes Garder uniquement le \\(n\\) qui poss\u00e8de l'exposant le plus grand Supprimer le coefficient devant le \\(n\\) Exemples : \\[ \\begin{align} 3n + 4 \\Rightarrow & {\\color{red}\\cancel{3}} n + {\\color{red}\\cancel{4}} \\Rightarrow \\mathcal{O}(n) \\\\ 6n^2 + 3n + 5 \\Rightarrow & {\\color{red}\\cancel{6}} n^2 + {\\color{red}\\cancel{3n}} + {\\color{red}\\cancel{5}} \\Rightarrow \\mathcal{O}(n^2) \\end{align} \\] Travail \u00c9crire une version de l'algorithme est_present avec une boucle while , qui permet de d\u00e9terminer si \\(x\\) est pr\u00e9sent dans le tableau \\(T\\) et renvoyer cette information d\u00e8s que l'algorithme trouve sa pr\u00e9sence. D\u00e9terminer la complexit\u00e9 de cet algorithme dans le meilleur et le pire des cas. Solution Calcul de la complexit\u00e9 Exercice Travail \u00c9crire un algorithme permettant de trouver le plus grand entier pr\u00e9sent dans un tableau. Vous ferez \"tourner \u00e0 la main\" votre algorithme en utilisant le tableau \\(T = [3,5,1,8,4,2]\\) . D\u00e9terminer la complexit\u00e9 de cet algorithme. Solution Calcul de la complexit\u00e9 Annexe - Comparatif des complexit\u00e9s Voici un tableau dans lequel le temps de calcul de diff\u00e9rentes complexit\u00e9s algorithmiques est pr\u00e9sent\u00e9, en fonction de la taille des donn\u00e9es. \\(n = 1\\) \\(n = 10\\) \\(n = 100\\) \\(n = 1000\\) \\(n = 1000000\\) \\(\\mathcal{O}(1)\\) 1 \u00b5s 1 \u00b5s 1 \u00b5s 1 \u00b5s 1 \u00b5s \\(\\mathcal{O}(\\log{}n)\\) 1 \u00b5s 4 \u00b5s 7 \u00b5s 10 \u00b5s 20 \u00b5s \\(\\mathcal{O}(n)\\) 1 \u00b5s 10 \u00b5s 100 \u00b5s 10 ms 1 s \\(\\mathcal{O}(n\\log{}n)\\) 1 \u00b5s 4 \u00b5s 700 \u00b5s 10 ms 20 s \\(\\mathcal{O}(n^2)\\) 1 \u00b5s 100 \u00b5s 10 ms 1 s 11.57 jours \\(\\mathcal{O}(n^3)\\) 1 \u00b5s 1 ms 1 s 16.67 min 31709 ans \\(\\mathcal{O}(2^n)\\) 2 \u00b5s 1.024 ms 401969368413314 si\u00e8cles - - \\(\\mathcal{O}(n!)\\) 1 \u00b5s 3.62 s 2.9e+142 si\u00e8cles - -","title":"Preuve de programme"},{"location":"premiere/bloc6/chapitre-02/#preuve-de-programme","text":"","title":"Preuve de programme"},{"location":"premiere/bloc6/chapitre-02/#contexte","text":"Ex\u00e9cuter l'algorithme sur quelques cas ne permet pas de valider qu'il effectue correctement ce qui est attendu de lui. Il faut donc pouvoir utiliser un syst\u00e8me de preuve de programme. 1 2 3 4 5 6 7 8 9 Algorithme gonflerBallon ( ballon ) Entr\u00e9e : ballon Sortie : & Oslash ; Effet de bord : A la fin de l '&#39;' algorithme , le ballon est gonfl\u00e9 . D\u00e9but Tant que ballon non gonfl\u00e9 faire soufflerDans ( ballon ) FinTantQue Fin Important Face \u00e0 un algorithme, il faut se poser et r\u00e9pondre \u00e0 3 questions : Est-ce-que l'algorithme s'arr\u00eate ? Est-ce-que le r\u00e9sultat obtenu est conforme au r\u00e9sultat attendu ? Est-ce-qu\u2019il donne le r\u00e9sultat en un temps raisonnable ?","title":"Contexte"},{"location":"premiere/bloc6/chapitre-02/#terminaison","text":"D\u00e9finition Un algorithme termine si l'ensemble de ses instructions terminent. Question Est-ce que l'algorithme suivant termine ? 1 2 3 4 5 6 7 Algorithme fois2 ( x ) Entr\u00e9e : x , entier Sortie : entier , correspondant \u00e0 2 * x D\u00e9but resultat & larr ; 2 * x Renvoyer resultat Fin R\u00e9ponse Le nombre d\u2019instructions \u00e0 effectuer est connu \u00e0 l\u2019avance. L'algorithme est compos\u00e9 de 3 op\u00e9rations \u00e9l\u00e9mentaires (*, \u2190 et un renvoi) qui terminent. Important Un algorithme (ou un bloc d'instructions) s\u00e9quentiel compos\u00e9 d'op\u00e9rations \u00e9l\u00e9mentaires termine. Question Est-ce que l'algorithme suivant termine ? R\u00e9ponse L'algorithme n'est compos\u00e9 que d'op\u00e9rations \u00e9l\u00e9mentaires qui terminent. Question Est-ce que l'algorithme suivant termine ? R\u00e9ponse Il y a une boucle, mais le nombre de passages dans la boucle est connu a priori. Donc l\u2019algorithme se termine toujours.","title":"Terminaison"},{"location":"premiere/bloc6/chapitre-02/#comment-determiner-quun-algorithme-termine","text":"On peut voir, par le biais des exemples ci-dessus, qu'en lisant la suite des instructions, nous avons l'intuition que les algorithmes terminent. Pour des algorithmes avec plus d'instructions, il nous faut un moyen formel de prouver la terminaison d'un algorithme. Th\u00e9or\u00e8me Toute suite d\u2019entiers naturels strictement d\u00e9croissante est finie. 3\u00e8me axiome fondamental de l'arithm\u00e9tique Ce th\u00e9or\u00e8me indique qu'il n\u2019existe pas de suite infinie d'entiers naturels strictement d\u00e9croissante. Pour prouver la terminaison d'un algorithme, il suffit de trouver un entier naturel strictement d\u00e9croissant pendant l'ex\u00e9cution de l'algorithme . Cet entier est appel\u00e9 variant de boucle . Pour identifier si une boucle se termine effectivement, il faut : identifier le variant de boucle et v\u00e9rifier qu\u2019il est positif, v\u00e9rifier qu\u2019il d\u00e9cro\u00eet effectivement et strictement \u00e0 chaque it\u00e9ration, Si c'est le cas, la boucle se termine, en vertu du 3\u00e8me axiome fondamental de l'arithm\u00e9tique. Dans le cas contraire, la boucle est infinie.","title":"Comment d\u00e9terminer qu'un algorithme termine ?"},{"location":"premiere/bloc6/chapitre-02/#probleme-de-la-terminaison","text":"Question Existe-t-il un algorithme qui permet de dire si un algorithme termine ? R\u00e9ponse Alan Turing en 1936 a prouv\u00e9 que le probl\u00e8me de l'arr\u00eat est ind\u00e9cidable , c'est-\u00e0-dire qu'il n'existe pas de programme informatique qui prend comme entr\u00e9e une description d'un programme informatique avec toutes ses entr\u00e9es et qui, gr\u00e2ce \u00e0 la seule analyse de ce code, r\u00e9pond VRAI si le programme s'arr\u00eate sur son param\u00e8tre et FAUX sinon. Nous reviendrons sur la notion d'ind\u00e9cidabilit\u00e9 en Terminale.","title":"Probl\u00e8me de la terminaison"},{"location":"premiere/bloc6/chapitre-02/#correction","text":"","title":"Correction"},{"location":"premiere/bloc6/chapitre-02/#complexite","text":"Source : Pixabay.com Question Combien de temps prend un algorithme pour s'ex\u00e9cuter ? Quelle quantit\u00e9 de m\u00e9moire utilise-t-il au cours de son ex\u00e9cution ? La notion de complexit\u00e9 d'un algorithme va permettre de r\u00e9pondre \u00e0 ces 2 questions.","title":"Complexit\u00e9"},{"location":"premiere/bloc6/chapitre-02/#definition","text":"D\u00e9finition La complexit\u00e9 d'un algorithme est une mesure d'efficacit\u00e9 (temporelle et spatiale) qui permet de comparer des algorithmes solutionnant le m\u00eame probl\u00e8me. On dira qu'un algorithme \\(A\\) est plus efficace en temps qu'un algorithme \\(B\\) , si sa complexit\u00e9 en temps est moindre que celui de l'algorithme \\(B\\) .","title":"D\u00e9finition"},{"location":"premiere/bloc6/chapitre-02/#comment-calculer-la-complexite","text":"Une mesure naturelle de la complexit\u00e9 d'un algorithme serait d'ex\u00e9cuter l'algorithme et calculer le temps d'ex\u00e9cution r\u00e9el. Il s'agit d'une tr\u00e8s mauvaise mesure. En effet, elle d\u00e9pend de beaucoup de param\u00e8tres : le compilateur, le langage de programmation, la machine,... C'est pourquoi la mesure de complexit\u00e9 utilis\u00e9e est le nombre d'op\u00e9rations de l'algorithme. Cette mesure a l'avantage d'\u00eatre ind\u00e9pendante de la machine et du langage, et d'\u00eatre \u00e9valuable sur le papier. Travail Soit un tableau \\(T\\) un tableau d'entiers et \\(x\\) , un entier. Ci dessous, l'algorithme est_present qui d\u00e9termine si \\(x\\) est pr\u00e9sent dans \\(T\\) . Calculer le nombre d'op\u00e9rations execut\u00e9es par cet algorithme. Analyse On se rend compte que le nombre d'op\u00e9rations d\u00e9pend : du nombre d'op\u00e9rations de l'algorithme Taille , des diff\u00e9rents cas renvoy\u00e9s par l'algorithme, de la taille du tableau \\(T\\) Cas 1 Cas 1 : \\(x\\) n'est pas pr\u00e9sent dans \\(T\\) Le nombre total d'op\u00e9rations \\(C_n = 1 + 1 + 3 \\times n + 1 = 3n + 3\\) Cas 2 Cas 2 : \\(x\\) est pr\u00e9sent dans \\(T\\) Le nombre total d'op\u00e9rations \\(C_n = 1 + 1 + 3 \\times n + 1 + 1 = 3n + 4\\) , ce, quelque ce soit la position de \\(x\\) dans \\(T\\) Nous venons de voir que la complexit\u00e9 d\u00e9pend de la taille du tableau \\(T\\) , plus le tableau est grand et plus le nombre d'op\u00e9rations \u00e0 effectuer est important. Pour effectuer des comparaisons entre plusieurs algorithmes, nous allons raisonner sur des tableaux de grande taille, car plus les tableaux sont grands et plus les diff\u00e9rences entre les algorithmes seront flagrantes. Pour comparer des algorithmes, nous allons donc uniquement nous int\u00e9resser \u00e0 ce que l'on appelle \"l'ordre de grandeur asymptotique\"","title":"Comment calculer la complexit\u00e9 ?"},{"location":"premiere/bloc6/chapitre-02/#ordre-de-grandeur-asymptotique","text":"C'est une \u00e9chelle de r\u00e9f\u00e9rence, qui consid\u00e8re les cas o\u00f9 l'ensemble des donn\u00e9es en jeu est tr\u00e8s grand. On note cet ordre de grandeur avec un \\(\\mathcal{O}\\) majuscule (Notation de Landau) En reprenant l'exemple de l'algorithme est_present , le nombre de comparaisons calcul\u00e9 est \\(3n + 4\\) . Ce qui correspond \u00e0 un ordre de grandeur asymptotique en \\(\\mathcal{O}(n)\\) Pour obtenir l'ordre de grandeur \u00e0 partir d'un polynome : Supprimer les constantes Garder uniquement le \\(n\\) qui poss\u00e8de l'exposant le plus grand Supprimer le coefficient devant le \\(n\\) Exemples : \\[ \\begin{align} 3n + 4 \\Rightarrow & {\\color{red}\\cancel{3}} n + {\\color{red}\\cancel{4}} \\Rightarrow \\mathcal{O}(n) \\\\ 6n^2 + 3n + 5 \\Rightarrow & {\\color{red}\\cancel{6}} n^2 + {\\color{red}\\cancel{3n}} + {\\color{red}\\cancel{5}} \\Rightarrow \\mathcal{O}(n^2) \\end{align} \\] Travail \u00c9crire une version de l'algorithme est_present avec une boucle while , qui permet de d\u00e9terminer si \\(x\\) est pr\u00e9sent dans le tableau \\(T\\) et renvoyer cette information d\u00e8s que l'algorithme trouve sa pr\u00e9sence. D\u00e9terminer la complexit\u00e9 de cet algorithme dans le meilleur et le pire des cas. Solution Calcul de la complexit\u00e9","title":"Ordre de grandeur asymptotique"},{"location":"premiere/bloc6/chapitre-02/#annexe-comparatif-des-complexites","text":"Voici un tableau dans lequel le temps de calcul de diff\u00e9rentes complexit\u00e9s algorithmiques est pr\u00e9sent\u00e9, en fonction de la taille des donn\u00e9es. \\(n = 1\\) \\(n = 10\\) \\(n = 100\\) \\(n = 1000\\) \\(n = 1000000\\) \\(\\mathcal{O}(1)\\) 1 \u00b5s 1 \u00b5s 1 \u00b5s 1 \u00b5s 1 \u00b5s \\(\\mathcal{O}(\\log{}n)\\) 1 \u00b5s 4 \u00b5s 7 \u00b5s 10 \u00b5s 20 \u00b5s \\(\\mathcal{O}(n)\\) 1 \u00b5s 10 \u00b5s 100 \u00b5s 10 ms 1 s \\(\\mathcal{O}(n\\log{}n)\\) 1 \u00b5s 4 \u00b5s 700 \u00b5s 10 ms 20 s \\(\\mathcal{O}(n^2)\\) 1 \u00b5s 100 \u00b5s 10 ms 1 s 11.57 jours \\(\\mathcal{O}(n^3)\\) 1 \u00b5s 1 ms 1 s 16.67 min 31709 ans \\(\\mathcal{O}(2^n)\\) 2 \u00b5s 1.024 ms 401969368413314 si\u00e8cles - - \\(\\mathcal{O}(n!)\\) 1 \u00b5s 3.62 s 2.9e+142 si\u00e8cles - -","title":"Annexe - Comparatif des complexit\u00e9s"},{"location":"premiere/bloc6/chapitre-03/","text":"Les tris Contexte Les algorithmes de tri des \u00e9l\u00e9ments d'un ensemble ont une place \u00e0 part en algorithmique. En effet, ils sont souvent utilis\u00e9s pour mettre en \u00e9vidence certains concepts algorithmiques (concepts que l'on retrouve dans d'autres types d'algorithmes). L'\u00e9tude des algorithmes de tri permet de mettre en \u00e9vidence : Qu'un m\u00eame probl\u00e8me accepte plusieurs solutions, Pour qu'une solution soit valide, il faut prouver qu'elle est correcte. En cela, nous aborderons la notion de preuve de programme , Que les solutions sont comparables, i.e l'une est \"meilleure\" qu'une autre dans certaines conditions, gr\u00e2ce \u00e0 une notion essentielle : la complexit\u00e9 . Nous allons commencer par 2 algorithmes \"classiques\" : le tri par insertion et le tri par s\u00e9lection. Ressources [1] - Comparateur de tris [2] - Les algorithmes de tri, Interstices.info, Site Interstices.info [3] - Visualiser les tris par la danse, Chaine AlgoRythmics, Youtube","title":"Les tris"},{"location":"premiere/bloc6/chapitre-03/#les-tris","text":"","title":"Les tris"},{"location":"premiere/bloc6/chapitre-03/#contexte","text":"Les algorithmes de tri des \u00e9l\u00e9ments d'un ensemble ont une place \u00e0 part en algorithmique. En effet, ils sont souvent utilis\u00e9s pour mettre en \u00e9vidence certains concepts algorithmiques (concepts que l'on retrouve dans d'autres types d'algorithmes). L'\u00e9tude des algorithmes de tri permet de mettre en \u00e9vidence : Qu'un m\u00eame probl\u00e8me accepte plusieurs solutions, Pour qu'une solution soit valide, il faut prouver qu'elle est correcte. En cela, nous aborderons la notion de preuve de programme , Que les solutions sont comparables, i.e l'une est \"meilleure\" qu'une autre dans certaines conditions, gr\u00e2ce \u00e0 une notion essentielle : la complexit\u00e9 . Nous allons commencer par 2 algorithmes \"classiques\" : le tri par insertion et le tri par s\u00e9lection.","title":"Contexte"},{"location":"premiere/bloc6/chapitre-03/#ressources","text":"[1] - Comparateur de tris [2] - Les algorithmes de tri, Interstices.info, Site Interstices.info [3] - Visualiser les tris par la danse, Chaine AlgoRythmics, Youtube","title":"Ressources"},{"location":"premiere/bloc6/chapitre-03/AUTRE/","text":"Autres tris Tri \u00e0 bulle Principe Quand on consid\u00e8re une collection \\(l\\) de \\(n\\) \u00e9l\u00e9ments, non tri\u00e9e : Si on compare r\u00e9p\u00e9titivement les \u00e9l\u00e9ments cons\u00e9cutifs de \\(l\\) , En les permutant lorsqu'ils sont mal tri\u00e9s, A la fin du processus, l'\u00e9l\u00e9ment en derni\u00e8re position est celui ayant la valeur maximale de \\(l\\) . Illustration Travail En fonction du principe \u00e9nonc\u00e9 ci-dessus, \u00e9crire l'algorithme de tri par insertion. Complexit\u00e9 Tri rapide Principe Quand on consid\u00e8re une collection \\(l\\) de \\(n\\) \u00e9l\u00e9ments, non tri\u00e9e : Si on partitionne \\(l\\) en fonction d'un pivot (le premier \u00e9l\u00e9ment par exemple), En pla\u00e7ant le pivot \u00e0 la \"bonne\" place, Il ne reste qu'\u00e0 trier r\u00e9cursivement chaque collection \u00e0 la gauche et \u00e0 la droite du pivot. La \"bonne\" place du pivot est l'indice \\(j\\) o\u00f9 : tous les \u00e9l\u00e9ments de \\(l[0:j]\\) sont \\(\\lt\\) au pivot, tous les \u00e9l\u00e9ments de \\(l[j + 1:i - 1]\\) sont \\(\\gt\\) au pivot. Illustration Travail En fonction du principe \u00e9nonc\u00e9 ci-dessus, \u00e9crire l'algorithme de tri par insertion. Complexit\u00e9","title":"Autres tris"},{"location":"premiere/bloc6/chapitre-03/AUTRE/#autres-tris","text":"","title":"Autres tris"},{"location":"premiere/bloc6/chapitre-03/AUTRE/#tri-a-bulle","text":"","title":"Tri \u00e0 bulle"},{"location":"premiere/bloc6/chapitre-03/AUTRE/#principe","text":"Quand on consid\u00e8re une collection \\(l\\) de \\(n\\) \u00e9l\u00e9ments, non tri\u00e9e : Si on compare r\u00e9p\u00e9titivement les \u00e9l\u00e9ments cons\u00e9cutifs de \\(l\\) , En les permutant lorsqu'ils sont mal tri\u00e9s, A la fin du processus, l'\u00e9l\u00e9ment en derni\u00e8re position est celui ayant la valeur maximale de \\(l\\) .","title":"Principe"},{"location":"premiere/bloc6/chapitre-03/AUTRE/#illustration","text":"Travail En fonction du principe \u00e9nonc\u00e9 ci-dessus, \u00e9crire l'algorithme de tri par insertion.","title":"Illustration"},{"location":"premiere/bloc6/chapitre-03/AUTRE/#complexite","text":"","title":"Complexit\u00e9"},{"location":"premiere/bloc6/chapitre-03/AUTRE/#tri-rapide","text":"","title":"Tri rapide"},{"location":"premiere/bloc6/chapitre-03/AUTRE/#principe_1","text":"Quand on consid\u00e8re une collection \\(l\\) de \\(n\\) \u00e9l\u00e9ments, non tri\u00e9e : Si on partitionne \\(l\\) en fonction d'un pivot (le premier \u00e9l\u00e9ment par exemple), En pla\u00e7ant le pivot \u00e0 la \"bonne\" place, Il ne reste qu'\u00e0 trier r\u00e9cursivement chaque collection \u00e0 la gauche et \u00e0 la droite du pivot. La \"bonne\" place du pivot est l'indice \\(j\\) o\u00f9 : tous les \u00e9l\u00e9ments de \\(l[0:j]\\) sont \\(\\lt\\) au pivot, tous les \u00e9l\u00e9ments de \\(l[j + 1:i - 1]\\) sont \\(\\gt\\) au pivot.","title":"Principe"},{"location":"premiere/bloc6/chapitre-03/AUTRE/#illustration_1","text":"Travail En fonction du principe \u00e9nonc\u00e9 ci-dessus, \u00e9crire l'algorithme de tri par insertion.","title":"Illustration"},{"location":"premiere/bloc6/chapitre-03/AUTRE/#complexite_1","text":"","title":"Complexit\u00e9"},{"location":"premiere/bloc6/chapitre-03/INSERTION/","text":"Tri par Insertion Source : Pixabay Le tri par insertion est le tri le plus connu. C'est celui que nous utilisons intuitivement quand nous devont trier une liste d'objets, par exemple quand nous jouons aux cartes. Principe Quand on consid\u00e8re une collection \\(l\\) de \\(n\\) \u00e9l\u00e9ments, dont les \\(i - 1\\) premiers sont tri\u00e9s. Placer le \\(i^{\u00e8me}\\) \u00e9l\u00e9ment, consiste \u00e0 le d\u00e9placer dans la sous-collection tri\u00e9e jusqu'\u00e0 sa \"bonne\" place. La \"bonne\" place est l'indice \\(j\\) o\u00f9 : tous les \u00e9l\u00e9ments de \\(l[0:j]\\) sont \\(\\lt\\) \u00e0 l'\u00e9l\u00e9ment \\(i\\) et, tous les \u00e9l\u00e9ments de \\(l[j + 1:i - 1]\\) sont \\(\\gt\\) \u00e0 l'\u00e9l\u00e9ment \\(i\\) . Illustration Travail En fonction du principe \u00e9nonc\u00e9 ci-dessus, \u00e9crire l'algorithme de tri par insertion. Terminaison Travail Est-ce que l'algorithme suivant termine ? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Algorithme : \"Tri par insertion\" Entr\u00e9e : l : une collection de n \u00e9l\u00e9ments Sortie : Aucune Effet de bord : l est tri\u00e9e D\u00e9but Pour i de 1 \u00e0 n - 1 # m\u00e9moriser l'\u00e9l\u00e9ment en cours element \u2190 l [ i ] # d\u00e9caler vers la droite les \u00e9l\u00e9ments de l[0]..l[i-1] # qui sont plus grands que element en partant de l[i-1] j \u2190 i Tant que j > 0 et l [ j - 1 ] > element l [ j ] \u2190 l [ j - 1 ] j \u2190 j - 1 FinTantQue # placer element dans le \"trou\" laiss\u00e9 par le d\u00e9calage l [ j ] \u2190 element FinPour Fin Preuve L'algorithme \"Tri par insertion\" contient une boucle Tant que, il s\u2019agit donc de v\u00e9rifier qu\u2019elle se termine. La variable \\(j\\) d\u00e9marre de \\(i\\) et diminue d\u2019une unit\u00e9 \u00e0 chaque it\u00e9ration. En \\(n - 1\\) it\u00e9rations, \\(j\\) prendra la valeur 0, ce qui permet (si ce n\u2019est pas encore fait) de sortir de la boucle. \\(j\\) est un variant de boucle, i.e une quantit\u00e9 : enti\u00e8re, positive, strictement d\u00e9croissante. En conclusion, l'algorithme \"Tri par insertion\" se termine. Correction Complexit\u00e9 Travail Y-a-t-il un meilleur des cas ? pire des cas ? Exprimer la complexit\u00e9, en fonction de la taille de la collection et du nombre de comparaisons. Exprimer la complexit\u00e9, en fonction de la taille de la collection et du nombre d'\u00e9changes.","title":"Tri par Insertion"},{"location":"premiere/bloc6/chapitre-03/INSERTION/#tri-par-insertion","text":"Source : Pixabay Le tri par insertion est le tri le plus connu. C'est celui que nous utilisons intuitivement quand nous devont trier une liste d'objets, par exemple quand nous jouons aux cartes.","title":"Tri par Insertion"},{"location":"premiere/bloc6/chapitre-03/INSERTION/#principe","text":"Quand on consid\u00e8re une collection \\(l\\) de \\(n\\) \u00e9l\u00e9ments, dont les \\(i - 1\\) premiers sont tri\u00e9s. Placer le \\(i^{\u00e8me}\\) \u00e9l\u00e9ment, consiste \u00e0 le d\u00e9placer dans la sous-collection tri\u00e9e jusqu'\u00e0 sa \"bonne\" place. La \"bonne\" place est l'indice \\(j\\) o\u00f9 : tous les \u00e9l\u00e9ments de \\(l[0:j]\\) sont \\(\\lt\\) \u00e0 l'\u00e9l\u00e9ment \\(i\\) et, tous les \u00e9l\u00e9ments de \\(l[j + 1:i - 1]\\) sont \\(\\gt\\) \u00e0 l'\u00e9l\u00e9ment \\(i\\) .","title":"Principe"},{"location":"premiere/bloc6/chapitre-03/INSERTION/#illustration","text":"Travail En fonction du principe \u00e9nonc\u00e9 ci-dessus, \u00e9crire l'algorithme de tri par insertion.","title":"Illustration"},{"location":"premiere/bloc6/chapitre-03/INSERTION/#terminaison","text":"Travail Est-ce que l'algorithme suivant termine ? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Algorithme : \"Tri par insertion\" Entr\u00e9e : l : une collection de n \u00e9l\u00e9ments Sortie : Aucune Effet de bord : l est tri\u00e9e D\u00e9but Pour i de 1 \u00e0 n - 1 # m\u00e9moriser l'\u00e9l\u00e9ment en cours element \u2190 l [ i ] # d\u00e9caler vers la droite les \u00e9l\u00e9ments de l[0]..l[i-1] # qui sont plus grands que element en partant de l[i-1] j \u2190 i Tant que j > 0 et l [ j - 1 ] > element l [ j ] \u2190 l [ j - 1 ] j \u2190 j - 1 FinTantQue # placer element dans le \"trou\" laiss\u00e9 par le d\u00e9calage l [ j ] \u2190 element FinPour Fin","title":"Terminaison"},{"location":"premiere/bloc6/chapitre-03/INSERTION/#preuve","text":"L'algorithme \"Tri par insertion\" contient une boucle Tant que, il s\u2019agit donc de v\u00e9rifier qu\u2019elle se termine. La variable \\(j\\) d\u00e9marre de \\(i\\) et diminue d\u2019une unit\u00e9 \u00e0 chaque it\u00e9ration. En \\(n - 1\\) it\u00e9rations, \\(j\\) prendra la valeur 0, ce qui permet (si ce n\u2019est pas encore fait) de sortir de la boucle. \\(j\\) est un variant de boucle, i.e une quantit\u00e9 : enti\u00e8re, positive, strictement d\u00e9croissante. En conclusion, l'algorithme \"Tri par insertion\" se termine.","title":"Preuve"},{"location":"premiere/bloc6/chapitre-03/INSERTION/#correction","text":"","title":"Correction"},{"location":"premiere/bloc6/chapitre-03/INSERTION/#complexite","text":"Travail Y-a-t-il un meilleur des cas ? pire des cas ? Exprimer la complexit\u00e9, en fonction de la taille de la collection et du nombre de comparaisons. Exprimer la complexit\u00e9, en fonction de la taille de la collection et du nombre d'\u00e9changes.","title":"Complexit\u00e9"},{"location":"premiere/bloc6/chapitre-03/SELECTION/","text":"Tri par S\u00e9lection Source : Needpix Principe Quand on consid\u00e8re une collection \\(l\\) de \\(n\\) \u00e9l\u00e9ments, tri\u00e9e dans l'ordre croissant : Celui \u00e0 l'indice 0 est le minimum des \\(n\\) \u00e9l\u00e9ments, i.e \\(l[0:n-1]\\) , Celui \u00e0 l'indice 1 est le minimum des \\(n - 1\\) \u00e9l\u00e9ments suivants, i.e \\(l[1:n-1]\\) , Celui \u00e0 l'indice 2, le minimum des \\(n - 2\\) suivants, i.e \\(l[2:n-1]\\) , etc... Illustration Travail En fonction du principe \u00e9nonc\u00e9 ci-dessus, \u00e9crire l'algorithme de tri par s\u00e9lection. Terminaison Travail Est-ce que l'algorithme suivant termine ? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Algorithme : \"Tri par s\u00e9lection\" Entr\u00e9e : l : une collection de n \u00e9l\u00e9ments Sortie : Aucune Effet de bord : l est tri\u00e9e D\u00e9but Pour i de 0 \u00e0 n - 1 # d\u00e9finir le premier \u00e9l\u00e9ment comme minimum minimum \u2190 l [ i ] Pour j de i \u00e0 n - 1 Si l [ j ] < l [ i ] alors minimum \u2190 l [ j ] Finsi FinPour # placer element minimum l [ i ] \u2190 minimum FinPour Fin Preuve L'algorithme \"Tri par s\u00e9lection\" contient deux boucles, il s\u2019agit donc de v\u00e9rifier qu\u2019elles se terminent. \\(n - 1 - i\\) est un variant pour la \\(1^{i\u00e8re}\\) boucle. \\(n - 1 - j\\) est un variant pour la \\(2^{i\u00e8me}\\) boucle. Ce sont 2 variants de boucle, i.e une quantit\u00e9 : enti\u00e8re, positive, strictement d\u00e9croissante. En conclusion, l'algorithme \"Tri par s\u00e9lection\" se termine. Correction Complexit\u00e9 Travail Y-a-t-il un meilleur des cas ? pire des cas ? Exprimer la complexit\u00e9, en fonction de la taille de la collection et du nombre de comparaisons. Exprimer la complexit\u00e9, en fonction de la taille de la collection et du nombre d'\u00e9changes.","title":"Tri par S\u00e9lection"},{"location":"premiere/bloc6/chapitre-03/SELECTION/#tri-par-selection","text":"Source : Needpix","title":"Tri par S\u00e9lection"},{"location":"premiere/bloc6/chapitre-03/SELECTION/#principe","text":"Quand on consid\u00e8re une collection \\(l\\) de \\(n\\) \u00e9l\u00e9ments, tri\u00e9e dans l'ordre croissant : Celui \u00e0 l'indice 0 est le minimum des \\(n\\) \u00e9l\u00e9ments, i.e \\(l[0:n-1]\\) , Celui \u00e0 l'indice 1 est le minimum des \\(n - 1\\) \u00e9l\u00e9ments suivants, i.e \\(l[1:n-1]\\) , Celui \u00e0 l'indice 2, le minimum des \\(n - 2\\) suivants, i.e \\(l[2:n-1]\\) , etc...","title":"Principe"},{"location":"premiere/bloc6/chapitre-03/SELECTION/#illustration","text":"Travail En fonction du principe \u00e9nonc\u00e9 ci-dessus, \u00e9crire l'algorithme de tri par s\u00e9lection.","title":"Illustration"},{"location":"premiere/bloc6/chapitre-03/SELECTION/#terminaison","text":"Travail Est-ce que l'algorithme suivant termine ? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Algorithme : \"Tri par s\u00e9lection\" Entr\u00e9e : l : une collection de n \u00e9l\u00e9ments Sortie : Aucune Effet de bord : l est tri\u00e9e D\u00e9but Pour i de 0 \u00e0 n - 1 # d\u00e9finir le premier \u00e9l\u00e9ment comme minimum minimum \u2190 l [ i ] Pour j de i \u00e0 n - 1 Si l [ j ] < l [ i ] alors minimum \u2190 l [ j ] Finsi FinPour # placer element minimum l [ i ] \u2190 minimum FinPour Fin","title":"Terminaison"},{"location":"premiere/bloc6/chapitre-03/SELECTION/#preuve","text":"L'algorithme \"Tri par s\u00e9lection\" contient deux boucles, il s\u2019agit donc de v\u00e9rifier qu\u2019elles se terminent. \\(n - 1 - i\\) est un variant pour la \\(1^{i\u00e8re}\\) boucle. \\(n - 1 - j\\) est un variant pour la \\(2^{i\u00e8me}\\) boucle. Ce sont 2 variants de boucle, i.e une quantit\u00e9 : enti\u00e8re, positive, strictement d\u00e9croissante. En conclusion, l'algorithme \"Tri par s\u00e9lection\" se termine.","title":"Preuve"},{"location":"premiere/bloc6/chapitre-03/SELECTION/#correction","text":"","title":"Correction"},{"location":"premiere/bloc6/chapitre-03/SELECTION/#complexite","text":"Travail Y-a-t-il un meilleur des cas ? pire des cas ? Exprimer la complexit\u00e9, en fonction de la taille de la collection et du nombre de comparaisons. Exprimer la complexit\u00e9, en fonction de la taille de la collection et du nombre d'\u00e9changes.","title":"Complexit\u00e9"},{"location":"premiere/bloc6/chapitre-04/","text":"Cours Algorithme des k plus proches voisins Avant-propos Cet algorithme a \u00e9t\u00e9 introduit en 1951 par Fix et Hodges dans un rapport de la facult\u00e9 de m\u00e9decine a\u00e9ronautique de la US Air Force. Le machine learning est un concept utilis\u00e9 en intelligence artificielle . Il s'agit d'entra\u00eener une machine \u00e0 apprendre \u00e0 reconnaitre certaines formes. L'algorithme des \\(k\\) plus proches voisins (knn : k-nearest neighbors) donne une m\u00e9thode qui permet la mise en place de l'entrainement. Son principe peut \u00eatre r\u00e9sum\u00e9 par cette phrase : Dis-moi qui sont tes amis et je te dirai qui tu es . Exemple introductif Dans cette introduction, nous consid\u00e9rons un jeu de donn\u00e9es constitu\u00e9 de la fa\u00e7on suivante : les donn\u00e9es sont r\u00e9parties suivant deux types : le type 1 et le type 2, les donn\u00e9es n'ont que deux caract\u00e9ristiques : caract\u00e9ristique 1 et caract\u00e9ristique 2, Imaginez la situation suivante dans un jeu : Vous avez deux types de personnages : les fantassins (type 1 : \"fantassin\") et les chevaliers (type 2 : \"chevalier\"). Vous avez deux types de caract\u00e9ristiques : la force (caract\u00e9ristique 1 : nombre entre 0 et 20) et le courage (Caract\u00e9ristique 2 : nombre entre 0 et 20 ). Vous avez une collection de personnages dont vous connaissez les caract\u00e9ristiques et le type. Vous introduisez un nouveau personnage dont vous ne connaissez pas le type. Vous poss\u00e9dez les caract\u00e9ristiques de ce nouveau personnage. Le but de l'algorithme KNN est de r\u00e9pondre \u00e0 la question : quel le type de ce nouveau personnage ? Visualisation du probl\u00e8me Les donn\u00e9es sont stock\u00e9es dans un fichier csv t\u00e9l\u00e9chargeable : fichier csv \u00e0 t\u00e9l\u00e9charger Voici un aper\u00e7u des donn\u00e9es : Nom Force Courage Type Ario 20 1 Chevalier Axal 10 10 Chevalier Cargo 20 11 Fantassin Clark 2 12 Chevalier Fancy 9 5 Fantassin Faq 15 11 Fantassin ... ... ... ... Voici une repr\u00e9sentation de ces donn\u00e9es : Nous introduisons une nouvelle donn\u00e9e (appel\u00e9e cible dans notre exemple) avec ses deux caract\u00e9ristiques : une force de 12 et un courage de 12,5 . Le but de l'algorithme KNN des \\(k\\) plus proches voisins est de d\u00e9terminer le type de la cible. Dans un premier, il faut fixer le nombre de voisins. Nous allons choisir \\(k=7\\) . Nous verrons par la suite l'importance de ce choix arbitraire. Voici une nouvelle repr\u00e9sentation avec la cible et la recherche des 7 voisins les plus proches proches, ceux qui se trouvent dans le cercle bleu : Parmi ses 7 voisins, il y a 2 voisins de type \"chevalier\" et 5 voisins de type \"fantassin\", Il est donc probable que notre cible soit de type \"fantassin\". Remarques La valeur \\(k=7\\) est ici un choix arbitraire. Cette valeur doit n\u00e9anmoins \u00eatre choisie judicieusement : trop faible, la qualit\u00e9 de la pr\u00e9diction diminue ; trop grande, la qualit\u00e9 de la pr\u00e9diction diminue aussi. Il suffit d'imaginer qu'il existe une classe pr\u00e9dominante en nombre. Avec une grande valeur de \\(k\\) , cette classe remporterait la pr\u00e9diction \u00e0 chaque fois. Nous avons utilis\u00e9 une distance sch\u00e9matis\u00e9e par un disque. Ce choix est discutable. Il faut faire attention \u00e0 la distance Euclidienne qui n'a de sens que dans un rep\u00e8re orthonorm\u00e9. Nous aurions pu choisir une autre distance. Il est facile de repr\u00e9senter les donn\u00e9es avec 1 \u00e0 3 caract\u00e9ristiques. Nous ne pouvons pas repr\u00e9senter des donn\u00e9es avec des caract\u00e9ristiques sup\u00e9rieures \u00e0 3 mais l'algorithme reste op\u00e9rationnel. Algorithme Remarques Pour pr\u00e9dire la classe d\u2019un nouvel \u00e9l\u00e9ment, il faut des donn\u00e9es : Un \u00e9chantillon \\(E\\) de donn\u00e9es ; Un nouvel \u00e9l\u00e9ment cible \\(c\\) dont on conna\u00eet les caract\u00e9ristiques et dont on veut pr\u00e9dire le type ; La valeur de \\(k\\) , le nombre de voisins \u00e9tudi\u00e9s. Une fois ces donn\u00e9es mod\u00e9lis\u00e9es, nous pouvons formaliser l'algorithme de la fa\u00e7on suivante : 1. Trouver, dans l\u2019\u00e9chantillon \\(E\\) , les \\(k\\) plus proches voisins de l'\u00e9l\u00e9ment \\(c\\) \u00e0 d\u00e9terminer, 2. Parmi les \\(k\\) plus proches voisins, trouver la classification majoritaire, 3. Renvoyer la classification majoritaire comme type cherch\u00e9 de l'\u00e9l\u00e9ment \\(c\\) . Algorithme na\u00eff Donn\u00e9es : une table de donn\u00e9es de taille \\(n\\) ; une donn\u00e9e cible \\(c\\) ; un entier \\(k\\) plus petit que \\(n\\) ; une r\u00e8gle permettant de calculer la distance entre deux donn\u00e9es. Algorithme : Trier les donn\u00e9es de la table selon la distance croissante avec la donn\u00e9e cible. Cr\u00e9er la liste des \\(k\\) premi\u00e8res donn\u00e9es de la table tri\u00e9e. Renvoyer la classe majoritaire de cette liste. Exercice 1 Nous reprenons le m\u00eame ensemble de donn\u00e9es : Nous introduisons une cible : force = 5 et courage = 12,5 On choisit \\(k=4\\) et la distance sch\u00e9matis\u00e9e par un disque. Travail Quel est le type de notre donn\u00e9e cible ? Donner une valeur de \\(k\\) qui permette de d\u00e9cider du type de notre donn\u00e9e cible. Donner pour cette valeur de \\(k\\) le type de la donn\u00e9e cible. Solution 1 Le type de la donn\u00e9e ne peut \u00eatre d\u00e9termin\u00e9. Il y a autant de voisins chevaliers et fantassins. Solution 2 Pour \\(k = 5\\) , le type peut \u00eatre d\u00e9termin\u00e9. La cible est un chevalier. On choisit \\(k=9\\) . Pour la distance, on d\u00e9cide que les valeurs de la force n'ont pas d'importance. La distance d\u00e9pend du courage. Quel est le type de notre donn\u00e9e cible ? Parmi les 9 voisins, il y a 4 chevaliers et 5 fantassins. Selon le crit\u00e8re de la force et \\(k = 9\\) , la cible peut \u00eatre assimil\u00e9 \u00e0 un fantassin. On choisit \\(k=5\\) . Pour la distance, on d\u00e9cide que les valeurs du courage n'ont pas d'importance. La distance d\u00e9pend de la force. Quel est le type de notre donn\u00e9e cible ? Parmi les 5 voisins, il y a 2 chevaliers et 3 fantassins. Selon le crit\u00e8re du courage et \\(k = 5\\) , la cible peut \u00eatre assimil\u00e9 \u00e0 un fantassin. Exercice 2 Sur un champ de bataille de la Premi\u00e8re Guerre Mondiale un m\u00e9morial a \u00e9t\u00e9 construit. Afin de r\u00e9aliser une extension, des fouilles pr\u00e9ventives ont \u00e9t\u00e9 r\u00e9alis\u00e9es par l'INRAP (Institut National de Recherches Arch\u00e9ologiques Pr\u00e9ventives). Au cours de ces fouilles, diff\u00e9rents objets ou \u00e9l\u00e9ments de squelettes humains ont \u00e9t\u00e9 trouv\u00e9s. L'\u00e9tude de ces d\u00e9couvertes a permis d'identifier la nationalit\u00e9 de nombreux art\u00e9facts retrouv\u00e9s : soit allemand, anglais ou fran\u00e7ais. Le plan ci-dessous repr\u00e9sente la zone de fouille et la position des \u00e9l\u00e9ments dont l'origine a \u00e9t\u00e9 identifi\u00e9e. L'unit\u00e9 est le m\u00e8tre. Un \u00e9l\u00e9ment d'un squelette a \u00e9t\u00e9 retrouv\u00e9 en (10;4) ; il est repr\u00e9sent\u00e9 par un losange couleur magenta sur le plan. L'objectif est de d\u00e9terminer une origine probable pour cet \u00e9l\u00e9ment de squelette avant de le d\u00e9poser dans un ossuaire. La distance qui sera prise en compte est la distance dite de Tchebychev. (Voir pr\u00e9cisions ) Ce que vous devez seulement savoir sur cette distance pour cet exercice c'est que l'ensemble des points se trouvant \u00e0 une distance \\(d\\) d'un point \\(i\\) correspond au pourtour du carr\u00e9, de centre \\(i\\) , de c\u00f4t\u00e9s parall\u00e8les aux axes et de longueurs \\(2d\\) . Sur le graphique ci-dessus, le carr\u00e9 dessin\u00e9 : en rouge correspond ainsi \u00e0 l'ensemble des points se trouvant \u00e0 3 m\u00e8tres. en noir correspond ainsi \u00e0 l'ensemble des points se trouvant \u00e0 1 m\u00e8tre. A quelle valeur de \\(k\\) correspond le carr\u00e9 noir ? Le carr\u00e9 noir correspond \u00e0 une valeur de \\(k = 3\\) . Quelle serait l'origine de l'\u00e9l\u00e9ment de squelette en consid\u00e9rant cette valeur de \\(k\\) ? Pour \\(k = 3\\) , le squelette a 2 voisins fran\u00e7ais et 1 voisin anglais. L'origine du squelette peut \u00eatre d\u00e9termin\u00e9e comme fran\u00e7aise. Quelle serait l'origine de l'\u00e9l\u00e9ment de squelette en consid\u00e9rant cette valeur de \\(k = 9\\) ? Pour \\(k = 9\\) , le squelette a 4 voisins anglais, 3 voisins fran\u00e7ais et 2 voisins allemands. On peut consid\u00e9rer que l'origine est anglaise pour cette valeur de \\(k\\) . Quelle serait l'origine de l'\u00e9l\u00e9ment de squelette en consid\u00e9rant cette valeur de \\(k = 11\\) ? Pour \\(k = 11\\) , le squelette a 5 voisins allemands, 4 voisins anglais et 2 voisins fran\u00e7ais. On peut consid\u00e9rer que l'origine est allemande pour cette valeur de \\(k\\) . Peut-on savoir \u00e0 coup s\u00fbr, en prenant une valeur de \\(k\\) inf\u00e9rieure au \u00e9gale \u00e0 11, si le combattant dont on a trouv\u00e9 un \u00e9l\u00e9ment de squelette \u00e9tait un combattant de la Triple-Entente (France + Royaume-Uni + Russie) ou de la Triple-Alliance (Allemagne + Autriche-Hongrie + Italie) ? Impl\u00e9mentation de l'algorithme des k\u200b plus proches voisins Pour impl\u00e9menter cet algorithme, il nous faut : Une table de donn\u00e9es. Cette table peut \u00eatre une liste ou un dictionnaire. Une distance entre deux donn\u00e9es. Une cible. La notion de distance est un \u00e9l\u00e9ment central de cet algorithme. Voici ci-apr\u00e8s quelques distances possibles. La distance Euclidienne (dans un rep\u00e8re orthonorm\u00e9) Soientt deux donn\u00e9es \\(d_1\\) et \\(d_2\\) de coordonn\u00e9es respectives \\((x_1,y_1)\\) et \\((x_2,y_2)\\) . \\(distance(d_1, d_2) = \\sqrt{(x_1-x_2)^2 + (y_1 - y_2)^2}\\) La distance de Manhattan Soient deux donn\u00e9es \\(d_1\\) et \\(d_2\\) de coordonn\u00e9es respectives \\((x_1,y_1)\\) et \\((x_2,y_2)\\) . \\(distance(d_1, d_2) = |x_1-x_2| + |y_1 - y_2|\\) La distance de Tchebychev Soient deux donn\u00e9es \\(d_1\\) et \\(d_2\\) de coordonn\u00e9es respectives \\((x_1,y_1)\\) et \\((x_2,y_2)\\) . \\(distance(d_1, d_2) = max(|x_1-x_2|, |y_1 - y_2|)\\) Structure globale de l'algorithme des k\u200b plus proches voisins 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def k_plus_proches_voisins ( table , cible , k ) : \"\"\"Renvoie la liste des $k$ plus proches voisins de la cible\"\"\" def distance_cible ( donnee ) : \"\"\" renvoie la distance entre la donn\u00e9e et la cible\"\"\" return distance # On trie la table de mani\u00e8re croissante en utilisant la distance comme crit\u00e8re. table_triee = sorted ( table , key = distance_cible ) # gestion de la liste des k plus proches voisins proches_voisins = [] # initialisation vide for i in range ( k ) : proches_voisins . append ( table_triee [ i ]) # On ajoute les $k$ premi\u00e8res valeurs return proches_voisins # On renvoie la liste des $k$ plus proches voisins. Exercice 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # On peut utiliser des listes ou des dictionnaires table = [[ 't1' , 1 , 28 ], [ 't1' , 3 , 27.2 ], [ 't1' , 8 , 37.6 ], [ 't1' , 13 , 40.7 ], [ 't2' , 2 , 30 ], [ 't2' , 3 , 26 ], [ 't2' , 10 , 39 ], [ 't2' , 15 , 35.5 ]] # 't1' repr\u00e9sente le type 1 # 't2' repr\u00e9sente le type 2 # La premi\u00e8re valeur num\u00e9rique correspond \u00e0 la valeur de la caract\u00e9ristique 1 # La deuxi\u00e8me valeur num\u00e9rique correspond \u00e0 la valeur de la caract\u00e9ristique 2 # Caract\u00e9ristiques 1 et 2 de la cible cible = [ 7 , 28.4 ] # Valeur de $k$ k = 3 def k_plus_proches_voisins ( table , cible , k ) : \"\"\"Renvoie la liste des $k$ plus proches voisins de la cible\"\"\" def distance_cible ( donnee ) : \"\"\" renvoie la distance entre la donn\u00e9e et la cible\"\"\" return abs ( donnee [ 1 ] - cible [ 0 ]) + abs ( donnee [ 1 ] - cible [ 0 ]) table_triee = sorted ( table , key = distance_cible ) return [ table_triee [ i ] for i in range ( k )] k_plus_proches_voisins ( table , cible , k ) En utilisant le code ci-dessus : Afficher le r\u00e9sultat de la fonction k_plus_proches_voisins(table,cible,k) . Quelle est la caract\u00e9ristique de la cible ? Quelle est la valeur de \\(k\\) ? Quelle distance a-t-on utilis\u00e9e ? Utiliser d'autres valeurs de \\(k\\) . Quel est l'effet sur la caract\u00e9ristique de la cible ? Changer la distance. Programmer la distance de Tchebychev. Quel est l'effet sur la caract\u00e9ristique de la cible ? Exercice 4 Faire une recherche sur la distance de Hamming et donner la distance de Hamming : entre \\(100100\\) et \\(100010\\) entre \\(210510\\) et \\(201511\\) entre \"maille\" et \"paille\" Travail \u00c9crire une fonction hamming qui renvoie la distance de Hamming entre deux \u00e9l\u00e9ments (pass\u00e9s sous forme de chaine de caract\u00e8res de m\u00eame taille). Solution 1 2 3 4 5 6 7 8 9 10 11 12 def hamming ( element1 , element2 ): ''' Calcule la distance de hamming entre 2 \u00e9l\u00e9ments :param element1: (str) Un \u00e9l\u00e9ment :param element2: (str) Un \u00e9l\u00e9ment :return: (int) La distance de Hamming entre les 2 \u00e9l\u00e9ments ''' distance = 0 for i in range ( len ( element1 )): if element1 [ i ] == element2 [ i ]: distance += 1 return distance Exercices d'application Choixpeau Magique d'Harry Potter Pok\u00e9mon Calcul de complexit\u00e9","title":"Cours"},{"location":"premiere/bloc6/chapitre-04/#cours","text":"","title":"Cours"},{"location":"premiere/bloc6/chapitre-04/#algorithme-des-k-plus-proches-voisins","text":"Avant-propos Cet algorithme a \u00e9t\u00e9 introduit en 1951 par Fix et Hodges dans un rapport de la facult\u00e9 de m\u00e9decine a\u00e9ronautique de la US Air Force. Le machine learning est un concept utilis\u00e9 en intelligence artificielle . Il s'agit d'entra\u00eener une machine \u00e0 apprendre \u00e0 reconnaitre certaines formes. L'algorithme des \\(k\\) plus proches voisins (knn : k-nearest neighbors) donne une m\u00e9thode qui permet la mise en place de l'entrainement. Son principe peut \u00eatre r\u00e9sum\u00e9 par cette phrase : Dis-moi qui sont tes amis et je te dirai qui tu es .","title":"Algorithme des k plus proches voisins"},{"location":"premiere/bloc6/chapitre-04/#exemple-introductif","text":"Dans cette introduction, nous consid\u00e9rons un jeu de donn\u00e9es constitu\u00e9 de la fa\u00e7on suivante : les donn\u00e9es sont r\u00e9parties suivant deux types : le type 1 et le type 2, les donn\u00e9es n'ont que deux caract\u00e9ristiques : caract\u00e9ristique 1 et caract\u00e9ristique 2, Imaginez la situation suivante dans un jeu : Vous avez deux types de personnages : les fantassins (type 1 : \"fantassin\") et les chevaliers (type 2 : \"chevalier\"). Vous avez deux types de caract\u00e9ristiques : la force (caract\u00e9ristique 1 : nombre entre 0 et 20) et le courage (Caract\u00e9ristique 2 : nombre entre 0 et 20 ). Vous avez une collection de personnages dont vous connaissez les caract\u00e9ristiques et le type. Vous introduisez un nouveau personnage dont vous ne connaissez pas le type. Vous poss\u00e9dez les caract\u00e9ristiques de ce nouveau personnage. Le but de l'algorithme KNN est de r\u00e9pondre \u00e0 la question : quel le type de ce nouveau personnage ?","title":"Exemple introductif"},{"location":"premiere/bloc6/chapitre-04/#visualisation-du-probleme","text":"Les donn\u00e9es sont stock\u00e9es dans un fichier csv t\u00e9l\u00e9chargeable : fichier csv \u00e0 t\u00e9l\u00e9charger Voici un aper\u00e7u des donn\u00e9es : Nom Force Courage Type Ario 20 1 Chevalier Axal 10 10 Chevalier Cargo 20 11 Fantassin Clark 2 12 Chevalier Fancy 9 5 Fantassin Faq 15 11 Fantassin ... ... ... ... Voici une repr\u00e9sentation de ces donn\u00e9es : Nous introduisons une nouvelle donn\u00e9e (appel\u00e9e cible dans notre exemple) avec ses deux caract\u00e9ristiques : une force de 12 et un courage de 12,5 . Le but de l'algorithme KNN des \\(k\\) plus proches voisins est de d\u00e9terminer le type de la cible. Dans un premier, il faut fixer le nombre de voisins. Nous allons choisir \\(k=7\\) . Nous verrons par la suite l'importance de ce choix arbitraire. Voici une nouvelle repr\u00e9sentation avec la cible et la recherche des 7 voisins les plus proches proches, ceux qui se trouvent dans le cercle bleu : Parmi ses 7 voisins, il y a 2 voisins de type \"chevalier\" et 5 voisins de type \"fantassin\", Il est donc probable que notre cible soit de type \"fantassin\". Remarques La valeur \\(k=7\\) est ici un choix arbitraire. Cette valeur doit n\u00e9anmoins \u00eatre choisie judicieusement : trop faible, la qualit\u00e9 de la pr\u00e9diction diminue ; trop grande, la qualit\u00e9 de la pr\u00e9diction diminue aussi. Il suffit d'imaginer qu'il existe une classe pr\u00e9dominante en nombre. Avec une grande valeur de \\(k\\) , cette classe remporterait la pr\u00e9diction \u00e0 chaque fois. Nous avons utilis\u00e9 une distance sch\u00e9matis\u00e9e par un disque. Ce choix est discutable. Il faut faire attention \u00e0 la distance Euclidienne qui n'a de sens que dans un rep\u00e8re orthonorm\u00e9. Nous aurions pu choisir une autre distance. Il est facile de repr\u00e9senter les donn\u00e9es avec 1 \u00e0 3 caract\u00e9ristiques. Nous ne pouvons pas repr\u00e9senter des donn\u00e9es avec des caract\u00e9ristiques sup\u00e9rieures \u00e0 3 mais l'algorithme reste op\u00e9rationnel.","title":"Visualisation du probl\u00e8me"},{"location":"premiere/bloc6/chapitre-04/#algorithme","text":"","title":"Algorithme"},{"location":"premiere/bloc6/chapitre-04/#exercice-1","text":"Nous reprenons le m\u00eame ensemble de donn\u00e9es : Nous introduisons une cible : force = 5 et courage = 12,5 On choisit \\(k=4\\) et la distance sch\u00e9matis\u00e9e par un disque. Travail Quel est le type de notre donn\u00e9e cible ? Donner une valeur de \\(k\\) qui permette de d\u00e9cider du type de notre donn\u00e9e cible. Donner pour cette valeur de \\(k\\) le type de la donn\u00e9e cible. Solution 1 Le type de la donn\u00e9e ne peut \u00eatre d\u00e9termin\u00e9. Il y a autant de voisins chevaliers et fantassins. Solution 2 Pour \\(k = 5\\) , le type peut \u00eatre d\u00e9termin\u00e9. La cible est un chevalier. On choisit \\(k=9\\) . Pour la distance, on d\u00e9cide que les valeurs de la force n'ont pas d'importance. La distance d\u00e9pend du courage. Quel est le type de notre donn\u00e9e cible ? Parmi les 9 voisins, il y a 4 chevaliers et 5 fantassins. Selon le crit\u00e8re de la force et \\(k = 9\\) , la cible peut \u00eatre assimil\u00e9 \u00e0 un fantassin. On choisit \\(k=5\\) . Pour la distance, on d\u00e9cide que les valeurs du courage n'ont pas d'importance. La distance d\u00e9pend de la force. Quel est le type de notre donn\u00e9e cible ? Parmi les 5 voisins, il y a 2 chevaliers et 3 fantassins. Selon le crit\u00e8re du courage et \\(k = 5\\) , la cible peut \u00eatre assimil\u00e9 \u00e0 un fantassin.","title":"Exercice 1"},{"location":"premiere/bloc6/chapitre-04/#exercice-2","text":"Sur un champ de bataille de la Premi\u00e8re Guerre Mondiale un m\u00e9morial a \u00e9t\u00e9 construit. Afin de r\u00e9aliser une extension, des fouilles pr\u00e9ventives ont \u00e9t\u00e9 r\u00e9alis\u00e9es par l'INRAP (Institut National de Recherches Arch\u00e9ologiques Pr\u00e9ventives). Au cours de ces fouilles, diff\u00e9rents objets ou \u00e9l\u00e9ments de squelettes humains ont \u00e9t\u00e9 trouv\u00e9s. L'\u00e9tude de ces d\u00e9couvertes a permis d'identifier la nationalit\u00e9 de nombreux art\u00e9facts retrouv\u00e9s : soit allemand, anglais ou fran\u00e7ais. Le plan ci-dessous repr\u00e9sente la zone de fouille et la position des \u00e9l\u00e9ments dont l'origine a \u00e9t\u00e9 identifi\u00e9e. L'unit\u00e9 est le m\u00e8tre. Un \u00e9l\u00e9ment d'un squelette a \u00e9t\u00e9 retrouv\u00e9 en (10;4) ; il est repr\u00e9sent\u00e9 par un losange couleur magenta sur le plan. L'objectif est de d\u00e9terminer une origine probable pour cet \u00e9l\u00e9ment de squelette avant de le d\u00e9poser dans un ossuaire. La distance qui sera prise en compte est la distance dite de Tchebychev. (Voir pr\u00e9cisions ) Ce que vous devez seulement savoir sur cette distance pour cet exercice c'est que l'ensemble des points se trouvant \u00e0 une distance \\(d\\) d'un point \\(i\\) correspond au pourtour du carr\u00e9, de centre \\(i\\) , de c\u00f4t\u00e9s parall\u00e8les aux axes et de longueurs \\(2d\\) . Sur le graphique ci-dessus, le carr\u00e9 dessin\u00e9 : en rouge correspond ainsi \u00e0 l'ensemble des points se trouvant \u00e0 3 m\u00e8tres. en noir correspond ainsi \u00e0 l'ensemble des points se trouvant \u00e0 1 m\u00e8tre. A quelle valeur de \\(k\\) correspond le carr\u00e9 noir ? Le carr\u00e9 noir correspond \u00e0 une valeur de \\(k = 3\\) . Quelle serait l'origine de l'\u00e9l\u00e9ment de squelette en consid\u00e9rant cette valeur de \\(k\\) ? Pour \\(k = 3\\) , le squelette a 2 voisins fran\u00e7ais et 1 voisin anglais. L'origine du squelette peut \u00eatre d\u00e9termin\u00e9e comme fran\u00e7aise. Quelle serait l'origine de l'\u00e9l\u00e9ment de squelette en consid\u00e9rant cette valeur de \\(k = 9\\) ? Pour \\(k = 9\\) , le squelette a 4 voisins anglais, 3 voisins fran\u00e7ais et 2 voisins allemands. On peut consid\u00e9rer que l'origine est anglaise pour cette valeur de \\(k\\) . Quelle serait l'origine de l'\u00e9l\u00e9ment de squelette en consid\u00e9rant cette valeur de \\(k = 11\\) ? Pour \\(k = 11\\) , le squelette a 5 voisins allemands, 4 voisins anglais et 2 voisins fran\u00e7ais. On peut consid\u00e9rer que l'origine est allemande pour cette valeur de \\(k\\) . Peut-on savoir \u00e0 coup s\u00fbr, en prenant une valeur de \\(k\\) inf\u00e9rieure au \u00e9gale \u00e0 11, si le combattant dont on a trouv\u00e9 un \u00e9l\u00e9ment de squelette \u00e9tait un combattant de la Triple-Entente (France + Royaume-Uni + Russie) ou de la Triple-Alliance (Allemagne + Autriche-Hongrie + Italie) ?","title":"Exercice 2"},{"location":"premiere/bloc6/chapitre-04/#implementation-de-lalgorithme-des-k-plus-proches-voisins","text":"Pour impl\u00e9menter cet algorithme, il nous faut : Une table de donn\u00e9es. Cette table peut \u00eatre une liste ou un dictionnaire. Une distance entre deux donn\u00e9es. Une cible. La notion de distance est un \u00e9l\u00e9ment central de cet algorithme. Voici ci-apr\u00e8s quelques distances possibles.","title":"Impl\u00e9mentation de l'algorithme des k\u200b plus proches voisins"},{"location":"premiere/bloc6/chapitre-04/#la-distance-euclidienne-dans-un-repere-orthonorme","text":"Soientt deux donn\u00e9es \\(d_1\\) et \\(d_2\\) de coordonn\u00e9es respectives \\((x_1,y_1)\\) et \\((x_2,y_2)\\) . \\(distance(d_1, d_2) = \\sqrt{(x_1-x_2)^2 + (y_1 - y_2)^2}\\)","title":"La distance Euclidienne (dans un rep\u00e8re orthonorm\u00e9)"},{"location":"premiere/bloc6/chapitre-04/#la-distance-de-manhattan","text":"Soient deux donn\u00e9es \\(d_1\\) et \\(d_2\\) de coordonn\u00e9es respectives \\((x_1,y_1)\\) et \\((x_2,y_2)\\) . \\(distance(d_1, d_2) = |x_1-x_2| + |y_1 - y_2|\\)","title":"La distance de Manhattan"},{"location":"premiere/bloc6/chapitre-04/#la-distance-de-tchebychev","text":"Soient deux donn\u00e9es \\(d_1\\) et \\(d_2\\) de coordonn\u00e9es respectives \\((x_1,y_1)\\) et \\((x_2,y_2)\\) . \\(distance(d_1, d_2) = max(|x_1-x_2|, |y_1 - y_2|)\\)","title":"La distance de Tchebychev"},{"location":"premiere/bloc6/chapitre-04/#structure-globale-de-lalgorithme-des-k-plus-proches-voisins","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def k_plus_proches_voisins ( table , cible , k ) : \"\"\"Renvoie la liste des $k$ plus proches voisins de la cible\"\"\" def distance_cible ( donnee ) : \"\"\" renvoie la distance entre la donn\u00e9e et la cible\"\"\" return distance # On trie la table de mani\u00e8re croissante en utilisant la distance comme crit\u00e8re. table_triee = sorted ( table , key = distance_cible ) # gestion de la liste des k plus proches voisins proches_voisins = [] # initialisation vide for i in range ( k ) : proches_voisins . append ( table_triee [ i ]) # On ajoute les $k$ premi\u00e8res valeurs return proches_voisins # On renvoie la liste des $k$ plus proches voisins.","title":"Structure globale de l'algorithme des k\u200b plus proches voisins"},{"location":"premiere/bloc6/chapitre-04/#exercice-3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # On peut utiliser des listes ou des dictionnaires table = [[ 't1' , 1 , 28 ], [ 't1' , 3 , 27.2 ], [ 't1' , 8 , 37.6 ], [ 't1' , 13 , 40.7 ], [ 't2' , 2 , 30 ], [ 't2' , 3 , 26 ], [ 't2' , 10 , 39 ], [ 't2' , 15 , 35.5 ]] # 't1' repr\u00e9sente le type 1 # 't2' repr\u00e9sente le type 2 # La premi\u00e8re valeur num\u00e9rique correspond \u00e0 la valeur de la caract\u00e9ristique 1 # La deuxi\u00e8me valeur num\u00e9rique correspond \u00e0 la valeur de la caract\u00e9ristique 2 # Caract\u00e9ristiques 1 et 2 de la cible cible = [ 7 , 28.4 ] # Valeur de $k$ k = 3 def k_plus_proches_voisins ( table , cible , k ) : \"\"\"Renvoie la liste des $k$ plus proches voisins de la cible\"\"\" def distance_cible ( donnee ) : \"\"\" renvoie la distance entre la donn\u00e9e et la cible\"\"\" return abs ( donnee [ 1 ] - cible [ 0 ]) + abs ( donnee [ 1 ] - cible [ 0 ]) table_triee = sorted ( table , key = distance_cible ) return [ table_triee [ i ] for i in range ( k )] k_plus_proches_voisins ( table , cible , k ) En utilisant le code ci-dessus : Afficher le r\u00e9sultat de la fonction k_plus_proches_voisins(table,cible,k) . Quelle est la caract\u00e9ristique de la cible ? Quelle est la valeur de \\(k\\) ? Quelle distance a-t-on utilis\u00e9e ? Utiliser d'autres valeurs de \\(k\\) . Quel est l'effet sur la caract\u00e9ristique de la cible ? Changer la distance. Programmer la distance de Tchebychev. Quel est l'effet sur la caract\u00e9ristique de la cible ?","title":"Exercice 3"},{"location":"premiere/bloc6/chapitre-04/#exercice-4","text":"Faire une recherche sur la distance de Hamming et donner la distance de Hamming : entre \\(100100\\) et \\(100010\\) entre \\(210510\\) et \\(201511\\) entre \"maille\" et \"paille\" Travail \u00c9crire une fonction hamming qui renvoie la distance de Hamming entre deux \u00e9l\u00e9ments (pass\u00e9s sous forme de chaine de caract\u00e8res de m\u00eame taille). Solution 1 2 3 4 5 6 7 8 9 10 11 12 def hamming ( element1 , element2 ): ''' Calcule la distance de hamming entre 2 \u00e9l\u00e9ments :param element1: (str) Un \u00e9l\u00e9ment :param element2: (str) Un \u00e9l\u00e9ment :return: (int) La distance de Hamming entre les 2 \u00e9l\u00e9ments ''' distance = 0 for i in range ( len ( element1 )): if element1 [ i ] == element2 [ i ]: distance += 1 return distance","title":"Exercice 4"},{"location":"premiere/bloc6/chapitre-04/#exercices-dapplication","text":"Choixpeau Magique d'Harry Potter Pok\u00e9mon","title":"Exercices d'application"},{"location":"premiere/bloc6/chapitre-04/#calcul-de-complexite","text":"","title":"Calcul de complexit\u00e9"},{"location":"premiere/bloc6/chapitre-04/choixpeau/","text":"Le Choixpeau magique d'Harry Potter Description \u00c0 l\u2019entr\u00e9e \u00e0 l\u2019\u00e9cole de Poudlard, le Choixpeau magique r\u00e9partit les \u00e9l\u00e8ves dans les diff\u00e9rentes maisons (Gryffondor, Serpentard, Serdaigle et Poufsouffle) en fonction de leur courage, leur loyaut\u00e9, leur sagesse et leur malice. Source : Pixabay Le Choixpeau magique dispose d\u2019un fichier CSV ( choixpeauMagique.csv ) dans lequel sont r\u00e9pertori\u00e9es les donn\u00e9es d\u2019un \u00e9chantillon d\u2019\u00e9l\u00e8ves. Nom Courage Loyaut\u00e9 Sagesse Malice Maison Adrian 9 4 7 10 Serpentard Andrew 9 3 4 7 Gryffondor Angelina 10 6 5 9 Gryffondor Anthony 2 8 8 3 Serdaigle On souhaite que Choixpeau magique oriente les nouveaux \u00e9l\u00e8ves : Nom Courage Loyaut\u00e9 Sagesse Malice Hermione 8 6 6 6 Drago 6 6 5 8 Cho 7 6 9 6 C\u00e9dric 7 10 5 6 Partie 1 - Mod\u00e9liser un \u00e9l\u00e8ve On mod\u00e9lise un \u00e9l\u00e8ve par un dictionnaire. Exemple pour l'\u00e9l\u00e8ve Bellatrix : 1 { 'Nom' : 'Bellatrix' , 'Courage' : 10 , 'Loyaut\u00e9' : 4 , 'Sagesse' : 9 , 'Malice' : 9 , 'Maison' : 'Serpentard' } Donner la mod\u00e9lisation de l'\u00e9l\u00e8ve Anthony. En utilisant la distance de Manhattan (Cf. Cours sur l'algorithme KNN ), V\u00e9rifier que la distance entre Hermione et Adrian est \u00e9gale \u00e0 8. Quelle est la distance entre Arthur et Drago ? \u00c9crire la fonction distance qui prend deux \u00e9l\u00e8ves en param\u00e8tre et renvoie la distance entre ces deux \u00e9l\u00e8ves. Ne pas oublier de pr\u00e9ciser la documentation et donner au moins un test. Partie 2 - Charger les donn\u00e9es de la table Se reporter au chapitre sur les tables afin d'\u00e9crire une fonction qui permet de r\u00e9cup\u00e9rer les donn\u00e9es des \u00e9l\u00e8ves d'un fichier CSV pour les stocker dans une liste. On doit obtenir une liste de dictionnaires. Partie 3 - Trouver la maison majoritaire \u00c9crire une fonction frequence_des_maisons(table) qui prend en param\u00e8tre une table d'\u00e9l\u00e8ves et qui renvoie le dictionnaire des fr\u00e9quences des maisons. Vous devez obtenir : 1 { 'Serpentard' : 12 , 'Gryffondor' : 17 , 'Serdaigle' : 11 , 'Poufsouffle' : 10 } \u00c9crire une fonction maison_majoritaire(table) qui prend en param\u00e8tre une table d'\u00e9l\u00e8ves et qui renvoie le nom de la maison la plus repr\u00e9sent\u00e9e. Partie 4 - Algorithme des 7 plus proches voisins On dispose d'une table et d'un nouveau qui n'a pas encore de maison. On cherche les 7 plus proches voisins de ce nouveau. \u00c9crire l'algorithme des 7 plus proches voisins. Impl\u00e9menter cet algorithme en python. Partie 5 - Attribuer une maison On dispose d'une table et d'un nouveau qui n' a pas encore de maison. On cherche \u00e0 lui attribuer une maison. Impl\u00e9menter en python l'algorithme de l'attribution : Trouver dans la table les 7 plus proches voisins du nouvel \u00e9l\u00e8ve. Parmi ces proches voisins, trouver la maison majoritaire. Renvoyer la maison majoritaire. Faire un test avec 'Hermione'. Vous devez obtenir les 7 voisins suivants : 1 [{ 'nom' : 'Cormac' , 'Courage' : 9 , 'Loyaut\u00e9' : 6 , 'sagesse' : 5 , 'malice' : 4 , 'maison' : 'Gryffondor' }, { 'nom' : 'Milicent' , 'Courage' : 9 , 'Loyaut\u00e9' : 3 , 'sagesse' : 5 , 'malice' : 6 , 'maison' : 'Serpentar' }, { 'nom' : 'Neville' , 'Courage' : 10 , 'Loyaut\u00e9' : 5 , 'Sagesse' : 6 , 'Malice' : 4 , 'Maison' : 'Gryffondor' }, { 'nom' : 'Padma' , 'Courage' : 6 , 'Loyaut\u00e9' : 6 , 'Sagesse' : 6 , 'Malice' : 9 , 'Maison' : 'Serdaigle' }, { 'nom' : 'Susan' , 'Courage' : 5 , 'loyaut\u00e9' : 6 , 'Sagesse' : 5 , 'malice' : 5 , 'Maison' : 'Poufsouffle' }, { 'nom' : 'Angelina' , 'Courage' : 10 , 'loyaut\u00e9' : 6 , 'Sagesse' : 5 , 'Malice' : 9 , 'Maison' : 'Gryffondor' }, { 'nom' : 'Colin' , 'Courage' : 10 , 'Loyaut\u00e9' : 7 , 'Sagesse' : 4 , 'Malice' : 7 , 'Maison' : 'Gryffondor' }] La maison attribu\u00e9e pour 'Hermione' est 'Gryffondor'. Partie 6 - Pour aller plus loin Ex\u00e9cuter l'attribution de la classe aux nouveaux \u00e9l\u00e8ves avec \\(k=3\\) , \\(k=5\\) , \\(k=9\\) et comparer les r\u00e9sultats d'attribution obtenus. Impl\u00e9menter la fonction qui calcule la distance euclidienne et d\u00e9terminer la classe des nouveaux \u00e9l\u00e8ves. Comparer les r\u00e9sultats avec ceux obtenus avec la distance de Manhattan .","title":"Le Choixpeau magique d'Harry Potter"},{"location":"premiere/bloc6/chapitre-04/choixpeau/#le-choixpeau-magique-dharry-potter","text":"","title":"Le Choixpeau magique d'Harry Potter"},{"location":"premiere/bloc6/chapitre-04/choixpeau/#description","text":"\u00c0 l\u2019entr\u00e9e \u00e0 l\u2019\u00e9cole de Poudlard, le Choixpeau magique r\u00e9partit les \u00e9l\u00e8ves dans les diff\u00e9rentes maisons (Gryffondor, Serpentard, Serdaigle et Poufsouffle) en fonction de leur courage, leur loyaut\u00e9, leur sagesse et leur malice. Source : Pixabay Le Choixpeau magique dispose d\u2019un fichier CSV ( choixpeauMagique.csv ) dans lequel sont r\u00e9pertori\u00e9es les donn\u00e9es d\u2019un \u00e9chantillon d\u2019\u00e9l\u00e8ves. Nom Courage Loyaut\u00e9 Sagesse Malice Maison Adrian 9 4 7 10 Serpentard Andrew 9 3 4 7 Gryffondor Angelina 10 6 5 9 Gryffondor Anthony 2 8 8 3 Serdaigle On souhaite que Choixpeau magique oriente les nouveaux \u00e9l\u00e8ves : Nom Courage Loyaut\u00e9 Sagesse Malice Hermione 8 6 6 6 Drago 6 6 5 8 Cho 7 6 9 6 C\u00e9dric 7 10 5 6","title":"Description"},{"location":"premiere/bloc6/chapitre-04/choixpeau/#partie-1-modeliser-un-eleve","text":"On mod\u00e9lise un \u00e9l\u00e8ve par un dictionnaire. Exemple pour l'\u00e9l\u00e8ve Bellatrix : 1 { 'Nom' : 'Bellatrix' , 'Courage' : 10 , 'Loyaut\u00e9' : 4 , 'Sagesse' : 9 , 'Malice' : 9 , 'Maison' : 'Serpentard' } Donner la mod\u00e9lisation de l'\u00e9l\u00e8ve Anthony. En utilisant la distance de Manhattan (Cf. Cours sur l'algorithme KNN ), V\u00e9rifier que la distance entre Hermione et Adrian est \u00e9gale \u00e0 8. Quelle est la distance entre Arthur et Drago ? \u00c9crire la fonction distance qui prend deux \u00e9l\u00e8ves en param\u00e8tre et renvoie la distance entre ces deux \u00e9l\u00e8ves. Ne pas oublier de pr\u00e9ciser la documentation et donner au moins un test.","title":"Partie 1 - Mod\u00e9liser un \u00e9l\u00e8ve"},{"location":"premiere/bloc6/chapitre-04/choixpeau/#partie-2-charger-les-donnees-de-la-table","text":"Se reporter au chapitre sur les tables afin d'\u00e9crire une fonction qui permet de r\u00e9cup\u00e9rer les donn\u00e9es des \u00e9l\u00e8ves d'un fichier CSV pour les stocker dans une liste. On doit obtenir une liste de dictionnaires.","title":"Partie 2 - Charger les donn\u00e9es de la table"},{"location":"premiere/bloc6/chapitre-04/choixpeau/#partie-3-trouver-la-maison-majoritaire","text":"\u00c9crire une fonction frequence_des_maisons(table) qui prend en param\u00e8tre une table d'\u00e9l\u00e8ves et qui renvoie le dictionnaire des fr\u00e9quences des maisons. Vous devez obtenir : 1 { 'Serpentard' : 12 , 'Gryffondor' : 17 , 'Serdaigle' : 11 , 'Poufsouffle' : 10 } \u00c9crire une fonction maison_majoritaire(table) qui prend en param\u00e8tre une table d'\u00e9l\u00e8ves et qui renvoie le nom de la maison la plus repr\u00e9sent\u00e9e.","title":"Partie 3 - Trouver la maison majoritaire"},{"location":"premiere/bloc6/chapitre-04/choixpeau/#partie-4-algorithme-des-7-plus-proches-voisins","text":"On dispose d'une table et d'un nouveau qui n'a pas encore de maison. On cherche les 7 plus proches voisins de ce nouveau. \u00c9crire l'algorithme des 7 plus proches voisins. Impl\u00e9menter cet algorithme en python.","title":"Partie 4 - Algorithme des 7 plus proches voisins"},{"location":"premiere/bloc6/chapitre-04/choixpeau/#partie-5-attribuer-une-maison","text":"On dispose d'une table et d'un nouveau qui n' a pas encore de maison. On cherche \u00e0 lui attribuer une maison. Impl\u00e9menter en python l'algorithme de l'attribution : Trouver dans la table les 7 plus proches voisins du nouvel \u00e9l\u00e8ve. Parmi ces proches voisins, trouver la maison majoritaire. Renvoyer la maison majoritaire. Faire un test avec 'Hermione'. Vous devez obtenir les 7 voisins suivants : 1 [{ 'nom' : 'Cormac' , 'Courage' : 9 , 'Loyaut\u00e9' : 6 , 'sagesse' : 5 , 'malice' : 4 , 'maison' : 'Gryffondor' }, { 'nom' : 'Milicent' , 'Courage' : 9 , 'Loyaut\u00e9' : 3 , 'sagesse' : 5 , 'malice' : 6 , 'maison' : 'Serpentar' }, { 'nom' : 'Neville' , 'Courage' : 10 , 'Loyaut\u00e9' : 5 , 'Sagesse' : 6 , 'Malice' : 4 , 'Maison' : 'Gryffondor' }, { 'nom' : 'Padma' , 'Courage' : 6 , 'Loyaut\u00e9' : 6 , 'Sagesse' : 6 , 'Malice' : 9 , 'Maison' : 'Serdaigle' }, { 'nom' : 'Susan' , 'Courage' : 5 , 'loyaut\u00e9' : 6 , 'Sagesse' : 5 , 'malice' : 5 , 'Maison' : 'Poufsouffle' }, { 'nom' : 'Angelina' , 'Courage' : 10 , 'loyaut\u00e9' : 6 , 'Sagesse' : 5 , 'Malice' : 9 , 'Maison' : 'Gryffondor' }, { 'nom' : 'Colin' , 'Courage' : 10 , 'Loyaut\u00e9' : 7 , 'Sagesse' : 4 , 'Malice' : 7 , 'Maison' : 'Gryffondor' }] La maison attribu\u00e9e pour 'Hermione' est 'Gryffondor'.","title":"Partie 5 - Attribuer une maison"},{"location":"premiere/bloc6/chapitre-04/choixpeau/#partie-6-pour-aller-plus-loin","text":"Ex\u00e9cuter l'attribution de la classe aux nouveaux \u00e9l\u00e8ves avec \\(k=3\\) , \\(k=5\\) , \\(k=9\\) et comparer les r\u00e9sultats d'attribution obtenus. Impl\u00e9menter la fonction qui calcule la distance euclidienne et d\u00e9terminer la classe des nouveaux \u00e9l\u00e8ves. Comparer les r\u00e9sultats avec ceux obtenus avec la distance de Manhattan .","title":"Partie 6 - Pour aller plus loin"},{"location":"premiere/bloc6/chapitre-04/pokemon/","text":"Pokemon Description Le nom Pok\u00e9mon est issu de la contraction de Poke tto Mon sut\u0101, romanisation du japonais \u30dd\u30b1\u30c3\u30c8\u30e2\u30f3\u30b9\u30bf\u30fc1 traduisant l'anglais Pocket Monsters . Source : Pixabay Dans l'univers des Pok\u00e9mon, les animaux du monde r\u00e9el n'existent pas (ou tr\u00e8s peu). Le monde est peupl\u00e9 de Pok\u00e9mon, des cr\u00e9atures qui vivent en harmonie avec les humains, mais poss\u00e8dent des aptitudes quasiment impossibles pour des animaux du monde r\u00e9el, telles que cracher du feu ou encore g\u00e9n\u00e9rer de grandes quantit\u00e9s d'\u00e9lectricit\u00e9. Chaque esp\u00e8ce de Pok\u00e9mon se voit attribuer un type parmi les dix-huit existants, qui d\u00e9finissent ses forces et faiblesses aux attaques qu'il peut subir. Le fichier pokemon.csv contient une liste de pr\u00e8s de 400 pokemons, dont voici un extrait : Nom Points de vie Attaque D\u00e9fense Vitesse Type Draco 61 84 65 70 Dragon Carapuce 44 48 65 43 Eau Pikachu 35 55 40 90 Electrik Goupix 38 41 40 65 Feu Rattata 30 56 35 72 Normal On souhaite d\u00e9terminer les types des nouveaux Pokemon suivants : Nom Points de vie Attaque D\u00e9fense Vitesse Hippodocus 108 112 118 47 Profissor 95 50 100 75 Larvax 55 78 65 31 Neuneuch 80 98 25 49 KraKreKri 66 66 66 66 Partie 1 - Mod\u00e9liser un Pokemon On mod\u00e9lise un Pokemon par un dictionnaire. Exemple pour le 'Mucuscule' : 1 { 'Nom' : 'Mucuscule' , 'Vie' : 45 , 'Attaque' : 50 , 'D\u00e9fense' : 35 , 'Vitesse' : 40 , 'Type' : 'Dragon' } Donner la mod\u00e9lisation du Pok\u00e9mon Pikachu. En utilisant la distance de Euclidienne (Cf. Cours sur l'algorithme KNN ), v\u00e9rifier que la distance entre ... et ... est \u00e9gale \u00e0 .... Quelle est la distance entre ... et ... ? \u00c9crire la fonction distance qui prend deux \u00e9l\u00e8ves en param\u00e8tre et renvoie la distance entre ces deux Pokemon. Ne pas oublier de pr\u00e9ciser la documentation et donner au moins un test. Partie 2 - Charger les donn\u00e9es de la table Se reporter au chapitre sur les tables afin d'\u00e9crire une fonction qui permet de r\u00e9cup\u00e9rer les donn\u00e9es des Pokemon d'un fichier CSV pour les stocker dans une liste. On doit obtenir une liste de dictionnaires. Partie 3 - Trouver le Type majoritaire \u00c9crire une fonction frequence_des_types(table) qui prend en param\u00e8tre une table de Pkemon et qui renvoie le dictionnaire des fr\u00e9quences des types. Vous devez obtenir : 1 { 'Acier' : 5 , 'Combat' : 20 , 'Dragon' : 11 , 'Eau' : 59 , 'Electrik' : 30 , 'F\u00e9e' : 15 , 'Feu' : 39 , 'Glace' : 13 , 'Insecte' : 18 , 'Normal' : 62 , 'Plante' : 35 , 'Poison' : 17 , 'Psy' : 35 , 'Roche' : 9 , 'Sol' : 20 , 'Spectre' : 10 , 'T\u00e9n\u00e8bres' : 10 , 'Vol' : 2 } \u00c9crire une fonction type_majoritaire(table) qui prend en param\u00e8tre une table d'\u00e9l\u00e8ves et qui renvoie le nom du type le plus repr\u00e9sent\u00e9. Partie 4 - Algorithme des \\(k\\) plus proches voisins On dispose d'une table et d'un nouveau qui n'a pas encore de type. On cherche les \\(k\\) plus proches voisins de ce nouveau. \u00c9crire l'algorithme des \\(k\\) plus proches voisins. Impl\u00e9menter cet algorithme en python. Partie 5 - Attribuer un type On dispose d'une table et d'un nouveau qui n' a pas encore de type. On cherche \u00e0 lui attribuer un type. Impl\u00e9menter en python l'algorithme de l'attribution : Trouver dans la table les \\(k\\) plus proches voisins du nouvel \u00e9l\u00e8ve. Parmi ces proches voisins, trouver le type majoritaire. Renvoyer le type majoritaire. Varier les valeurs de \\(k\\) et les diff\u00e9rents types de distances. Le r\u00e9sultat reste-il stable ? Observer la table \"pokemon\", surtout les effectifs des diff\u00e9rents types. Pensez-vous que la table soit efficace pour entrainer une intelligence artificielle \u00e0 la reconnaissance des types pokemon ?","title":"Pokemon"},{"location":"premiere/bloc6/chapitre-04/pokemon/#pokemon","text":"","title":"Pokemon"},{"location":"premiere/bloc6/chapitre-04/pokemon/#description","text":"Le nom Pok\u00e9mon est issu de la contraction de Poke tto Mon sut\u0101, romanisation du japonais \u30dd\u30b1\u30c3\u30c8\u30e2\u30f3\u30b9\u30bf\u30fc1 traduisant l'anglais Pocket Monsters . Source : Pixabay Dans l'univers des Pok\u00e9mon, les animaux du monde r\u00e9el n'existent pas (ou tr\u00e8s peu). Le monde est peupl\u00e9 de Pok\u00e9mon, des cr\u00e9atures qui vivent en harmonie avec les humains, mais poss\u00e8dent des aptitudes quasiment impossibles pour des animaux du monde r\u00e9el, telles que cracher du feu ou encore g\u00e9n\u00e9rer de grandes quantit\u00e9s d'\u00e9lectricit\u00e9. Chaque esp\u00e8ce de Pok\u00e9mon se voit attribuer un type parmi les dix-huit existants, qui d\u00e9finissent ses forces et faiblesses aux attaques qu'il peut subir. Le fichier pokemon.csv contient une liste de pr\u00e8s de 400 pokemons, dont voici un extrait : Nom Points de vie Attaque D\u00e9fense Vitesse Type Draco 61 84 65 70 Dragon Carapuce 44 48 65 43 Eau Pikachu 35 55 40 90 Electrik Goupix 38 41 40 65 Feu Rattata 30 56 35 72 Normal On souhaite d\u00e9terminer les types des nouveaux Pokemon suivants : Nom Points de vie Attaque D\u00e9fense Vitesse Hippodocus 108 112 118 47 Profissor 95 50 100 75 Larvax 55 78 65 31 Neuneuch 80 98 25 49 KraKreKri 66 66 66 66","title":"Description"},{"location":"premiere/bloc6/chapitre-04/pokemon/#partie-1-modeliser-un-pokemon","text":"On mod\u00e9lise un Pokemon par un dictionnaire. Exemple pour le 'Mucuscule' : 1 { 'Nom' : 'Mucuscule' , 'Vie' : 45 , 'Attaque' : 50 , 'D\u00e9fense' : 35 , 'Vitesse' : 40 , 'Type' : 'Dragon' } Donner la mod\u00e9lisation du Pok\u00e9mon Pikachu. En utilisant la distance de Euclidienne (Cf. Cours sur l'algorithme KNN ), v\u00e9rifier que la distance entre ... et ... est \u00e9gale \u00e0 .... Quelle est la distance entre ... et ... ? \u00c9crire la fonction distance qui prend deux \u00e9l\u00e8ves en param\u00e8tre et renvoie la distance entre ces deux Pokemon. Ne pas oublier de pr\u00e9ciser la documentation et donner au moins un test.","title":"Partie 1 - Mod\u00e9liser un Pokemon"},{"location":"premiere/bloc6/chapitre-04/pokemon/#partie-2-charger-les-donnees-de-la-table","text":"Se reporter au chapitre sur les tables afin d'\u00e9crire une fonction qui permet de r\u00e9cup\u00e9rer les donn\u00e9es des Pokemon d'un fichier CSV pour les stocker dans une liste. On doit obtenir une liste de dictionnaires.","title":"Partie 2 - Charger les donn\u00e9es de la table"},{"location":"premiere/bloc6/chapitre-04/pokemon/#partie-3-trouver-le-type-majoritaire","text":"\u00c9crire une fonction frequence_des_types(table) qui prend en param\u00e8tre une table de Pkemon et qui renvoie le dictionnaire des fr\u00e9quences des types. Vous devez obtenir : 1 { 'Acier' : 5 , 'Combat' : 20 , 'Dragon' : 11 , 'Eau' : 59 , 'Electrik' : 30 , 'F\u00e9e' : 15 , 'Feu' : 39 , 'Glace' : 13 , 'Insecte' : 18 , 'Normal' : 62 , 'Plante' : 35 , 'Poison' : 17 , 'Psy' : 35 , 'Roche' : 9 , 'Sol' : 20 , 'Spectre' : 10 , 'T\u00e9n\u00e8bres' : 10 , 'Vol' : 2 } \u00c9crire une fonction type_majoritaire(table) qui prend en param\u00e8tre une table d'\u00e9l\u00e8ves et qui renvoie le nom du type le plus repr\u00e9sent\u00e9.","title":"Partie 3 - Trouver le Type majoritaire"},{"location":"premiere/bloc6/chapitre-04/pokemon/#partie-4-algorithme-des-k-plus-proches-voisins","text":"On dispose d'une table et d'un nouveau qui n'a pas encore de type. On cherche les \\(k\\) plus proches voisins de ce nouveau. \u00c9crire l'algorithme des \\(k\\) plus proches voisins. Impl\u00e9menter cet algorithme en python.","title":"Partie 4 - Algorithme des \\(k\\) plus proches voisins"},{"location":"premiere/bloc6/chapitre-04/pokemon/#partie-5-attribuer-un-type","text":"On dispose d'une table et d'un nouveau qui n' a pas encore de type. On cherche \u00e0 lui attribuer un type. Impl\u00e9menter en python l'algorithme de l'attribution : Trouver dans la table les \\(k\\) plus proches voisins du nouvel \u00e9l\u00e8ve. Parmi ces proches voisins, trouver le type majoritaire. Renvoyer le type majoritaire. Varier les valeurs de \\(k\\) et les diff\u00e9rents types de distances. Le r\u00e9sultat reste-il stable ? Observer la table \"pokemon\", surtout les effectifs des diff\u00e9rents types. Pensez-vous que la table soit efficace pour entrainer une intelligence artificielle \u00e0 la reconnaissance des types pokemon ?","title":"Partie 5 - Attribuer un type"},{"location":"premiere/bloc6/chapitre-05/","text":"Recherche dichotomique Source : Wikimedia Le jeu du Sphinx Vous \u00eates \"Le Sphinx\", un \u00eatre d\u00f4t\u00e9 de pouvoirs exceptionnel de divination. Vous demandez \u00e0 un passant de choisir un nombre entre 1 et 100, et le garde secret. Vous pariez avec ce passant 100\u20ac que vous pouvez d\u00e9terminer le nombre qu'il a choisi en moins de 7 propositions. Si vous trouvez le nombre en moins de 7 tentatives, vous gagnez 100\u20ac, sinon le passant gagne cette somme. \u00c0 chaque proposition fausse, le passant vous donne une indication \"c'est plus\" (si le nombre recherch\u00e9 est plus grand) ou \"c'est moins\". Pour impressionner le passant, vous lui proposez de choisir un nombre entre 1 et 4 milliards et vous certifiez pouvoir le trouver en moins de 32 propositions. Qui veut parier avec le Sphinx ... sachant qu'il gagne toujours ? La solution na\u00efve consiste \u00e0 \u00e9num\u00e9rer les nombres les uns apr\u00e8s les autres, sans utiliser les indications. On commence par 1, puis on poursuit avec 2, etc. Dans le pire des cas, on risque donc de compter jusqu'\u00e0 100...ou 4 milliards (on dira donc que la complexit\u00e9 de cet algorithme est de \\(\\mathcal{O}(n)\\) , \\(n\\) \u00e9tant le nombre de possibilit\u00e9s). Question Comment \"Le Sphinx\" proc\u00e8de-t-il ? R\u00e9ponse \"Le Sphinx\" n'a aucun don particulier...Il sait juste convertir un nombre en binaire et connait la recherche dichotomique. Imaginons que \"Le Sphinx\" commence par proposer 50. Quelque soit la r\u00e9ponse du passant, on peut \u00e9liminer 50 possibilit\u00e9s : Si c'est plus que 50, la solution est entre 50 et 100 ; Si c'est moins, la solution est entre 1 et 50. Et ainsi de suite... Soit l'algorithme \"Le Sphinx\" suivant : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Algorithme : \"Le Sphinx\" Entr\u00e9e : n , nombre maximal choisi par le passant Sortie : Le nombre de tentatives effectu\u00e9es D\u00e9but d \u2190 1 f \u2190 n mystere \u2190 demander ( 1 , n ) proposition \u2190 n // 2 tentative \u2190 1 Tant que d <= f ET proposition != mystere Si proposition > mystere alors d = proposition Sinon f = proposition Finsi proposition = ( d + f ) // 2 tentative \u2190 tentative + 1 FinTantQue Renvoyer tentative Fin Complexit\u00e9 Travail Convertir les nombres 100 et 4 milliards en binaire. \u00c9tablir un lien entre la repr\u00e9sentation binaire du nombre possibles de choix du passant et le nombre de tentatives maximales annonc\u00e9es par \"Le Sphinx\". Pour \u00e9tudier la complexit\u00e9, nous allons nous int\u00e9resser \u00e0 la boucle : au niveau de la boucle, combien doit-on effectuer d'it\u00e9rations pour un tableau de taille n dans le cas le plus d\u00e9favorable ? Sachant qu'\u00e0 chaque it\u00e9ration de la boucle on divise le tableau en 2, cela revient donc \u00e0 se demander combien de fois faut-il diviser le tableau en 2 pour obtenir, \u00e0 la fin, un tableau comportant un seul entier ? Autrement dit, combien de fois faut-il diviser n par 2 pour obtenir 1 ? Math\u00e9matiquement cela se traduit par l'\u00e9quation \\(\\frac{n}{2^a} = 1\\) avec \\(a\\) le nombre de fois qu'il faut diviser \\(n\\) par 2 pour obtenir 1. Il faut donc trouver \\(a\\) ! A ce stade il est n\u00e9cessaire d'introduire une nouvelle notion math\u00e9matique : le \"logarithme base 2\" not\u00e9 \\(\\log_2\\) . Par d\u00e9finition, \\(\\log_2(2^x) = x\\) Nous avons donc : \\(\\frac{n}{2^a} = 1 \\implies n=2^a \\implies \\log_2(n)=\\log_2(2^a)=a\\) , nous avons donc \\(a = \\log_2(n)\\) Cet algorithme est donc beaucoup plus efficace que l'algorithme na\u00eff. En effet, dans le pire des cas, pour un intervalle entre 1 et 100, seules \\(\\log_2(100)=7\\) propositions sont n\u00e9cessaires.","title":"Recherche dichotomique"},{"location":"premiere/bloc6/chapitre-05/#recherche-dichotomique","text":"Source : Wikimedia","title":"Recherche dichotomique"},{"location":"premiere/bloc6/chapitre-05/#le-jeu-du-sphinx","text":"Vous \u00eates \"Le Sphinx\", un \u00eatre d\u00f4t\u00e9 de pouvoirs exceptionnel de divination. Vous demandez \u00e0 un passant de choisir un nombre entre 1 et 100, et le garde secret. Vous pariez avec ce passant 100\u20ac que vous pouvez d\u00e9terminer le nombre qu'il a choisi en moins de 7 propositions. Si vous trouvez le nombre en moins de 7 tentatives, vous gagnez 100\u20ac, sinon le passant gagne cette somme. \u00c0 chaque proposition fausse, le passant vous donne une indication \"c'est plus\" (si le nombre recherch\u00e9 est plus grand) ou \"c'est moins\". Pour impressionner le passant, vous lui proposez de choisir un nombre entre 1 et 4 milliards et vous certifiez pouvoir le trouver en moins de 32 propositions. Qui veut parier avec le Sphinx ... sachant qu'il gagne toujours ? La solution na\u00efve consiste \u00e0 \u00e9num\u00e9rer les nombres les uns apr\u00e8s les autres, sans utiliser les indications. On commence par 1, puis on poursuit avec 2, etc. Dans le pire des cas, on risque donc de compter jusqu'\u00e0 100...ou 4 milliards (on dira donc que la complexit\u00e9 de cet algorithme est de \\(\\mathcal{O}(n)\\) , \\(n\\) \u00e9tant le nombre de possibilit\u00e9s). Question Comment \"Le Sphinx\" proc\u00e8de-t-il ? R\u00e9ponse \"Le Sphinx\" n'a aucun don particulier...Il sait juste convertir un nombre en binaire et connait la recherche dichotomique. Imaginons que \"Le Sphinx\" commence par proposer 50. Quelque soit la r\u00e9ponse du passant, on peut \u00e9liminer 50 possibilit\u00e9s : Si c'est plus que 50, la solution est entre 50 et 100 ; Si c'est moins, la solution est entre 1 et 50. Et ainsi de suite... Soit l'algorithme \"Le Sphinx\" suivant : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Algorithme : \"Le Sphinx\" Entr\u00e9e : n , nombre maximal choisi par le passant Sortie : Le nombre de tentatives effectu\u00e9es D\u00e9but d \u2190 1 f \u2190 n mystere \u2190 demander ( 1 , n ) proposition \u2190 n // 2 tentative \u2190 1 Tant que d <= f ET proposition != mystere Si proposition > mystere alors d = proposition Sinon f = proposition Finsi proposition = ( d + f ) // 2 tentative \u2190 tentative + 1 FinTantQue Renvoyer tentative Fin","title":"Le jeu du Sphinx"},{"location":"premiere/bloc6/chapitre-05/#complexite","text":"Travail Convertir les nombres 100 et 4 milliards en binaire. \u00c9tablir un lien entre la repr\u00e9sentation binaire du nombre possibles de choix du passant et le nombre de tentatives maximales annonc\u00e9es par \"Le Sphinx\". Pour \u00e9tudier la complexit\u00e9, nous allons nous int\u00e9resser \u00e0 la boucle : au niveau de la boucle, combien doit-on effectuer d'it\u00e9rations pour un tableau de taille n dans le cas le plus d\u00e9favorable ? Sachant qu'\u00e0 chaque it\u00e9ration de la boucle on divise le tableau en 2, cela revient donc \u00e0 se demander combien de fois faut-il diviser le tableau en 2 pour obtenir, \u00e0 la fin, un tableau comportant un seul entier ? Autrement dit, combien de fois faut-il diviser n par 2 pour obtenir 1 ? Math\u00e9matiquement cela se traduit par l'\u00e9quation \\(\\frac{n}{2^a} = 1\\) avec \\(a\\) le nombre de fois qu'il faut diviser \\(n\\) par 2 pour obtenir 1. Il faut donc trouver \\(a\\) ! A ce stade il est n\u00e9cessaire d'introduire une nouvelle notion math\u00e9matique : le \"logarithme base 2\" not\u00e9 \\(\\log_2\\) . Par d\u00e9finition, \\(\\log_2(2^x) = x\\) Nous avons donc : \\(\\frac{n}{2^a} = 1 \\implies n=2^a \\implies \\log_2(n)=\\log_2(2^a)=a\\) , nous avons donc \\(a = \\log_2(n)\\) Cet algorithme est donc beaucoup plus efficace que l'algorithme na\u00eff. En effet, dans le pire des cas, pour un intervalle entre 1 et 100, seules \\(\\log_2(100)=7\\) propositions sont n\u00e9cessaires.","title":"Complexit\u00e9"},{"location":"premiere/bloc6/chapitre-05/Le%20tr%C3%A9sor%20et%20la%20pi%C3%A8ce/","text":"Le tr\u00e9sor et la fausse pi\u00e8ce Description Vous \u00eates un.e pirate qui vient de r\u00e9cup\u00e9rer sa part du tr\u00e9sor constitu\u00e9 d'un beau tas de pi\u00e8ce d'or. H\u00e9las, vous avez vent d'une supercherie : l'une des pi\u00e8ces n'est pas en or massif, mais en un alliage plus l\u00e9ger que l'or et est siplement plaqu\u00e9e or, pour qu'on ne puisse pas la distinguer visuellement des autres pi\u00e8ces. Le seul signe distinctif est qu'elle est plus l\u00e9g\u00e8re que les autres. Vous n'avez pas \u00e0 votre disposition un atelier de chimiste ni un laboratoire scientifique vous permettant d'\u00e9tudier tr\u00e8s pr\u00e9cis\u00e9ment ces pi\u00e8ces, mais simplement une balance \u00e0 plateaux sans aucun poids, comme celle donn\u00e9e ci-dessous : Pouvez-vous, avec cette simple balance, retrouver la fausse pi\u00e8ce ? Partie 1 - Exemples pour un petit nombre de pi\u00e8ces dans le tr\u00e9sor Expliquer comment proc\u00e9der avec 2 pi\u00e8ces pour retrouver la fausse pi\u00e8ce. Expliquer comment proc\u00e9der en une seule pes\u00e9e quand il y a 3 pi\u00e8ces. Expliquer comment proc\u00e9der en deux pes\u00e9es quand il y a 4 pi\u00e8ces. Examinons maintenant comment faire avec 9 pi\u00e8ces. On proc\u00e8de en divisant les 9 pi\u00e8ces en 3 tas, et selon la r\u00e9ponse de la balance, on identifie le tas contenant la pi\u00e8ce plus l\u00e9g\u00e8re, comme indiqu\u00e9 sur la figure 1. (a) Premier cas (b) Second cas Figure 1 - Exemple avec 9 pi\u00e8ces. Dans le cas illustr\u00e9 en figure 1.a, le tas contenant la pi\u00e8ce la plus l\u00e9g\u00e8re est le tas qui n'est pas sur le plateau. On identifie, en une pes\u00e9e suppl\u00e9mentaire, la pi\u00e8ce la plus l\u00e9g\u00e8re parmi les 3 pi\u00e8ces de ce tas. Dans la cas illustr\u00e9 en figure 1.b, le tas contenant la pi\u00e8ce la plus l\u00e9g\u00e8re est le tas qui est sur le plateau de droite. On identifie, en une pes\u00e9e suppl\u00e9mentaire, la pi\u00e8ce la plus l\u00e9g\u00e8re parmi les 3 pi\u00e8ces de ce tas. On peut donc identifier la fausse pi\u00e8ce en deux pes\u00e9es. Examinons maintenant le cas g\u00e9n\u00e9ral d'un tr\u00e9sor de \\(n\\) pi\u00e8ces. Partie 2 - Cas g\u00e9n\u00e9ral d'un tr\u00e9sor de \\(n\\) pi\u00e8ces Dans le cas o\u00f9 \\(n\\) est une puissance de 3 ( \\(n = 3^k, k\\) un entier naturel) : \u00e9crire un algorithme it\u00e9ratif qui permet d'identifier, parmi \\(n\\) pi\u00e8ces, la pi\u00e8ce fausse qui est plus l\u00e9g\u00e8re que les autres. Expliquer comment votre algorithme fonctionne avec 27 pi\u00e8ces ( Aide : on devrait obtenir le r\u00e9sultat en 3 pes\u00e9es ) Dans le cas d'un nombre quelconque de pi\u00e8ces, adapter l'algorithme pr\u00e9c\u00e9dent pour identifier la fausse pi\u00e8ce. Partie 3 - Dichotomie VS Trichotomie La strat\u00e9gie de l'algorithme des questions pr\u00e9c\u00e9dentes, qui consiste \u00e0 diviser l'ensemble de \\(n\\) pi\u00e8ces en 3 tas, est de type \"diviser pour r\u00e8gner\" et s'apparente \u00e0 la recherche trichotomique. Afin de comparer avec la recherche dichotomique, remplir la tableau suivant, en indiquant, pour chaque m\u00e9thode et pour diff\u00e9rentes valeurs de \\(n\\) , le nombre maximal de pes\u00e9es. \\(n\\) Dichotomie Trichotomie 2 3 6 8 9 16 27 Quelle est, d'apr\u00e8s vous, la m\u00e9thode la plus efficace en nombre de pes\u00e9es ? En transposant les notions de variants et d'invariants, vues pour les algorithmes de recherche dichotomique, donner un sch\u00e9ma de preuve de terminaison, correction et complexit\u00e9 de l'algorithme par trichotomie. Partie 4 - Implantation en Python Implanter l'algorithme qui permet d'identifier la fausse pi\u00e8ce en Python. (_Aide : vous pouvez utiliser les fonctions obtenir_tresor , decouper_tas et peser_tas du module tresor.py ) Implanter votre propre module tresor.py , en impl\u00e9mentant les fonctions obtenir_tresor , decouper_tas et peser_tas , en consid\u00e9rant un tr\u00e9sor comme un tableau d'entiers, dont les bonnes pi\u00e8ces ont la valeur 1 et la fausse pi\u00e8ce la valeur 0. \u00c9crire une version r\u00e9cursive de l'algorithme qui identifie, parmi \\(n\\) pi\u00e8ces, la pi\u00e8ce fausse. Implanter cet algorithme en python.","title":"Le tr\u00e9sor et la fausse pi\u00e8ce"},{"location":"premiere/bloc6/chapitre-05/Le%20tr%C3%A9sor%20et%20la%20pi%C3%A8ce/#le-tresor-et-la-fausse-piece","text":"","title":"Le tr\u00e9sor et la fausse pi\u00e8ce"},{"location":"premiere/bloc6/chapitre-05/Le%20tr%C3%A9sor%20et%20la%20pi%C3%A8ce/#description","text":"Vous \u00eates un.e pirate qui vient de r\u00e9cup\u00e9rer sa part du tr\u00e9sor constitu\u00e9 d'un beau tas de pi\u00e8ce d'or. H\u00e9las, vous avez vent d'une supercherie : l'une des pi\u00e8ces n'est pas en or massif, mais en un alliage plus l\u00e9ger que l'or et est siplement plaqu\u00e9e or, pour qu'on ne puisse pas la distinguer visuellement des autres pi\u00e8ces. Le seul signe distinctif est qu'elle est plus l\u00e9g\u00e8re que les autres. Vous n'avez pas \u00e0 votre disposition un atelier de chimiste ni un laboratoire scientifique vous permettant d'\u00e9tudier tr\u00e8s pr\u00e9cis\u00e9ment ces pi\u00e8ces, mais simplement une balance \u00e0 plateaux sans aucun poids, comme celle donn\u00e9e ci-dessous : Pouvez-vous, avec cette simple balance, retrouver la fausse pi\u00e8ce ?","title":"Description"},{"location":"premiere/bloc6/chapitre-05/Le%20tr%C3%A9sor%20et%20la%20pi%C3%A8ce/#partie-1-exemples-pour-un-petit-nombre-de-pieces-dans-le-tresor","text":"Expliquer comment proc\u00e9der avec 2 pi\u00e8ces pour retrouver la fausse pi\u00e8ce. Expliquer comment proc\u00e9der en une seule pes\u00e9e quand il y a 3 pi\u00e8ces. Expliquer comment proc\u00e9der en deux pes\u00e9es quand il y a 4 pi\u00e8ces. Examinons maintenant comment faire avec 9 pi\u00e8ces. On proc\u00e8de en divisant les 9 pi\u00e8ces en 3 tas, et selon la r\u00e9ponse de la balance, on identifie le tas contenant la pi\u00e8ce plus l\u00e9g\u00e8re, comme indiqu\u00e9 sur la figure 1. (a) Premier cas (b) Second cas Figure 1 - Exemple avec 9 pi\u00e8ces. Dans le cas illustr\u00e9 en figure 1.a, le tas contenant la pi\u00e8ce la plus l\u00e9g\u00e8re est le tas qui n'est pas sur le plateau. On identifie, en une pes\u00e9e suppl\u00e9mentaire, la pi\u00e8ce la plus l\u00e9g\u00e8re parmi les 3 pi\u00e8ces de ce tas. Dans la cas illustr\u00e9 en figure 1.b, le tas contenant la pi\u00e8ce la plus l\u00e9g\u00e8re est le tas qui est sur le plateau de droite. On identifie, en une pes\u00e9e suppl\u00e9mentaire, la pi\u00e8ce la plus l\u00e9g\u00e8re parmi les 3 pi\u00e8ces de ce tas. On peut donc identifier la fausse pi\u00e8ce en deux pes\u00e9es. Examinons maintenant le cas g\u00e9n\u00e9ral d'un tr\u00e9sor de \\(n\\) pi\u00e8ces.","title":"Partie 1 - Exemples pour un petit nombre de pi\u00e8ces dans le tr\u00e9sor"},{"location":"premiere/bloc6/chapitre-05/Le%20tr%C3%A9sor%20et%20la%20pi%C3%A8ce/#partie-2-cas-general-dun-tresor-de-n-pieces","text":"Dans le cas o\u00f9 \\(n\\) est une puissance de 3 ( \\(n = 3^k, k\\) un entier naturel) : \u00e9crire un algorithme it\u00e9ratif qui permet d'identifier, parmi \\(n\\) pi\u00e8ces, la pi\u00e8ce fausse qui est plus l\u00e9g\u00e8re que les autres. Expliquer comment votre algorithme fonctionne avec 27 pi\u00e8ces ( Aide : on devrait obtenir le r\u00e9sultat en 3 pes\u00e9es ) Dans le cas d'un nombre quelconque de pi\u00e8ces, adapter l'algorithme pr\u00e9c\u00e9dent pour identifier la fausse pi\u00e8ce.","title":"Partie 2 - Cas g\u00e9n\u00e9ral d'un tr\u00e9sor de \\(n\\) pi\u00e8ces"},{"location":"premiere/bloc6/chapitre-05/Le%20tr%C3%A9sor%20et%20la%20pi%C3%A8ce/#partie-3-dichotomie-vs-trichotomie","text":"La strat\u00e9gie de l'algorithme des questions pr\u00e9c\u00e9dentes, qui consiste \u00e0 diviser l'ensemble de \\(n\\) pi\u00e8ces en 3 tas, est de type \"diviser pour r\u00e8gner\" et s'apparente \u00e0 la recherche trichotomique. Afin de comparer avec la recherche dichotomique, remplir la tableau suivant, en indiquant, pour chaque m\u00e9thode et pour diff\u00e9rentes valeurs de \\(n\\) , le nombre maximal de pes\u00e9es. \\(n\\) Dichotomie Trichotomie 2 3 6 8 9 16 27 Quelle est, d'apr\u00e8s vous, la m\u00e9thode la plus efficace en nombre de pes\u00e9es ? En transposant les notions de variants et d'invariants, vues pour les algorithmes de recherche dichotomique, donner un sch\u00e9ma de preuve de terminaison, correction et complexit\u00e9 de l'algorithme par trichotomie.","title":"Partie 3 - Dichotomie VS Trichotomie"},{"location":"premiere/bloc6/chapitre-05/Le%20tr%C3%A9sor%20et%20la%20pi%C3%A8ce/#partie-4-implantation-en-python","text":"Implanter l'algorithme qui permet d'identifier la fausse pi\u00e8ce en Python. (_Aide : vous pouvez utiliser les fonctions obtenir_tresor , decouper_tas et peser_tas du module tresor.py ) Implanter votre propre module tresor.py , en impl\u00e9mentant les fonctions obtenir_tresor , decouper_tas et peser_tas , en consid\u00e9rant un tr\u00e9sor comme un tableau d'entiers, dont les bonnes pi\u00e8ces ont la valeur 1 et la fausse pi\u00e8ce la valeur 0. \u00c9crire une version r\u00e9cursive de l'algorithme qui identifie, parmi \\(n\\) pi\u00e8ces, la pi\u00e8ce fausse. Implanter cet algorithme en python.","title":"Partie 4 - Implantation en Python"},{"location":"premiere/bloc6/chapitre-06/","text":"Algorithmes gloutons Source : giphy.com Probl\u00e8me du sac \u00e0 dos Un cambrioleur poss\u00e8de un sac \u00e0 dos d'une contenance maximum de 30 Kg. Au cours d'un de ses cambriolages, il a la possibilit\u00e9 de d\u00e9rober 4 objets A, B, C et D. Voici un tableau qui r\u00e9sume les caract\u00e9ristiques de ces objets : objet A B C D Masse 13 kg 12 kg 8 kg 10 kg Valeur marchande 700 \u20ac 400 \u20ac 300 \u20ac 300 \u20ac Travail D\u00e9terminer les objets que le cambrioleur aura int\u00e9r\u00eat \u00e0 d\u00e9rober, sachant que : Tous les objets d\u00e9rob\u00e9s devront tenir dans le sac \u00e0 dos (30 Kg maxi), le cambrioleur cherche \u00e0 obtenir un gain maximum. Analyse Ce genre de probl\u00e8me est un grand classique en informatique, on parle de probl\u00e8me d'optimisation. Il existe toujours plusieurs solutions possibles \u00e0 un probl\u00e8me d'optimisation (dans le probl\u00e8me du sac \u00e0 dos, on peut choisir A+B ou A+C ou B+C+D... toutes les combinaisons sont possibles \u00e0 partir du moment o\u00f9 la masse totale ne d\u00e9passe pas 30 Kg), mais on ne cherche pas n'importe quelle solution, on cherche une solution dite optimale : dans notre exemple on cherche le plus grand gain possible. Souvent, dans les probl\u00e8mes d'optimisation, il n'existe pas une solution optimale, mais plusieurs solutions optimales, r\u00e9soudre un probl\u00e8me d'optimisation c'est donc trouver une des solutions optimales. Quel est l'algorithme qui permet de trouver une solution optimale au probl\u00e8me du sac \u00e0 dos ? En apparence, la solution la plus simple dans le cas du sac \u00e0 dos serait d'\u00e9crire un algorithme qui calcule toutes les combinaisons d'objets possibles et qui retient les solutions qui offrent un gain maximum. Travail Lister les combinaisons \u00e0 tester dans l'illustration du probl\u00e8me du sac \u00e0 dos avec 4 objets ? Analyse En g\u00e9n\u00e9ralisant le r\u00e9sultat obtenu, soit \\(C_{sac}\\) , le nombre de combinaisons \u00e0 tester pour le probl\u00e8me du sac \u00e0 objets avec \\(n\\) objets est d\u00e9finit par : \\[C_{sac} = \\sum_{i = 0}^{n} C_{i}^{n} = \\sum_{i = 0}^{n} \\dfrac{n!}{i!\\,(n - i)!}\\] Or, d'apr\u00e8s la formule du bin\u00f4me de Newton, \\[ \\sum_{i = 0}^{n} C_i^n = a^n \\mbox{, o\u00f9 } a \\mbox{ est une constante.}\\] Autrement dit, un algorithme qui testerait toutes les combinaisons possibles aurait une complexit\u00e9 en \\(\\mathcal{O}(a^n)\\) , ce qui est inefficace dans la pratique. \u00c0 la place de cette m\u00e9thode \"je teste toutes les possibilit\u00e9s\", il est possible d'utiliser une m\u00e9thode dite gloutonne (greedy en anglais). D\u00e9finition D\u00e9finition Le principe de la m\u00e9thode gloutonne est de, \u00e0 chaque \u00e9tape de la r\u00e9solution du probl\u00e8me, faire le choix qui semble le plus pertinent sur le moment, avec l'espoir qu'au bout du compte, cela nous conduira vers une solution optimale du probl\u00e8me \u00e0 r\u00e9soudre. Chaque choix fait s\u00e9lectionne l\u2019une des meilleures possibilit\u00e9s et ne remet jamais en cause les choix pr\u00e9c\u00e9dents. Appliquons une m\u00e9thode gloutonne \u00e0 la r\u00e9solution du probl\u00e8me du sac \u00e0 dos, sachant que l'on cherche \u00e0 maximiser le gain. Commen\u00e7ons par \u00e9tablir un tableau nous donnant la \"valeur massique\" de chaque objet (pour chaque objet on divise sa valeur par sa masse) : Objet A B C D Valeur massique 54 \u20ac/kg 33 \u20ac/kg 38 \u20ac/kg 30 \u20ac/kg On classe ensuite les objets par ordre d\u00e9croissant de valeur massique, Enfin, on remplit le sac en prenant les objets dans l'ordre et en s'arr\u00eatant d\u00e8s que la masse limite est atteinte. \u21d2 C'est ici que ce fait \"le choix glouton\", \u00e0 chaque \u00e9tape, on prend l'objet ayant le rapport \"valeur-masse\" le plus int\u00e9ressant au vu des objectifs. Travail Selon la d\u00e9marche ci-dessus, \u00e9crire l'algorithme remplir_sac , qui prend un tableau d'objets (poids, valeur) et renvoie la collection d'objets s\u00e9lectionn\u00e9s. Calculer la complexit\u00e9 de l'algorithme en fonction du nombre de tests. En appliquant l'algorithme sur l'exemple de d\u00e9part, le sac est compos\u00e9 de 2 objets : A et C pour un montant total de 1000 \u20ac et une masse totale de 21 Kg. La solution trouv\u00e9e ci-dessus est-elle optimale ? On constate rapidement que la r\u00e9ponse est non, car le couple A + B permet d'atteindre une valeur de 1100 \u20ac pour une masse de 25 Kg. Dans notre probl\u00e8me, la m\u00e9thode gloutonne ne nous donne pas une solution optimale. Plus g\u00e9n\u00e9ralement , il est important de bien comprendre qu'un algorithme glouton ne donne pas forcement une solution optimale. Pour certains types de probl\u00e8mes, il est possible de d\u00e9montrer qu'un algorithme glouton donnera toujours une solution optimale, mais cela d\u00e9passe largement le cadre de ce cours. Probl\u00e8me du rendu de monnaie Vous \u00eates des commer\u00e7ants, vous avez \u00e0 votre disposition un nombre illimit\u00e9 de pi\u00e8ces de : 1, 2, 5, 10, 20, 50 centimes et 1, 2 \u20ac. Vous devez rendre la monnaie \u00e0 un client \u00e0 l'aide de ces pi\u00e8ces. La contrainte est d'utiliser le moins de pi\u00e8ces possible. Travail Trouver une m\u00e9thode gloutonne et \u00e9crire l'algorithme permettant d'effectuer un rendu de monnaie (en utilisant le moins possible de pi\u00e8ces). Vous devez rendre la somme de 2,63 \u20ac, appliquez la m\u00e9thode que vous venez de mettre au point. Combien de pi\u00e8ces avez-vous utilis\u00e9es ?","title":"Algorithmes gloutons"},{"location":"premiere/bloc6/chapitre-06/#algorithmes-gloutons","text":"Source : giphy.com","title":"Algorithmes gloutons"},{"location":"premiere/bloc6/chapitre-06/#probleme-du-sac-a-dos","text":"Un cambrioleur poss\u00e8de un sac \u00e0 dos d'une contenance maximum de 30 Kg. Au cours d'un de ses cambriolages, il a la possibilit\u00e9 de d\u00e9rober 4 objets A, B, C et D. Voici un tableau qui r\u00e9sume les caract\u00e9ristiques de ces objets : objet A B C D Masse 13 kg 12 kg 8 kg 10 kg Valeur marchande 700 \u20ac 400 \u20ac 300 \u20ac 300 \u20ac Travail D\u00e9terminer les objets que le cambrioleur aura int\u00e9r\u00eat \u00e0 d\u00e9rober, sachant que : Tous les objets d\u00e9rob\u00e9s devront tenir dans le sac \u00e0 dos (30 Kg maxi), le cambrioleur cherche \u00e0 obtenir un gain maximum. Analyse Ce genre de probl\u00e8me est un grand classique en informatique, on parle de probl\u00e8me d'optimisation. Il existe toujours plusieurs solutions possibles \u00e0 un probl\u00e8me d'optimisation (dans le probl\u00e8me du sac \u00e0 dos, on peut choisir A+B ou A+C ou B+C+D... toutes les combinaisons sont possibles \u00e0 partir du moment o\u00f9 la masse totale ne d\u00e9passe pas 30 Kg), mais on ne cherche pas n'importe quelle solution, on cherche une solution dite optimale : dans notre exemple on cherche le plus grand gain possible. Souvent, dans les probl\u00e8mes d'optimisation, il n'existe pas une solution optimale, mais plusieurs solutions optimales, r\u00e9soudre un probl\u00e8me d'optimisation c'est donc trouver une des solutions optimales. Quel est l'algorithme qui permet de trouver une solution optimale au probl\u00e8me du sac \u00e0 dos ? En apparence, la solution la plus simple dans le cas du sac \u00e0 dos serait d'\u00e9crire un algorithme qui calcule toutes les combinaisons d'objets possibles et qui retient les solutions qui offrent un gain maximum. Travail Lister les combinaisons \u00e0 tester dans l'illustration du probl\u00e8me du sac \u00e0 dos avec 4 objets ? Analyse En g\u00e9n\u00e9ralisant le r\u00e9sultat obtenu, soit \\(C_{sac}\\) , le nombre de combinaisons \u00e0 tester pour le probl\u00e8me du sac \u00e0 objets avec \\(n\\) objets est d\u00e9finit par : \\[C_{sac} = \\sum_{i = 0}^{n} C_{i}^{n} = \\sum_{i = 0}^{n} \\dfrac{n!}{i!\\,(n - i)!}\\] Or, d'apr\u00e8s la formule du bin\u00f4me de Newton, \\[ \\sum_{i = 0}^{n} C_i^n = a^n \\mbox{, o\u00f9 } a \\mbox{ est une constante.}\\] Autrement dit, un algorithme qui testerait toutes les combinaisons possibles aurait une complexit\u00e9 en \\(\\mathcal{O}(a^n)\\) , ce qui est inefficace dans la pratique. \u00c0 la place de cette m\u00e9thode \"je teste toutes les possibilit\u00e9s\", il est possible d'utiliser une m\u00e9thode dite gloutonne (greedy en anglais).","title":"Probl\u00e8me du sac \u00e0 dos"},{"location":"premiere/bloc6/chapitre-06/#definition","text":"D\u00e9finition Le principe de la m\u00e9thode gloutonne est de, \u00e0 chaque \u00e9tape de la r\u00e9solution du probl\u00e8me, faire le choix qui semble le plus pertinent sur le moment, avec l'espoir qu'au bout du compte, cela nous conduira vers une solution optimale du probl\u00e8me \u00e0 r\u00e9soudre. Chaque choix fait s\u00e9lectionne l\u2019une des meilleures possibilit\u00e9s et ne remet jamais en cause les choix pr\u00e9c\u00e9dents. Appliquons une m\u00e9thode gloutonne \u00e0 la r\u00e9solution du probl\u00e8me du sac \u00e0 dos, sachant que l'on cherche \u00e0 maximiser le gain. Commen\u00e7ons par \u00e9tablir un tableau nous donnant la \"valeur massique\" de chaque objet (pour chaque objet on divise sa valeur par sa masse) : Objet A B C D Valeur massique 54 \u20ac/kg 33 \u20ac/kg 38 \u20ac/kg 30 \u20ac/kg On classe ensuite les objets par ordre d\u00e9croissant de valeur massique, Enfin, on remplit le sac en prenant les objets dans l'ordre et en s'arr\u00eatant d\u00e8s que la masse limite est atteinte. \u21d2 C'est ici que ce fait \"le choix glouton\", \u00e0 chaque \u00e9tape, on prend l'objet ayant le rapport \"valeur-masse\" le plus int\u00e9ressant au vu des objectifs. Travail Selon la d\u00e9marche ci-dessus, \u00e9crire l'algorithme remplir_sac , qui prend un tableau d'objets (poids, valeur) et renvoie la collection d'objets s\u00e9lectionn\u00e9s. Calculer la complexit\u00e9 de l'algorithme en fonction du nombre de tests. En appliquant l'algorithme sur l'exemple de d\u00e9part, le sac est compos\u00e9 de 2 objets : A et C pour un montant total de 1000 \u20ac et une masse totale de 21 Kg. La solution trouv\u00e9e ci-dessus est-elle optimale ? On constate rapidement que la r\u00e9ponse est non, car le couple A + B permet d'atteindre une valeur de 1100 \u20ac pour une masse de 25 Kg. Dans notre probl\u00e8me, la m\u00e9thode gloutonne ne nous donne pas une solution optimale. Plus g\u00e9n\u00e9ralement , il est important de bien comprendre qu'un algorithme glouton ne donne pas forcement une solution optimale. Pour certains types de probl\u00e8mes, il est possible de d\u00e9montrer qu'un algorithme glouton donnera toujours une solution optimale, mais cela d\u00e9passe largement le cadre de ce cours.","title":"D\u00e9finition"},{"location":"premiere/bloc6/chapitre-06/#probleme-du-rendu-de-monnaie","text":"Vous \u00eates des commer\u00e7ants, vous avez \u00e0 votre disposition un nombre illimit\u00e9 de pi\u00e8ces de : 1, 2, 5, 10, 20, 50 centimes et 1, 2 \u20ac. Vous devez rendre la monnaie \u00e0 un client \u00e0 l'aide de ces pi\u00e8ces. La contrainte est d'utiliser le moins de pi\u00e8ces possible. Travail Trouver une m\u00e9thode gloutonne et \u00e9crire l'algorithme permettant d'effectuer un rendu de monnaie (en utilisant le moins possible de pi\u00e8ces). Vous devez rendre la somme de 2,63 \u20ac, appliquez la m\u00e9thode que vous venez de mettre au point. Combien de pi\u00e8ces avez-vous utilis\u00e9es ?","title":"Probl\u00e8me du rendu de monnaie"},{"location":"terminale/","text":"Sommaire D\u00e9coupage Le cours de terminale est d\u00e9coup\u00e9 en 5 blocs : Bloc Contenu 1 Structures de donn\u00e9es 2 Base de donn\u00e9es 3 Architectures mat\u00e9rielles, syst\u00e8mes d\u2019exploitation et r\u00e9seaux 4 Langages et programmation 5 Algorithmique Progression TODO","title":"Sommaire"},{"location":"terminale/#sommaire","text":"","title":"Sommaire"},{"location":"terminale/#decoupage","text":"Le cours de terminale est d\u00e9coup\u00e9 en 5 blocs : Bloc Contenu 1 Structures de donn\u00e9es 2 Base de donn\u00e9es 3 Architectures mat\u00e9rielles, syst\u00e8mes d\u2019exploitation et r\u00e9seaux 4 Langages et programmation 5 Algorithmique","title":"D\u00e9coupage"},{"location":"terminale/#progression","text":"TODO","title":"Progression"},{"location":"terminale/bloc1/","text":"Sommaire Bloc 1 - Structures de donn\u00e9es Atomium de Bruxelles Source : Wikip\u00e9dia Pr\u00e9ambule En premi\u00e8re, nous avons manipul\u00e9 les structures tel que les tableaux, les tuples ou les dictionnaires. Cette ann\u00e9e, nous allons aborder des structures qui ont d'autres propri\u00e9t\u00e9s et permettant de mod\u00e9liser de nouveaux types de relations. Organisation Le bloc se d\u00e9compose en 3 chapitres : Chapitre 1 : Liste, Pile, File Chapitre 2 : Graphes Chapitre 3 : Arbres Programme Officiel Contenus Capacit\u00e9s attendues Structures de donn\u00e9es, interface et impl\u00e9mentation. Sp\u00e9cifier une structure de donn\u00e9es par son interface. Distinguer interface et impl\u00e9mentation. \u00c9crire plusieurs impl\u00e9mentations d\u2019une m\u00eame structure de donn\u00e9es. Vocabulaire de la programmation objet : classes, attributs, m\u00e9thodes, objets. \u00c9crire la d\u00e9finition d\u2019une classe. Acc\u00e9der aux attributs et m\u00e9thodes d\u2019une classe. Listes, piles, files : structures lin\u00e9aires. Dictionnaires, index et cl\u00e9. Distinguer des structures par le jeu des m\u00e9thodes qui les caract\u00e9risent. Choisir une structure de donn\u00e9es adapt\u00e9e \u00e0 la situation \u00e0 mod\u00e9liser. Distinguer la recherche d\u2019une valeur dans une liste et dans un dictionnaire. Arbres : structures hi\u00e9rarchiques.Arbres binaires : n\u0153uds, racines, feuilles, sous-arbres gauches, sous-arbres droits. Identifier des situations n\u00e9cessitant une structure de donn\u00e9es arborescentes. \u00c9valuer quelques mesures des arbres binaires (taille, encadrement de la hauteur, etc.). Graphes : structures relationnelles. Sommets, arcs, ar\u00eates, graphes orient\u00e9s ou non orient\u00e9s. Mod\u00e9liser des situations sous forme de graphes. \u00c9crire les impl\u00e9mentations correspondantes d\u2019un graphe : matrice d\u2019adjacence, liste de successeurs/de pr\u00e9d\u00e9cesseurs. Passer d\u2019une repr\u00e9sentation \u00e0 une autre. \\","title":"Sommaire"},{"location":"terminale/bloc1/#sommaire","text":"","title":"Sommaire"},{"location":"terminale/bloc1/#bloc-1-structures-de-donnees","text":"Atomium de Bruxelles Source : Wikip\u00e9dia","title":"Bloc 1 - Structures de donn\u00e9es"},{"location":"terminale/bloc1/#preambule","text":"En premi\u00e8re, nous avons manipul\u00e9 les structures tel que les tableaux, les tuples ou les dictionnaires. Cette ann\u00e9e, nous allons aborder des structures qui ont d'autres propri\u00e9t\u00e9s et permettant de mod\u00e9liser de nouveaux types de relations.","title":"Pr\u00e9ambule"},{"location":"terminale/bloc1/#organisation","text":"Le bloc se d\u00e9compose en 3 chapitres : Chapitre 1 : Liste, Pile, File Chapitre 2 : Graphes Chapitre 3 : Arbres","title":"Organisation"},{"location":"terminale/bloc1/#programme-officiel","text":"Contenus Capacit\u00e9s attendues Structures de donn\u00e9es, interface et impl\u00e9mentation. Sp\u00e9cifier une structure de donn\u00e9es par son interface. Distinguer interface et impl\u00e9mentation. \u00c9crire plusieurs impl\u00e9mentations d\u2019une m\u00eame structure de donn\u00e9es. Vocabulaire de la programmation objet : classes, attributs, m\u00e9thodes, objets. \u00c9crire la d\u00e9finition d\u2019une classe. Acc\u00e9der aux attributs et m\u00e9thodes d\u2019une classe. Listes, piles, files : structures lin\u00e9aires. Dictionnaires, index et cl\u00e9. Distinguer des structures par le jeu des m\u00e9thodes qui les caract\u00e9risent. Choisir une structure de donn\u00e9es adapt\u00e9e \u00e0 la situation \u00e0 mod\u00e9liser. Distinguer la recherche d\u2019une valeur dans une liste et dans un dictionnaire. Arbres : structures hi\u00e9rarchiques.Arbres binaires : n\u0153uds, racines, feuilles, sous-arbres gauches, sous-arbres droits. Identifier des situations n\u00e9cessitant une structure de donn\u00e9es arborescentes. \u00c9valuer quelques mesures des arbres binaires (taille, encadrement de la hauteur, etc.). Graphes : structures relationnelles. Sommets, arcs, ar\u00eates, graphes orient\u00e9s ou non orient\u00e9s. Mod\u00e9liser des situations sous forme de graphes. \u00c9crire les impl\u00e9mentations correspondantes d\u2019un graphe : matrice d\u2019adjacence, liste de successeurs/de pr\u00e9d\u00e9cesseurs. Passer d\u2019une repr\u00e9sentation \u00e0 une autre. \\","title":"Programme Officiel"},{"location":"terminale/bloc1/chapitre-01/FILE/","text":"Structure : File Source : Pixabay.com Contexte La structure d\u2019une file d'attente \u00e0 une caisse ou un guichet, o\u00f9 les personnes se placent les unes derri\u00e8res les autres, Les serveurs d'impression, qui traitent ainsi les requ\u00eates dans l'ordre dans lequel elles arrivent, et les ins\u00e8rent dans une file d'attente, En gestion des stocks les algorithmes doivent respecter la gestion physique des stocks pour assurer la coh\u00e9rence physique/valorisation. D\u00e9finition D\u00e9finition Une file (en anglais queue) est une structure de donn\u00e9es bas\u00e9e sur le principe du premier entr\u00e9, premier sorti, d\u00e9sign\u00e9 en anglais par l'acroynyme FIFO (\u00ab first in, first out \u00bb) : les premiers \u00e9l\u00e9ments ajout\u00e9s \u00e0 la file seront les premiers \u00e0 en \u00eatre retir\u00e9s. Source : Wikip\u00e9dia Primitives Enfiler : ajoute un \u00e9l\u00e9ment dans la file. Le terme anglais correspondant est enqueue . D\u00e9filer : renvoie le prochain \u00e9l\u00e9ment de la file, et le retire de la file. Le terme anglais correspondant est dequeue . Est vide : renvoie \u00ab vrai \u00bb si la file est vide, \u00ab faux \u00bb sinon. Travail \u00e0 faire \u00c9crire une classe File impl\u00e9mentant les interfaces d\u00e9crites ci-dessus \u00e0 l'aide : d'un tableau d'un tuple Impl\u00e9mentation Tableau 1 2 3 4 5 6 7 8 9 10 11 12 13 class File (): def __init__ ( self ): self . __structure = [] def enfiler ( self , element ): self . __structure . append ( element ) def defiler ( self ): return self . __structure . pop ( 0 ) def est_vide ( self ): return len ( self . __structure ) == 0 Impl\u00e9mentation Tuple 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class File (): def __init__ ( self ): self . __structure = (,) def enfiler ( self , element ): self . __structure = self . __structure + element def defiler ( self ): element = self . __structure [ 0 ] self . __structure = tuple ( self . __structure [ 1 :]) return element def est_vide ( self ): return len ( self . __structure ) == 0 M\u00e9thodes Question Comment d\u00e9terminer la taille d'une file \\(f\\) en fonction de son interface ? R\u00e9ponse Le principe est d'utiliser une autre file \\(f'\\) o\u00f9 l'on va d\u00e9filer chaque \u00e9l\u00e9ment de \\(f\\) . \u00c0 chaque d\u00e9filement, on incr\u00e9mente un compteur dont la valeur finale sera la taille de \\(f\\) . Implantation Python 1 2 3 4 5 6 7 8 9 10 11 12 def __len__ ( self ): f_prime = File () taille = 0 while not f . est_vide (): f_prime . enfiler ( f . defiler ()) taille += 1 while not f_prime . est_vide (): f . enfiler ( f_primer . defiler ()) return taille","title":"Structure : File"},{"location":"terminale/bloc1/chapitre-01/FILE/#structure-file","text":"Source : Pixabay.com","title":"Structure : File"},{"location":"terminale/bloc1/chapitre-01/FILE/#contexte","text":"La structure d\u2019une file d'attente \u00e0 une caisse ou un guichet, o\u00f9 les personnes se placent les unes derri\u00e8res les autres, Les serveurs d'impression, qui traitent ainsi les requ\u00eates dans l'ordre dans lequel elles arrivent, et les ins\u00e8rent dans une file d'attente, En gestion des stocks les algorithmes doivent respecter la gestion physique des stocks pour assurer la coh\u00e9rence physique/valorisation.","title":"Contexte"},{"location":"terminale/bloc1/chapitre-01/FILE/#definition","text":"D\u00e9finition Une file (en anglais queue) est une structure de donn\u00e9es bas\u00e9e sur le principe du premier entr\u00e9, premier sorti, d\u00e9sign\u00e9 en anglais par l'acroynyme FIFO (\u00ab first in, first out \u00bb) : les premiers \u00e9l\u00e9ments ajout\u00e9s \u00e0 la file seront les premiers \u00e0 en \u00eatre retir\u00e9s. Source : Wikip\u00e9dia","title":"D\u00e9finition"},{"location":"terminale/bloc1/chapitre-01/FILE/#primitives","text":"Enfiler : ajoute un \u00e9l\u00e9ment dans la file. Le terme anglais correspondant est enqueue . D\u00e9filer : renvoie le prochain \u00e9l\u00e9ment de la file, et le retire de la file. Le terme anglais correspondant est dequeue . Est vide : renvoie \u00ab vrai \u00bb si la file est vide, \u00ab faux \u00bb sinon. Travail \u00e0 faire \u00c9crire une classe File impl\u00e9mentant les interfaces d\u00e9crites ci-dessus \u00e0 l'aide : d'un tableau d'un tuple Impl\u00e9mentation Tableau 1 2 3 4 5 6 7 8 9 10 11 12 13 class File (): def __init__ ( self ): self . __structure = [] def enfiler ( self , element ): self . __structure . append ( element ) def defiler ( self ): return self . __structure . pop ( 0 ) def est_vide ( self ): return len ( self . __structure ) == 0 Impl\u00e9mentation Tuple 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class File (): def __init__ ( self ): self . __structure = (,) def enfiler ( self , element ): self . __structure = self . __structure + element def defiler ( self ): element = self . __structure [ 0 ] self . __structure = tuple ( self . __structure [ 1 :]) return element def est_vide ( self ): return len ( self . __structure ) == 0","title":"Primitives"},{"location":"terminale/bloc1/chapitre-01/FILE/#methodes","text":"Question Comment d\u00e9terminer la taille d'une file \\(f\\) en fonction de son interface ? R\u00e9ponse Le principe est d'utiliser une autre file \\(f'\\) o\u00f9 l'on va d\u00e9filer chaque \u00e9l\u00e9ment de \\(f\\) . \u00c0 chaque d\u00e9filement, on incr\u00e9mente un compteur dont la valeur finale sera la taille de \\(f\\) . Implantation Python 1 2 3 4 5 6 7 8 9 10 11 12 def __len__ ( self ): f_prime = File () taille = 0 while not f . est_vide (): f_prime . enfiler ( f . defiler ()) taille += 1 while not f_prime . est_vide (): f . enfiler ( f_primer . defiler ()) return taille","title":"M\u00e9thodes"},{"location":"terminale/bloc1/chapitre-01/LISTE/","text":"Structure : Liste Source : Pixabay.com Contexte D\u00e9finition D\u00e9finition Une liste est une structure de donn\u00e9es permettant de regrouper des donn\u00e9es de mani\u00e8re \u00e0 pouvoir y acc\u00e9der librement. Chaque \u00e9l\u00e9ment contient la donn\u00e9e et peut pointer, vers un ou plusieurs \u00e9l\u00e9ments de la liste en utilisant une d\u00e9finition r\u00e9cursive. On parle de liste chain\u00e9e. Soit le type liste , il se d\u00e9finit comme : \\[ liste = \\left\\{ \\begin{array}{ll} \\emptyset \\\\ (valeur, liste) \\end{array} \\right. \\] Primitives Ins\u00e9rer : ajoute un \u00e9l\u00e9ment dans la liste, Retirer : retire un \u00e9l\u00e9ment de la liste, Est vide : renvoie \u00ab vrai \u00bb si la liste est vide, \u00ab faux \u00bb sinon. Travail \u00e0 faire \u00c9crire une classe Liste impl\u00e9mentant les interfaces d\u00e9crites ci-dessus \u00e0 l'aide. Impl\u00e9mentation 1 2 3 4 5 6 7 8 class Liste (): def __init__ ( self ): self . __valeur = None self . __prochain = None def est_vide ( self ): return self . __valeur is None and self . __prochain is None M\u00e9thodes Question Comment d\u00e9terminer la taille d'une liste \\(l\\) en fonction de son interface ? R\u00e9ponse Une liste est une structure r\u00e9cursive. La d\u00e9termination de sa taille se d\u00e9finit de la m\u00eame mani\u00e8re. Soit \\(T_l\\) la taille de la liste \\(l\\) , elle se d\u00e9finie par : \\[ T_l = \\left\\{ \\begin{array}{ll} 0 & \\mbox{si la liste est vide} \\\\ 1 + T_{l-1} & \\mbox{sinon} \\end{array} \\right. \\] \\(T_{l-1} \\mbox{ est la liste dont le premier \u00e9l\u00e9ment est le suivant de la liste } l\\) Implantation Python 1 2 3 4 def __len__ ( self ): if self . est_vide (): return 0 return 1 + len ( self . __prochain )","title":"Structure : Liste"},{"location":"terminale/bloc1/chapitre-01/LISTE/#structure-liste","text":"Source : Pixabay.com","title":"Structure : Liste"},{"location":"terminale/bloc1/chapitre-01/LISTE/#contexte","text":"","title":"Contexte"},{"location":"terminale/bloc1/chapitre-01/LISTE/#definition","text":"D\u00e9finition Une liste est une structure de donn\u00e9es permettant de regrouper des donn\u00e9es de mani\u00e8re \u00e0 pouvoir y acc\u00e9der librement. Chaque \u00e9l\u00e9ment contient la donn\u00e9e et peut pointer, vers un ou plusieurs \u00e9l\u00e9ments de la liste en utilisant une d\u00e9finition r\u00e9cursive. On parle de liste chain\u00e9e. Soit le type liste , il se d\u00e9finit comme : \\[ liste = \\left\\{ \\begin{array}{ll} \\emptyset \\\\ (valeur, liste) \\end{array} \\right. \\]","title":"D\u00e9finition"},{"location":"terminale/bloc1/chapitre-01/LISTE/#primitives","text":"Ins\u00e9rer : ajoute un \u00e9l\u00e9ment dans la liste, Retirer : retire un \u00e9l\u00e9ment de la liste, Est vide : renvoie \u00ab vrai \u00bb si la liste est vide, \u00ab faux \u00bb sinon. Travail \u00e0 faire \u00c9crire une classe Liste impl\u00e9mentant les interfaces d\u00e9crites ci-dessus \u00e0 l'aide. Impl\u00e9mentation 1 2 3 4 5 6 7 8 class Liste (): def __init__ ( self ): self . __valeur = None self . __prochain = None def est_vide ( self ): return self . __valeur is None and self . __prochain is None","title":"Primitives"},{"location":"terminale/bloc1/chapitre-01/LISTE/#methodes","text":"Question Comment d\u00e9terminer la taille d'une liste \\(l\\) en fonction de son interface ? R\u00e9ponse Une liste est une structure r\u00e9cursive. La d\u00e9termination de sa taille se d\u00e9finit de la m\u00eame mani\u00e8re. Soit \\(T_l\\) la taille de la liste \\(l\\) , elle se d\u00e9finie par : \\[ T_l = \\left\\{ \\begin{array}{ll} 0 & \\mbox{si la liste est vide} \\\\ 1 + T_{l-1} & \\mbox{sinon} \\end{array} \\right. \\] \\(T_{l-1} \\mbox{ est la liste dont le premier \u00e9l\u00e9ment est le suivant de la liste } l\\) Implantation Python 1 2 3 4 def __len__ ( self ): if self . est_vide (): return 0 return 1 + len ( self . __prochain )","title":"M\u00e9thodes"},{"location":"terminale/bloc1/chapitre-01/PILE/","text":"Structure : Pile Source : Pixabay.com Contexte La structure d\u2019une pile d\u2019assiettes, pour ranger les assiettes, on les empile les unes sur les autres, La fonction \u00ab Annuler la frappe \u00bb (en anglais Undo) d'un traitement de texte m\u00e9morise les modifications apport\u00e9es au texte dans une pile, Dans un navigateur web, une pile sert \u00e0 m\u00e9moriser les pages Web visit\u00e9es. L'adresse de chaque nouvelle page visit\u00e9e est empil\u00e9e et l'utilisateur d\u00e9pile l'adresse courante pour acc\u00e9der \u00e0 la page pr\u00e9c\u00e9dente en cliquant le bouton \u00ab Afficher la page pr\u00e9c\u00e9dente \u00bb. D\u00e9finition D\u00e9finition Une pile est une structure de donn\u00e9es fond\u00e9e sur le principe \"dernier arriv\u00e9, premier sorti\" (en anglais LIFO pour last in, first out), ce qui veut dire, qu'en g\u00e9n\u00e9ral, le dernier \u00e9l\u00e9ment, ajout\u00e9 \u00e0 la pile, sera le premier \u00e0 en sortir pour \u00eatre trait\u00e9. On ne peut acc\u00e9der qu'\u00e0 un et un seul \u00e9l\u00e9ment, le dernier ins\u00e9r\u00e9. Autrement dit, si \\(p\\) est une pile, on ne peut pas acc\u00e9der qu'au sommet de la pile. Source : Wikip\u00e9dia Primitives Empiler : ajoute un \u00e9l\u00e9ment sur la pile. Le terme anglais correspondant est push . D\u00e9piler : enl\u00e8ve un \u00e9l\u00e9ment de la pile et le renvoie. Le terme anglais correspondant est pop . Est vide : renvoie vrai si la pile est vide, faux sinon. Travail \u00e0 faire \u00c9crire une classe Pile impl\u00e9mentant les interfaces d\u00e9crites ci-dessus \u00e0 l'aide : d'un tableau d'un tuple Impl\u00e9mentation Tableau 1 2 3 4 5 6 7 8 9 10 11 12 13 class Pile (): def __init__ ( self ): self . __structure = [] def empiler ( self , element ): self . __structure . append ( element ) def depiler ( self ): return self . __structure . pop () def est_vide ( self ): return len ( self . __structure ) == 0 Impl\u00e9mentation Tuple 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Pile (): def __init__ ( self ): self . __structure = (,) def empiler ( self , element ): self . __structure = self . __structure + element def depiler ( self ): element = self . __structure [ - 1 ] self . __structure = tuple ( self . __structure [: - 1 ]) return element def est_vide ( self ): return len ( self . __structure ) == 0 M\u00e9thodes Question Comment d\u00e9terminer la taille d'une pile \\(p\\) en fonction de son interface ? R\u00e9ponse Le principe est d'utiliser une autre pile \\(p'\\) o\u00f9 l'on va empiler chaque \u00e9l\u00e9ment de \\(p\\) . \u00c0 chaque empilement, on incr\u00e9mente un compteur dont la valeur finale sera la taille de \\(p\\) . Implantation Python 1 2 3 4 5 6 7 8 9 10 11 12 def __len__ ( self ): p_prime = Pile () taille = 0 while not p . est_vide (): p_prime . empiler ( p . depiler ()) taille += 1 while not p_prime . est_vide (): p . empiler ( p_primer . depiler ()) return taille","title":"Structure : Pile"},{"location":"terminale/bloc1/chapitre-01/PILE/#structure-pile","text":"Source : Pixabay.com","title":"Structure : Pile"},{"location":"terminale/bloc1/chapitre-01/PILE/#contexte","text":"La structure d\u2019une pile d\u2019assiettes, pour ranger les assiettes, on les empile les unes sur les autres, La fonction \u00ab Annuler la frappe \u00bb (en anglais Undo) d'un traitement de texte m\u00e9morise les modifications apport\u00e9es au texte dans une pile, Dans un navigateur web, une pile sert \u00e0 m\u00e9moriser les pages Web visit\u00e9es. L'adresse de chaque nouvelle page visit\u00e9e est empil\u00e9e et l'utilisateur d\u00e9pile l'adresse courante pour acc\u00e9der \u00e0 la page pr\u00e9c\u00e9dente en cliquant le bouton \u00ab Afficher la page pr\u00e9c\u00e9dente \u00bb.","title":"Contexte"},{"location":"terminale/bloc1/chapitre-01/PILE/#definition","text":"D\u00e9finition Une pile est une structure de donn\u00e9es fond\u00e9e sur le principe \"dernier arriv\u00e9, premier sorti\" (en anglais LIFO pour last in, first out), ce qui veut dire, qu'en g\u00e9n\u00e9ral, le dernier \u00e9l\u00e9ment, ajout\u00e9 \u00e0 la pile, sera le premier \u00e0 en sortir pour \u00eatre trait\u00e9. On ne peut acc\u00e9der qu'\u00e0 un et un seul \u00e9l\u00e9ment, le dernier ins\u00e9r\u00e9. Autrement dit, si \\(p\\) est une pile, on ne peut pas acc\u00e9der qu'au sommet de la pile. Source : Wikip\u00e9dia","title":"D\u00e9finition"},{"location":"terminale/bloc1/chapitre-01/PILE/#primitives","text":"Empiler : ajoute un \u00e9l\u00e9ment sur la pile. Le terme anglais correspondant est push . D\u00e9piler : enl\u00e8ve un \u00e9l\u00e9ment de la pile et le renvoie. Le terme anglais correspondant est pop . Est vide : renvoie vrai si la pile est vide, faux sinon. Travail \u00e0 faire \u00c9crire une classe Pile impl\u00e9mentant les interfaces d\u00e9crites ci-dessus \u00e0 l'aide : d'un tableau d'un tuple Impl\u00e9mentation Tableau 1 2 3 4 5 6 7 8 9 10 11 12 13 class Pile (): def __init__ ( self ): self . __structure = [] def empiler ( self , element ): self . __structure . append ( element ) def depiler ( self ): return self . __structure . pop () def est_vide ( self ): return len ( self . __structure ) == 0 Impl\u00e9mentation Tuple 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Pile (): def __init__ ( self ): self . __structure = (,) def empiler ( self , element ): self . __structure = self . __structure + element def depiler ( self ): element = self . __structure [ - 1 ] self . __structure = tuple ( self . __structure [: - 1 ]) return element def est_vide ( self ): return len ( self . __structure ) == 0","title":"Primitives"},{"location":"terminale/bloc1/chapitre-01/PILE/#methodes","text":"Question Comment d\u00e9terminer la taille d'une pile \\(p\\) en fonction de son interface ? R\u00e9ponse Le principe est d'utiliser une autre pile \\(p'\\) o\u00f9 l'on va empiler chaque \u00e9l\u00e9ment de \\(p\\) . \u00c0 chaque empilement, on incr\u00e9mente un compteur dont la valeur finale sera la taille de \\(p\\) . Implantation Python 1 2 3 4 5 6 7 8 9 10 11 12 def __len__ ( self ): p_prime = Pile () taille = 0 while not p . est_vide (): p_prime . empiler ( p . depiler ()) taille += 1 while not p_prime . est_vide (): p . empiler ( p_primer . depiler ()) return taille","title":"M\u00e9thodes"},{"location":"terminale/bloc3/","text":"Bloc 3 - Architectures mat\u00e9rielles, syst\u00e8mes d\u2019exploitation et r\u00e9seaux","title":"Bloc 3 - Architectures mat\u00e9rielles, syst\u00e8mes d\u2019exploitation et r\u00e9seaux"},{"location":"terminale/bloc3/#bloc-3-architectures-materielles-systemes-dexploitation-et-reseaux","text":"","title":"Bloc 3 - Architectures mat\u00e9rielles, syst\u00e8mes d\u2019exploitation et r\u00e9seaux"},{"location":"terminale/bloc3/chapitre-03/","text":"Sommaire Protocoles de routage Les contenus le tp le cours le quiz Programme Contenus : Protocoles de routage. Capacit\u00e9s attendues : Identifier, suivant le protocole de routage utilis\u00e9, la route emprunt\u00e9e par un paquet.","title":"Sommaire"},{"location":"terminale/bloc3/chapitre-03/#sommaire","text":"","title":"Sommaire"},{"location":"terminale/bloc3/chapitre-03/#protocoles-de-routage","text":"","title":"Protocoles de routage"},{"location":"terminale/bloc3/chapitre-03/#les-contenus","text":"le tp le cours le quiz","title":"Les contenus"},{"location":"terminale/bloc3/chapitre-03/#programme","text":"Contenus : Protocoles de routage. Capacit\u00e9s attendues : Identifier, suivant le protocole de routage utilis\u00e9, la route emprunt\u00e9e par un paquet.","title":"Programme"},{"location":"terminale/bloc3/chapitre-03/COURS/","text":"Protocoles de routage Routage \u00e0 vecteur de distances https://www.youtube.com/watch?v=kzablGaqUXM Routage \u00e0 \u00e9tat de liens https://www.youtube.com/watch?v=-utHPKREZV8","title":"Protocoles de routage"},{"location":"terminale/bloc3/chapitre-03/COURS/#protocoles-de-routage","text":"Routage \u00e0 vecteur de distances https://www.youtube.com/watch?v=kzablGaqUXM Routage \u00e0 \u00e9tat de liens https://www.youtube.com/watch?v=-utHPKREZV8","title":"Protocoles de routage"},{"location":"terminale/bloc3/chapitre-04/COURS/","text":"S\u00e9curit\u00e9 des communications Source : Pixabay Questions Quelles situations n\u00e9cessitent d'\u00e9changer des donn\u00e9es de mani\u00e8re confidentielle ? Comment communiquer secr\u00e8tement ? D\u00e9finitions Beaucoup de termes sont utilis\u00e9s sur le sujet de la s\u00e9curisation des communications et de la cryptographie. Listons les termes ad\u00e9quats et inad\u00e9quats : D\u00e9finitions \u2713 Cryptographie : Discipline s\u2019attachant \u00e0 prot\u00e9ger des messages en s\u2019aidant souvent de secrets ou cl\u00e9s. \u2713 Chiffrement : Proc\u00e9d\u00e9 de cryptographie gr\u00e2ce auquel on souhaite rendre la compr\u00e9hension d\u2019un document impossible \u00e0 toute personne qui n\u2019a pas la cl\u00e9 de (d\u00e9)chiffrement. \u2713 Chiffrer : consiste \u00e0 proc\u00e9der \u00e0 un chiffrement. \u2713 D\u00e9chiffrer : consiste \u00e0 retrouver le texte original (aussi appel\u00e9 clair) d\u2019un message chiffr\u00e9 dont on poss\u00e8de la cl\u00e9 de (d\u00e9)chiffrement. \u2713 D\u00e9crypter : consiste \u00e0 retrouver le texte original \u00e0 partir d\u2019un message chiffr\u00e9 sans poss\u00e9der la cl\u00e9 de (d\u00e9)chiffrement. \u2718 Crypter / Cryptage : le R\u00e9f\u00e9rentiel G\u00e9n\u00e9ral de S\u00e9curit\u00e9 de l\u2019ANSSI qualifie d\u2019incorrect \u00ab cryptage \u00bb. En effet, la terminologie de cryptage reviendrait \u00e0 chiffrer un fichier sans en conna\u00eetre la cl\u00e9 et donc sans pouvoir le d\u00e9chiffrer ensuite. Le terme n\u2019est par ailleurs pas reconnu par le dictionnaire de l\u2019Acad\u00e9mie fran\u00e7aise. \u2718 Encrypter / D\u00e9encrypter / D\u00e9sencrypter : Le terme \u00ab encrypter \u00bb et ses d\u00e9riv\u00e9s sont des anglicismes. Donc, on ne les utilise pas non plus. \u2718 Chiffrage : c\u2019est \u00e9valuer le co\u00fbt de quelque chose. ABSOLUMENT RIEN \u00e0 voir avec le chiffrement. \u2718 Coder / Encoder / D\u00e9coder : Fa\u00e7on d\u2019\u00e9crire les m\u00eames donn\u00e9es, mais de mani\u00e8re diff\u00e9rente (ex. en binaire, en hexad\u00e9cimal,...). Il n\u2019y a aucune vocation \u00e0 assurer la confidentialit\u00e9, ce n\u2019est donc pas du chiffrement. On peut d\u00e8s lors se poser la question des \u00ab bonnes \u00bb propri\u00e9t\u00e9s d'un chiffrement : doit permettre de communiquer (les 2 protagonistes se comprennent-ils ? y a-t-il des ambigu\u00eft\u00e9s ?) doit \u00eatre facile \u00e0 apprendre et \u00e0 utiliser doit \u00eatre difficile \u00e0 \u00ab casser \u00bb pour une personne ext\u00e9rieure qui ne conna\u00eetrait pas la cl\u00e9. Travail Pouvez-vous d\u00e9crypter les messages suivants ? Message : SERTTEL SEL RESREVNI D TIFFUS LI Message : RUDSULPTSECSECAPSESELSNAS Message : 1511202103151414010919120112160801020520 Solution 1 Le message est \u00e0 l'envers. Le message clair est : IL SUFFIT D INVERSER LES LETTRES Solution 2 Le message est \u00e0 l'envers et sans espace. Le message clair : SANS LES ESPACES C EST PLUS DUR Solution 3 Le message est constitu\u00e9 d'indices des lettres dans l'alphabet sur 2 chiffres. Chiffrement Sym\u00e9trique Travail Par bin\u00f4me : Tenter de d\u00e9crypter le message QLBKP, H TPKP, KLZ YLUMVYAZ CPLUULUA WHY SH TLY Jules C\u00e9sar Source : Wikip\u00e9dia. Le chiffrement utilis\u00e9 est le chiffrement de C\u00e9sar, car Jules C\u00e9sar l\u2019utilisait fr\u00e9quemment pour transmettre des messages secrets diplomatiques ou militaires. Il consiste \u00e0 d\u00e9caler les lettres de l\u2019alphabet d\u2019un certain rang (la \u00ab cl\u00e9 \u00bb). Conna\u00eetre la valeur de la cl\u00e9 permet de d\u00e9chiffrer tr\u00e8s facilement le message en appliquant un d\u00e9calage aux lettres dans le sens inverse de l'alphabet. Cr\u00e9er un disque \u00e0 chiffrer . Cet outil est constitu\u00e9 de 2 disques concentriques attach\u00e9s ensemble par une attache-parisienne. Sur les pourtours des disques ont \u00e9t\u00e9 plac\u00e9es les lettres de l\u2019alphabet. En faisant pivoter un disque par rapport \u00e0 l\u2019autre, il est facile de chiffrer et d\u00e9chiffrer rapidement n\u2019importe quelle lettre. Par bin\u00f4me, d\u00e9finissez la cl\u00e9 de chiffrement (rang de d\u00e9calage) et \u00e9changer des messages chiffr\u00e9s. Les autre bin\u00f4mes pouvant intercepter votre message en tentant de les d\u00e9crypter... Combien y a-t-il de cl\u00e9s possibles dans le chiffrement C\u00e9sar ? Soit un alphabet \\(\\mathbb{A}\\) constitu\u00e9 de \\(n = |\\mathbb{A}|\\) symboles. Le nombre de cl\u00e9s possibles est \u00e9gal \u00e0 \\(n\\) . Le chiffrement de C\u00e9sar est un cas particulier du type de chiffrement sym\u00e9trique, o\u00f9 il est n\u00e9cessaire pour les interlocuteurs de se mettre d'accord \u00e0 l'avance sur la cl\u00e9 qui sera utilis\u00e9e lors des \u00e9changes chiffr\u00e9s. Chiffrement Asym\u00e9trique La m\u00e9thode la plus utilis\u00e9e en mati\u00e8re de chiffrement sym\u00e9trique se nomme AES (Advanced Encryption Standard). Cette m\u00e9thode utilise une technique de chiffrement plus \u00e9labor\u00e9e que ce qui a \u00e9t\u00e9 vu ci-dessus, mais les grands principes restent identiques. Ressources [1] Les codes secrets, Cha\u00eene ScienceEtonnante, Youtube [2] A quel point le chiffrement 256 bits est-il s\u00fbr ?, Cha\u00eene 3blue1Brown, Youtube","title":"S\u00e9curit\u00e9 des communications"},{"location":"terminale/bloc3/chapitre-04/COURS/#securite-des-communications","text":"Source : Pixabay Questions Quelles situations n\u00e9cessitent d'\u00e9changer des donn\u00e9es de mani\u00e8re confidentielle ? Comment communiquer secr\u00e8tement ?","title":"S\u00e9curit\u00e9 des communications"},{"location":"terminale/bloc3/chapitre-04/COURS/#definitions","text":"Beaucoup de termes sont utilis\u00e9s sur le sujet de la s\u00e9curisation des communications et de la cryptographie. Listons les termes ad\u00e9quats et inad\u00e9quats : D\u00e9finitions \u2713 Cryptographie : Discipline s\u2019attachant \u00e0 prot\u00e9ger des messages en s\u2019aidant souvent de secrets ou cl\u00e9s. \u2713 Chiffrement : Proc\u00e9d\u00e9 de cryptographie gr\u00e2ce auquel on souhaite rendre la compr\u00e9hension d\u2019un document impossible \u00e0 toute personne qui n\u2019a pas la cl\u00e9 de (d\u00e9)chiffrement. \u2713 Chiffrer : consiste \u00e0 proc\u00e9der \u00e0 un chiffrement. \u2713 D\u00e9chiffrer : consiste \u00e0 retrouver le texte original (aussi appel\u00e9 clair) d\u2019un message chiffr\u00e9 dont on poss\u00e8de la cl\u00e9 de (d\u00e9)chiffrement. \u2713 D\u00e9crypter : consiste \u00e0 retrouver le texte original \u00e0 partir d\u2019un message chiffr\u00e9 sans poss\u00e9der la cl\u00e9 de (d\u00e9)chiffrement. \u2718 Crypter / Cryptage : le R\u00e9f\u00e9rentiel G\u00e9n\u00e9ral de S\u00e9curit\u00e9 de l\u2019ANSSI qualifie d\u2019incorrect \u00ab cryptage \u00bb. En effet, la terminologie de cryptage reviendrait \u00e0 chiffrer un fichier sans en conna\u00eetre la cl\u00e9 et donc sans pouvoir le d\u00e9chiffrer ensuite. Le terme n\u2019est par ailleurs pas reconnu par le dictionnaire de l\u2019Acad\u00e9mie fran\u00e7aise. \u2718 Encrypter / D\u00e9encrypter / D\u00e9sencrypter : Le terme \u00ab encrypter \u00bb et ses d\u00e9riv\u00e9s sont des anglicismes. Donc, on ne les utilise pas non plus. \u2718 Chiffrage : c\u2019est \u00e9valuer le co\u00fbt de quelque chose. ABSOLUMENT RIEN \u00e0 voir avec le chiffrement. \u2718 Coder / Encoder / D\u00e9coder : Fa\u00e7on d\u2019\u00e9crire les m\u00eames donn\u00e9es, mais de mani\u00e8re diff\u00e9rente (ex. en binaire, en hexad\u00e9cimal,...). Il n\u2019y a aucune vocation \u00e0 assurer la confidentialit\u00e9, ce n\u2019est donc pas du chiffrement. On peut d\u00e8s lors se poser la question des \u00ab bonnes \u00bb propri\u00e9t\u00e9s d'un chiffrement : doit permettre de communiquer (les 2 protagonistes se comprennent-ils ? y a-t-il des ambigu\u00eft\u00e9s ?) doit \u00eatre facile \u00e0 apprendre et \u00e0 utiliser doit \u00eatre difficile \u00e0 \u00ab casser \u00bb pour une personne ext\u00e9rieure qui ne conna\u00eetrait pas la cl\u00e9. Travail Pouvez-vous d\u00e9crypter les messages suivants ? Message : SERTTEL SEL RESREVNI D TIFFUS LI Message : RUDSULPTSECSECAPSESELSNAS Message : 1511202103151414010919120112160801020520 Solution 1 Le message est \u00e0 l'envers. Le message clair est : IL SUFFIT D INVERSER LES LETTRES Solution 2 Le message est \u00e0 l'envers et sans espace. Le message clair : SANS LES ESPACES C EST PLUS DUR Solution 3 Le message est constitu\u00e9 d'indices des lettres dans l'alphabet sur 2 chiffres.","title":"D\u00e9finitions"},{"location":"terminale/bloc3/chapitre-04/COURS/#chiffrement-symetrique","text":"Travail Par bin\u00f4me : Tenter de d\u00e9crypter le message QLBKP, H TPKP, KLZ YLUMVYAZ CPLUULUA WHY SH TLY Jules C\u00e9sar Source : Wikip\u00e9dia. Le chiffrement utilis\u00e9 est le chiffrement de C\u00e9sar, car Jules C\u00e9sar l\u2019utilisait fr\u00e9quemment pour transmettre des messages secrets diplomatiques ou militaires. Il consiste \u00e0 d\u00e9caler les lettres de l\u2019alphabet d\u2019un certain rang (la \u00ab cl\u00e9 \u00bb). Conna\u00eetre la valeur de la cl\u00e9 permet de d\u00e9chiffrer tr\u00e8s facilement le message en appliquant un d\u00e9calage aux lettres dans le sens inverse de l'alphabet. Cr\u00e9er un disque \u00e0 chiffrer . Cet outil est constitu\u00e9 de 2 disques concentriques attach\u00e9s ensemble par une attache-parisienne. Sur les pourtours des disques ont \u00e9t\u00e9 plac\u00e9es les lettres de l\u2019alphabet. En faisant pivoter un disque par rapport \u00e0 l\u2019autre, il est facile de chiffrer et d\u00e9chiffrer rapidement n\u2019importe quelle lettre. Par bin\u00f4me, d\u00e9finissez la cl\u00e9 de chiffrement (rang de d\u00e9calage) et \u00e9changer des messages chiffr\u00e9s. Les autre bin\u00f4mes pouvant intercepter votre message en tentant de les d\u00e9crypter... Combien y a-t-il de cl\u00e9s possibles dans le chiffrement C\u00e9sar ? Soit un alphabet \\(\\mathbb{A}\\) constitu\u00e9 de \\(n = |\\mathbb{A}|\\) symboles. Le nombre de cl\u00e9s possibles est \u00e9gal \u00e0 \\(n\\) . Le chiffrement de C\u00e9sar est un cas particulier du type de chiffrement sym\u00e9trique, o\u00f9 il est n\u00e9cessaire pour les interlocuteurs de se mettre d'accord \u00e0 l'avance sur la cl\u00e9 qui sera utilis\u00e9e lors des \u00e9changes chiffr\u00e9s.","title":"Chiffrement Sym\u00e9trique"},{"location":"terminale/bloc3/chapitre-04/COURS/#chiffrement-asymetrique","text":"La m\u00e9thode la plus utilis\u00e9e en mati\u00e8re de chiffrement sym\u00e9trique se nomme AES (Advanced Encryption Standard). Cette m\u00e9thode utilise une technique de chiffrement plus \u00e9labor\u00e9e que ce qui a \u00e9t\u00e9 vu ci-dessus, mais les grands principes restent identiques.","title":"Chiffrement Asym\u00e9trique"},{"location":"terminale/bloc3/chapitre-04/COURS/#ressources","text":"[1] Les codes secrets, Cha\u00eene ScienceEtonnante, Youtube [2] A quel point le chiffrement 256 bits est-il s\u00fbr ?, Cha\u00eene 3blue1Brown, Youtube","title":"Ressources"},{"location":"terminale/bloc4/","text":"Sommaire Bloc 4 - Langages et Programmation 1 2 def f ( _f ): return _f ( f ) Pr\u00e9ambule Organisation Le bloc se d\u00e9compose en 3 chapitres : Chapitre 2 : Calculabilit\u00e9 Chapitre 3 : R\u00e9cursivit\u00e9 Chapitre 4 : Programmation orient\u00e9 objet Programme Officiel TODO","title":"Sommaire"},{"location":"terminale/bloc4/#sommaire","text":"","title":"Sommaire"},{"location":"terminale/bloc4/#bloc-4-langages-et-programmation","text":"1 2 def f ( _f ): return _f ( f )","title":"Bloc 4 - Langages et Programmation"},{"location":"terminale/bloc4/#preambule","text":"","title":"Pr\u00e9ambule"},{"location":"terminale/bloc4/#organisation","text":"Le bloc se d\u00e9compose en 3 chapitres : Chapitre 2 : Calculabilit\u00e9 Chapitre 3 : R\u00e9cursivit\u00e9 Chapitre 4 : Programmation orient\u00e9 objet","title":"Organisation"},{"location":"terminale/bloc4/#programme-officiel","text":"TODO","title":"Programme Officiel"},{"location":"terminale/bloc4/chapitre-02/","text":"Sommaire Calculabilit\u00e9 / D\u00e9cidabilit\u00e9 Les contenus le tp le cours le quiz Programme Contenus : Notion de programme en tant que donn\u00e9e. Calculabilit\u00e9, d\u00e9cidabilit\u00e9. Capacit\u00e9s attendues : Comprendre que tout programme est aussi une donn\u00e9e. Comprendre que la calculabilit\u00e9 ne d\u00e9pend pas du langage de programmation utilis\u00e9. Montrer, sans formalisme th\u00e9orique, que le probl\u00e8me de l\u2019arr\u00eat est ind\u00e9cidable. Commentaires : L\u2019utilisation d\u2019un interpr\u00e9teur ou d\u2019un compilateur, le t\u00e9l\u00e9chargement de logiciel, le fonctionnement des syst\u00e8mes d\u2019exploitation permettent de comprendre un programme comme donn\u00e9e d\u2019un autre programme.","title":"Sommaire"},{"location":"terminale/bloc4/chapitre-02/#sommaire","text":"","title":"Sommaire"},{"location":"terminale/bloc4/chapitre-02/#calculabilite-decidabilite","text":"","title":"Calculabilit\u00e9 / D\u00e9cidabilit\u00e9"},{"location":"terminale/bloc4/chapitre-02/#les-contenus","text":"le tp le cours le quiz","title":"Les contenus"},{"location":"terminale/bloc4/chapitre-02/#programme","text":"Contenus : Notion de programme en tant que donn\u00e9e. Calculabilit\u00e9, d\u00e9cidabilit\u00e9. Capacit\u00e9s attendues : Comprendre que tout programme est aussi une donn\u00e9e. Comprendre que la calculabilit\u00e9 ne d\u00e9pend pas du langage de programmation utilis\u00e9. Montrer, sans formalisme th\u00e9orique, que le probl\u00e8me de l\u2019arr\u00eat est ind\u00e9cidable. Commentaires : L\u2019utilisation d\u2019un interpr\u00e9teur ou d\u2019un compilateur, le t\u00e9l\u00e9chargement de logiciel, le fonctionnement des syst\u00e8mes d\u2019exploitation permettent de comprendre un programme comme donn\u00e9e d\u2019un autre programme.","title":"Programme"},{"location":"terminale/bloc4/chapitre-02/COURS/","text":"Calculabilit\u00e9 / D\u00e9cidabilit\u00e9 Programme officiel Contenus Capacit\u00e9s attendues Notion de programme en tant que donn\u00e9e. Calculabilit\u00e9, d\u00e9cidabilit\u00e9. Comprendre que tout programme est aussi une donn\u00e9e. Comprendre que la calculabilit\u00e9 ne d\u00e9pend pas du langage de programmation utilis\u00e9. Montrer, sans formalisme th\u00e9orique, que le probl\u00e8me de l\u2019arr\u00eat est ind\u00e9cidable. Pr\u00e9-requis Connaitre la d\u00e9finition et le fonctionnement d'une Machine de Turing Savoir programmer une fonction en Python Un programme : une donn\u00e9e Nous allons tout d'abord expliciter un point important qui sera le fondement de la th\u00e9orie de la calculabilit\u00e9 : un programme est aussi une donn\u00e9e. Cela peut para\u00eetre \u00e9tonnant \u00e0 premi\u00e8re vue puisqu'on est habitu\u00e9 \u00e0 traiter : les programmes dans des fonctions , les donn\u00e9es dans des variables . Fonctions et variables sont des objets de nature diff\u00e9rente en apparence. Si on se raccroche \u00e0 ce que l'on conna\u00eet en python, une fonction se d\u00e9clare avec le mot cl\u00e9 def et une variable s'initialise avec l'op\u00e9rateur d'affectation =. Prenons en exemple l'algorithme d'Euclide, un algorithme vieux de plus de 2500 ans, permettant de calculer le PGCD de 2 nombres. On peut l'\u00e9crire \u00e0 l'aide d'une fonction Python: 1 2 3 4 5 6 def euclide ( a , b ): if a < b : a , b = b , a while b : a , b = b , a % b return a Dans ce programme Python, euclide est une fonction et a et b sont des donn\u00e9es . Ils ne semblent pas \u00eatre de nature comparable : 1 2 >>> euclide ( 35 , 49 ) 7 Et pourtant, \u00e0 y regarder de plus pr\u00e8s, notre algorithme programm\u00e9 dans la fonction euclide n'est rien d'autre qu'une succession de caract\u00e8res. On peut m\u00eame pousser la r\u00e9flexion jusqu'\u00e0 cr\u00e9er une cha\u00eene de caract\u00e8re contenant ce programme : 1 mon_programme = \"def euclide(a,b): \\n\\t if a < b: a,b=b,a \\n\\t while b: a,b=b,a%b \\n\\t return a\" Maintenant mon algorithme est devenu une variable . On peut alors construire une machine universelle capable d'\u00e9valuer n'importe quelle donn\u00e9e contenant un algorithme formalis\u00e9 dans le langage Python : 1 2 3 4 5 def universel ( algo , * args ): exec ( algo ) ligne1 = algo . split ( ' \\n ' )[ 0 ] nom = ligne1 . split ( '(' )[ 0 ][ 4 :] return eval ( f \" { nom }{ args } \" ) A pr\u00e9sent, il est possible d'invoquer la machine universelle en lui passant en donn\u00e9es : la variable contenant mon algorithme les arguments sur lequel celui-ci va travailler et obtenir la r\u00e9ponse 1 2 >>> universel ( mon_programme , 35 , 49 ) 7 Dans l'exemple ci-dessus, vous pouvez constater que le programme et les donn\u00e9es sur lesquelles il agit sont de m\u00eame nature : ce sont 3 variables pass\u00e9es en param\u00e8tres \u00e0 ma fonction universelle. Important Un programme est aussi une donn\u00e9e. Question Citez d'autres exemples o\u00f9 un programme est consid\u00e9r\u00e9 comme donn\u00e9e ? Pr\u00e9ambule Face \u00e0 un probl\u00e8me ou une question, nous avons l'habitude de : formaliser le probl\u00e8me et le ou les solutions possibles, d\u00e9crire un algorithme qui d\u00e9termine la m\u00e9thode de calcul d'une solution, puis de coder cet algorithme sous la forme d'un programme dans un langage donn\u00e9, puis de faire ex\u00e9cuter ce programme par une machine pour obtenir la solution. Une question (sous diff\u00e9rentes formulations) \u00e9merge alors : Questions Peut-on tout programmer ? Pour tout probl\u00e8me, est-il possible d'\u00e9crire un programme qui permette de calculer une solution ? Tout probl\u00e8me a-t-il une solution ? Le probl\u00e8me du Barbier Question Dans une ville o\u00f9 les gens : soit se rasent eux-m\u00eames, soit se font raser par le barbier. Qui rase le barbier ? R\u00e9ponse Pour r\u00e9pondre \u00e0 cette question, on peut raisonner ainsi : Soit le barbier se rase lui-m\u00eame et, dans ce cas, il n'est pas ras\u00e9 par le barbier, Soit le barbier ne se rase pas lui m\u00eame et il est donc ras\u00e9 par le barbier. \u21d2 Contradiction ! Soit le barbier se rase lui-m\u00eame et donc le barbier ne le rase pas, soit il ne se rase pas lui-m\u00eame et donc il se rase lui-m\u00eame. On doit conclure que l'hypoth\u00e8se de d\u00e9part est fausse. Une ville avec de tels habitants ne peut exister et, de la m\u00eame mani\u00e8re que l'algorithme qui permette de calculer la solution \u00e0 ce probl\u00e8me n'existe pas non plus. Ce probl\u00e8me connu sous le nom du paradoxe du Barbier nous permet d\u00e9j\u00e0 de r\u00e9pondre aux questions pos\u00e9es en pr\u00e9ambule : Questions Peut-on tout programmer ? NON Pour tout probl\u00e8me, est-il possible d'\u00e9crire un programme qui permette de calculer une solution ? NON Tout probl\u00e8me a-t-il une solution ? NON D\u00e9finition D\u00e9finition Un probl\u00e8me de d\u00e9cision est dit d\u00e9cidable s'il existe un algorithme, une proc\u00e9dure m\u00e9canique qui se termine en un nombre fini d'\u00e9tapes, qui le d\u00e9cide, c'est-\u00e0-dire qui r\u00e9ponde par oui ou par non \u00e0 la question pos\u00e9e par le probl\u00e8me. S'il n'existe pas de tels algorithmes, le probl\u00e8me est dit ind\u00e9cidable Illustration : Un probl\u00e8me d\u00e9cidable : Soit \\(x \\in \\mathbb{N}\\) , le probl\u00e8me \" \\(x\\) est-il pair ?\" est d\u00e9cidable. Il existe un algorithme qui se termine en un temps fini qui d\u00e9cide si oui ou non \\(x\\) est pair. Un probl\u00e8me ind\u00e9cidable : \"Le barbier se rase-t-il ?\" du paradoxe du barbier. D\u00e9finition Une fonction \u0192 est une fonction calculable s'il existe une m\u00e9thode pr\u00e9cise qui, \u00e9tant donn\u00e9 un argument \\(x\\) , permet d'obtenir l'image \\(f(x)\\) en un nombre fini d'\u00e9tapes. Illustration : Une fonction calculable : Soit \\(x \\in \\mathbb{N}\\) , la fonction \"Quel est le reste de la division euclidienne de \\(x\\) par 2 ?\" est calculable. Il existe un algorithme qui se termine en un temps fini qui calcule le reste de la division euclidienne de \\(x\\) par 2. Une fonction non calculable : \"Qui rase le barbier ?\" du paradoxe du barbier. Les notions de d\u00e9cidabilit\u00e9 et de calculabilit\u00e9 sont \u00e9troitement li\u00e9es, mais cela sort du cadre de ce cours. Attention Si un probl\u00e8me est ind\u00e9cidable cela ne veut pas dire que l\u2019on n\u2019est pas capable de r\u00e9soudre ce probl\u00e8me, cela veut juste dire qu\u2019il n\u2019existe pas d\u2019algorithme capable de r\u00e9soudre ce probl\u00e8me. Un point historique Alonzo Church (\u00e0 gauche) et Alan Turing (\u00e0 droite) Source : Princeton University Source : Wikip\u00e9dia L'existence des probl\u00e8mes ind\u00e9cidables a \u00e9t\u00e9 prouv\u00e9 en 1937 par Alonzo Church et Alan Turing. D\u00e9finition Th\u00e9or\u00e8me fondamental de la calculabilit\u00e9 : Il existe des probl\u00e8mes non calculables par des fonctions. Question Est-ce que la non calculabilit\u00e9 d'une fonction est li\u00e9e au langage de programmation utilis\u00e9 ? Autrement dit, est-ce que Python (idem pour les autres langages de programmation) n'est tout simplement pas assez \"puissant\" pour \u00e9crire ces fonctions ? La th\u00e8se de Church-Turing montre l'\u00e9quivalence des langages de programmation et les mod\u00e8les th\u00e9oriques qu'ils ont invent\u00e9 ( \\(\\lambda\\) -calcul et Machine de Turing) En montrant l'ind\u00e9cidabilit\u00e9 de certains probl\u00e8mes (= la non-calculabilit\u00e9 de certaines fonctions) sur leurs mod\u00e8les th\u00e9oriques, Church et Turing (cf. vid\u00e9o ci-dessous) ont montr\u00e9 que les probl\u00e8mes ind\u00e9cidables ne peuvent \u00eatre programm\u00e9s sur un ordinateur, quelqu'il soit. La machine de Turing : Tout ne se calcule pas ! Source : Youtube L'argument central pour justifier cette affirmation peut s'\u00e9noncer en deux phrases : l'ensemble des algorithmes que l'on peut programmer par des fonctions (en python par exemple) est d\u00e9nombrable , puisqu'une fonction est une suite finie de caract\u00e8res l'ensemble des probl\u00e8mes est un ensemble ind\u00e9nombrable . Il n'y a donc tout simplement pas assez d'algorithmes pour r\u00e9soudre tous les probl\u00e8mes. Pour rappel, un infini d\u00e9nombrable est un infini que l'on peut compter : \\(\\mathbb{N}, \\mathbb{Z}, \\mathbb{Q}\\) sont d\u00e9nombrables par opposition \u00e0 \\(\\mathbb{R}\\) qui est ind\u00e9nombrable. Il est impossible de num\u00e9roter les nombres r\u00e9els. L'infini ind\u00e9nombrable des nombres r\u00e9els est bien plus grand que l'infini d\u00e9nombrable des entiers. De m\u00eame que la majorit\u00e9 des nombres sont des nombres r\u00e9els (bien plus nombreux que les entiers), la majorit\u00e9 des probl\u00e8mes ne sont pas d\u00e9cidables ! Le probl\u00e8me de l'arr\u00eat Contexte Soit la fonction suivante : 1 2 3 4 def ma_fonction ( n ): while n != 10 : n = n + 1 return n Question ma_fonction termine-t-elle ? Si oui, dans quels cas ? Si non, dans quels autres cas ? R\u00e9ponse ma_fonction traduit le \"cauchemar\" de tout programmeur. Dans certains cas, une fonction \"tombe\" dans une boucle infinie et ne s'arr\u00eate jamais. Dans ce cas, le logiciel est incapable de fournir la r\u00e9ponse attendue par l'utilisateur. Un programme qui permettrait de tester si un autre programme va finir par s'arr\u00eater, quel que soit le cas trait\u00e9, serait d'une grande aide pour tous les d\u00e9veloppeurs du monde ! Si on pouvait utiliser les instructions suivantes, nous aurions des \u00e9l\u00e9ments de r\u00e9ponses ! 1 2 3 4 5 6 7 8 9 >>> arret ( ma_fonction , 1 ) True >>> arret ( ma_fonction , 2 ) True ... >>> arret ( ma_fonction , 9 ) True >>> arret ( ma_fonction , 10 ) False Programmation de la fonction ? Maintenant que nous savons qu'un programme peut \u00eatre la donn\u00e9e d'un autre programme, \u00e9tudions la fonction arret Soir \\(f\\) , une fonction, et \\(n\\) la valeur d'entr\u00e9e de \\(f\\) , posons l'hypoth\u00e8se qu'il existe la fonction arret suivante : \\[ arret(f, n) = \\left\\{ \\begin{array}{ll} True & \\mbox{si le calcul de } f(n) \\mbox{ s'arr\u00eate} \\\\ False & \\mbox{sinon.} \\end{array} \\right. \\] Pour tester notre hypoth\u00e8se, d\u00e9finissons une fonction une_fonction : 1 2 3 4 5 def une_fonction ( n ): if arret ( une_fonction , n ): return une_fonction ( n ) else : return 1 Question Que vaut une_fonction(1) ? Analyse 2 cas sont possibles : arret(une_fonction, 1) renvoie True , alors par l'instruction 3, une_fonction(1) est appel\u00e9 par r\u00e9cursion, de mani\u00e8re successive et...sans se terminer ; ce qui est en contradiction avec le fait que arret(une_fonction, 1) renvoie True \u21d2 Le calcul de une_fonction(1) ne s'arr\u00eate pas si et seulement si il s'arr\u00eate. arret(une_fonction, 1) renvoie False , alors par l'instruction 5, une_fonction(1) se termine et renvoie 1; ce qui est une contraction avec le fait que arret(une_fonction, 1) renvoie False \u21d2 Le calcul de une_fonction(1) s'arr\u00eate si et seulement si il ne s'arr\u00eate pas. Conclusion Ainsi, dans l'ensemble des cas possibles, l'hypoth\u00e8se que la fonction arret existe m\u00e8ne \u00e0 une situation contradictoire. Nous pouvons donc conclure notre raisonnement par l\u2019absurde et affirmer que l'hypoth\u00e8se de d\u00e9part, \u00e0 savoir qu'il existe une fonction arret telle que d\u00e9finie ci-dessus est fausse. Le programme arret n'est pas programmable ! Une ressource vid\u00e9o qui illustre cette d\u00e9monstration : Proof That Computers Can't Do Everything (The Halting Problem) Source : Youtube Autres probl\u00e8mes D\u00e9finition Th\u00e9or\u00e8me de H.G.Rice (1951) : Toute propri\u00e9t\u00e9 non triviale (c.-\u00e0-d. qui n'est pas toujours vraie ou toujours fausse) des programmes est ind\u00e9cidable. Concr\u00e8tement, les probl\u00e8mes suivants sont ind\u00e9cidables : d\u00e9cider si un programme est conforme \u00e0 une sp\u00e9cification, d\u00e9cider si deux programmes sont \u00e9gaux, i.e ont les m\u00eames comportements pour les m\u00eames entr\u00e9es, corriger automatiquement des projets d'\u00e9l\u00e8ves, ... et bien d'autres ! Exercices - Correspondance de Post Le proble\u0300me de Post est un proble\u0300me de de\u0301cision. On se fixe un alphabet \\(A\\) . On d\u00e9finit un ensemble \\(D\\) de \u00ab dominos \u00bb sur chacun desquels on e\u0301crit deux mots. Une instance du proble\u0300me est ainsi une suite finie \\((u_1, v_1), (u_2, v_2), . . . , (u_n, v_n)\\) de couples de mots. Le proble\u0300me consiste a\u0300 savoir si on peut aligner des dominos de sorte que les mots re\u0301sultant sur chaque moitie\u0301 sont les me\u0302mes : existe-t-il une suite \\(k_1, k_2, ..., k_p\\) d\u2019indices a\u0300 prendre dans \\([1, n]\\) (on peut choisir plusieurs fois le me\u0302me indice) telle que les mots \\(u_{k_1}u_{k_2} ...u_{k_p}\\) et \\(v_{k_1}v_{k_2} ...v_{k_p}\\) soient identiques. Exemple 1 On fixe l'alphabet \\(A = \\{a, b\\}\\) et l'ensemble de dominos \\(D\\) suivant : \\[ \\begin{matrix} \\boxed{ \\begin{matrix} ab\\\\ \\hline aa \\end{matrix} } \\\\ 1 \\end{matrix} \\; \\begin{matrix} \\boxed{ \\begin{matrix} a\\\\ \\hline baa \\end{matrix} } \\\\ 2 \\end{matrix} \\; \\begin{matrix} \\boxed{ \\begin{matrix} bba\\\\ \\hline bb \\end{matrix} } \\\\ 3 \\end{matrix} \\] Cette instance admet la solution \\((3, 1, 3, 2)\\) \\[ \\boxed{ \\begin{matrix} bba\\\\ \\hline bb \\end{matrix} } \\boxed{ \\begin{matrix} ab\\\\ \\hline aa \\end{matrix} } \\boxed{ \\begin{matrix} bba\\\\ \\hline bb \\end{matrix} } \\boxed{ \\begin{matrix} a\\\\ \\hline baa \\end{matrix} } \\] En effet, si on prend les mots \\(u\\) (concat\u00e9nation des mots du haut des dominos) et \\(v\\) (concat\u00e9nation des mots du bas des dominos), on trouve : \\[ \\begin{align*} u &= v \\\\ u_3 u_1 u_3 u_2 &= v_3 v_1 v_3 v_2 \\\\ bba\\,ab\\,bba\\,a &= bb\\,aa\\,bb\\,baa \\end{align*} \\] Question Existe-t-il une solution aux instances suivantes du probl\u00e8me de correspondance de Post ? 1 - Soit l'alphabet \\(A = \\{a, b, c\\}\\) et l'ensemble \\(D\\) de dominos : \\[ \\begin{matrix} \\boxed{ \\begin{matrix} aba\\\\ \\hline a \\end{matrix} } \\\\ 1 \\end{matrix} \\; \\begin{matrix} \\boxed{ \\begin{matrix} aa\\\\ \\hline baa \\end{matrix} } \\\\ 2 \\end{matrix} \\; \\begin{matrix} \\boxed{ \\begin{matrix} bb\\\\ \\hline ab \\end{matrix} } \\\\ 3 \\end{matrix} \\] 2 - Soit l'alphabet \\(A = \\{a, b\\}\\) et l'ensemble \\(D\\) de dominos : \\[ \\begin{matrix} \\boxed{ \\begin{matrix} a\\\\ \\hline b \\end{matrix} } \\\\ 1 \\end{matrix} \\; \\begin{matrix} \\boxed{ \\begin{matrix} b\\\\ \\hline ab \\end{matrix} } \\\\ 2 \\end{matrix} \\; \\begin{matrix} \\boxed{ \\begin{matrix} ba\\\\ \\hline ab \\end{matrix} } \\\\ 3 \\end{matrix} \\] 3 - Soit l'alphabet \\(A = \\{a, b\\}\\) et l'ensemble \\(D\\) de dominos : \\[ \\begin{matrix} \\boxed{ \\begin{matrix} a\\\\ \\hline b \\end{matrix} } \\\\ 1 \\end{matrix} \\; \\begin{matrix} \\boxed{ \\begin{matrix} b\\\\ \\hline bb \\end{matrix} } \\\\ 2 \\end{matrix} \\; \\begin{matrix} \\boxed{ \\begin{matrix} ba\\\\ \\hline ab \\end{matrix} } \\\\ 3 \\end{matrix} \\] 4 - Soit l'alphabet \\(A = \\{a, b, c\\}\\) et l'ensemble \\(D\\) de dominos : \\[ \\begin{matrix} \\boxed{ \\begin{matrix} bb\\\\ \\hline b \\end{matrix} }\\\\ 1 \\end{matrix} \\; \\begin{matrix} \\boxed{ \\begin{matrix} c\\\\ \\hline bc \\end{matrix} } \\\\ 2 \\end{matrix} \\; \\begin{matrix} \\boxed{ \\begin{matrix} ab\\\\ \\hline ba \\end{matrix} } \\\\ 3 \\end{matrix} \\] 5 - Soit l'alphabet \\(A = \\{a, b\\}\\) et l'ensemble \\(D\\) de dominos : \\[ \\begin{matrix} \\boxed{ \\begin{matrix} b\\\\ \\hline a \\end{matrix} } \\\\ 1 \\end{matrix} \\; \\begin{matrix} \\boxed{ \\begin{matrix} a\\\\ \\hline ababa \\end{matrix} } \\\\ 2 \\end{matrix} \\; \\begin{matrix} \\boxed{ \\begin{matrix} ab\\\\ \\hline b \\end{matrix} } \\\\ 3 \\end{matrix} \\; \\begin{matrix} \\boxed{ \\begin{matrix} aba\\\\ \\hline a \\end{matrix} } \\\\ 4 \\end{matrix} \\] Pour aller plus loin Autres exemples de probl\u00e8mes ind\u00e9cidables Castor Affair\u00e9 Pavage d'un plan par des tuiles de Wang Sur le Probl\u00e8me de l'arr\u00eat Are There Problems That Computers Can't Solve? Source : Youtube Sur la th\u00e9orie de l'incompl\u00e9tude de G\u00f6del Les th\u00e9or\u00e8mes d'incompl\u00e9tude de G\u00f6del Source : Youtube","title":"Calculabilit\u00e9 / D\u00e9cidabilit\u00e9"},{"location":"terminale/bloc4/chapitre-02/COURS/#calculabilite-decidabilite","text":"","title":"Calculabilit\u00e9 / D\u00e9cidabilit\u00e9"},{"location":"terminale/bloc4/chapitre-02/COURS/#programme-officiel","text":"Contenus Capacit\u00e9s attendues Notion de programme en tant que donn\u00e9e. Calculabilit\u00e9, d\u00e9cidabilit\u00e9. Comprendre que tout programme est aussi une donn\u00e9e. Comprendre que la calculabilit\u00e9 ne d\u00e9pend pas du langage de programmation utilis\u00e9. Montrer, sans formalisme th\u00e9orique, que le probl\u00e8me de l\u2019arr\u00eat est ind\u00e9cidable.","title":"Programme officiel"},{"location":"terminale/bloc4/chapitre-02/COURS/#pre-requis","text":"Connaitre la d\u00e9finition et le fonctionnement d'une Machine de Turing Savoir programmer une fonction en Python","title":"Pr\u00e9-requis"},{"location":"terminale/bloc4/chapitre-02/COURS/#un-programme-une-donnee","text":"Nous allons tout d'abord expliciter un point important qui sera le fondement de la th\u00e9orie de la calculabilit\u00e9 : un programme est aussi une donn\u00e9e. Cela peut para\u00eetre \u00e9tonnant \u00e0 premi\u00e8re vue puisqu'on est habitu\u00e9 \u00e0 traiter : les programmes dans des fonctions , les donn\u00e9es dans des variables . Fonctions et variables sont des objets de nature diff\u00e9rente en apparence. Si on se raccroche \u00e0 ce que l'on conna\u00eet en python, une fonction se d\u00e9clare avec le mot cl\u00e9 def et une variable s'initialise avec l'op\u00e9rateur d'affectation =. Prenons en exemple l'algorithme d'Euclide, un algorithme vieux de plus de 2500 ans, permettant de calculer le PGCD de 2 nombres. On peut l'\u00e9crire \u00e0 l'aide d'une fonction Python: 1 2 3 4 5 6 def euclide ( a , b ): if a < b : a , b = b , a while b : a , b = b , a % b return a Dans ce programme Python, euclide est une fonction et a et b sont des donn\u00e9es . Ils ne semblent pas \u00eatre de nature comparable : 1 2 >>> euclide ( 35 , 49 ) 7 Et pourtant, \u00e0 y regarder de plus pr\u00e8s, notre algorithme programm\u00e9 dans la fonction euclide n'est rien d'autre qu'une succession de caract\u00e8res. On peut m\u00eame pousser la r\u00e9flexion jusqu'\u00e0 cr\u00e9er une cha\u00eene de caract\u00e8re contenant ce programme : 1 mon_programme = \"def euclide(a,b): \\n\\t if a < b: a,b=b,a \\n\\t while b: a,b=b,a%b \\n\\t return a\" Maintenant mon algorithme est devenu une variable . On peut alors construire une machine universelle capable d'\u00e9valuer n'importe quelle donn\u00e9e contenant un algorithme formalis\u00e9 dans le langage Python : 1 2 3 4 5 def universel ( algo , * args ): exec ( algo ) ligne1 = algo . split ( ' \\n ' )[ 0 ] nom = ligne1 . split ( '(' )[ 0 ][ 4 :] return eval ( f \" { nom }{ args } \" ) A pr\u00e9sent, il est possible d'invoquer la machine universelle en lui passant en donn\u00e9es : la variable contenant mon algorithme les arguments sur lequel celui-ci va travailler et obtenir la r\u00e9ponse 1 2 >>> universel ( mon_programme , 35 , 49 ) 7 Dans l'exemple ci-dessus, vous pouvez constater que le programme et les donn\u00e9es sur lesquelles il agit sont de m\u00eame nature : ce sont 3 variables pass\u00e9es en param\u00e8tres \u00e0 ma fonction universelle. Important Un programme est aussi une donn\u00e9e. Question Citez d'autres exemples o\u00f9 un programme est consid\u00e9r\u00e9 comme donn\u00e9e ?","title":"Un programme : une donn\u00e9e"},{"location":"terminale/bloc4/chapitre-02/COURS/#preambule","text":"Face \u00e0 un probl\u00e8me ou une question, nous avons l'habitude de : formaliser le probl\u00e8me et le ou les solutions possibles, d\u00e9crire un algorithme qui d\u00e9termine la m\u00e9thode de calcul d'une solution, puis de coder cet algorithme sous la forme d'un programme dans un langage donn\u00e9, puis de faire ex\u00e9cuter ce programme par une machine pour obtenir la solution. Une question (sous diff\u00e9rentes formulations) \u00e9merge alors : Questions Peut-on tout programmer ? Pour tout probl\u00e8me, est-il possible d'\u00e9crire un programme qui permette de calculer une solution ? Tout probl\u00e8me a-t-il une solution ?","title":"Pr\u00e9ambule"},{"location":"terminale/bloc4/chapitre-02/COURS/#le-probleme-du-barbier","text":"Question Dans une ville o\u00f9 les gens : soit se rasent eux-m\u00eames, soit se font raser par le barbier. Qui rase le barbier ? R\u00e9ponse Pour r\u00e9pondre \u00e0 cette question, on peut raisonner ainsi : Soit le barbier se rase lui-m\u00eame et, dans ce cas, il n'est pas ras\u00e9 par le barbier, Soit le barbier ne se rase pas lui m\u00eame et il est donc ras\u00e9 par le barbier. \u21d2 Contradiction ! Soit le barbier se rase lui-m\u00eame et donc le barbier ne le rase pas, soit il ne se rase pas lui-m\u00eame et donc il se rase lui-m\u00eame. On doit conclure que l'hypoth\u00e8se de d\u00e9part est fausse. Une ville avec de tels habitants ne peut exister et, de la m\u00eame mani\u00e8re que l'algorithme qui permette de calculer la solution \u00e0 ce probl\u00e8me n'existe pas non plus. Ce probl\u00e8me connu sous le nom du paradoxe du Barbier nous permet d\u00e9j\u00e0 de r\u00e9pondre aux questions pos\u00e9es en pr\u00e9ambule : Questions Peut-on tout programmer ? NON Pour tout probl\u00e8me, est-il possible d'\u00e9crire un programme qui permette de calculer une solution ? NON Tout probl\u00e8me a-t-il une solution ? NON","title":"Le probl\u00e8me du Barbier"},{"location":"terminale/bloc4/chapitre-02/COURS/#definition","text":"D\u00e9finition Un probl\u00e8me de d\u00e9cision est dit d\u00e9cidable s'il existe un algorithme, une proc\u00e9dure m\u00e9canique qui se termine en un nombre fini d'\u00e9tapes, qui le d\u00e9cide, c'est-\u00e0-dire qui r\u00e9ponde par oui ou par non \u00e0 la question pos\u00e9e par le probl\u00e8me. S'il n'existe pas de tels algorithmes, le probl\u00e8me est dit ind\u00e9cidable Illustration : Un probl\u00e8me d\u00e9cidable : Soit \\(x \\in \\mathbb{N}\\) , le probl\u00e8me \" \\(x\\) est-il pair ?\" est d\u00e9cidable. Il existe un algorithme qui se termine en un temps fini qui d\u00e9cide si oui ou non \\(x\\) est pair. Un probl\u00e8me ind\u00e9cidable : \"Le barbier se rase-t-il ?\" du paradoxe du barbier. D\u00e9finition Une fonction \u0192 est une fonction calculable s'il existe une m\u00e9thode pr\u00e9cise qui, \u00e9tant donn\u00e9 un argument \\(x\\) , permet d'obtenir l'image \\(f(x)\\) en un nombre fini d'\u00e9tapes. Illustration : Une fonction calculable : Soit \\(x \\in \\mathbb{N}\\) , la fonction \"Quel est le reste de la division euclidienne de \\(x\\) par 2 ?\" est calculable. Il existe un algorithme qui se termine en un temps fini qui calcule le reste de la division euclidienne de \\(x\\) par 2. Une fonction non calculable : \"Qui rase le barbier ?\" du paradoxe du barbier. Les notions de d\u00e9cidabilit\u00e9 et de calculabilit\u00e9 sont \u00e9troitement li\u00e9es, mais cela sort du cadre de ce cours. Attention Si un probl\u00e8me est ind\u00e9cidable cela ne veut pas dire que l\u2019on n\u2019est pas capable de r\u00e9soudre ce probl\u00e8me, cela veut juste dire qu\u2019il n\u2019existe pas d\u2019algorithme capable de r\u00e9soudre ce probl\u00e8me.","title":"D\u00e9finition"},{"location":"terminale/bloc4/chapitre-02/COURS/#un-point-historique","text":"Alonzo Church (\u00e0 gauche) et Alan Turing (\u00e0 droite) Source : Princeton University Source : Wikip\u00e9dia L'existence des probl\u00e8mes ind\u00e9cidables a \u00e9t\u00e9 prouv\u00e9 en 1937 par Alonzo Church et Alan Turing. D\u00e9finition Th\u00e9or\u00e8me fondamental de la calculabilit\u00e9 : Il existe des probl\u00e8mes non calculables par des fonctions. Question Est-ce que la non calculabilit\u00e9 d'une fonction est li\u00e9e au langage de programmation utilis\u00e9 ? Autrement dit, est-ce que Python (idem pour les autres langages de programmation) n'est tout simplement pas assez \"puissant\" pour \u00e9crire ces fonctions ? La th\u00e8se de Church-Turing montre l'\u00e9quivalence des langages de programmation et les mod\u00e8les th\u00e9oriques qu'ils ont invent\u00e9 ( \\(\\lambda\\) -calcul et Machine de Turing) En montrant l'ind\u00e9cidabilit\u00e9 de certains probl\u00e8mes (= la non-calculabilit\u00e9 de certaines fonctions) sur leurs mod\u00e8les th\u00e9oriques, Church et Turing (cf. vid\u00e9o ci-dessous) ont montr\u00e9 que les probl\u00e8mes ind\u00e9cidables ne peuvent \u00eatre programm\u00e9s sur un ordinateur, quelqu'il soit. La machine de Turing : Tout ne se calcule pas ! Source : Youtube L'argument central pour justifier cette affirmation peut s'\u00e9noncer en deux phrases : l'ensemble des algorithmes que l'on peut programmer par des fonctions (en python par exemple) est d\u00e9nombrable , puisqu'une fonction est une suite finie de caract\u00e8res l'ensemble des probl\u00e8mes est un ensemble ind\u00e9nombrable . Il n'y a donc tout simplement pas assez d'algorithmes pour r\u00e9soudre tous les probl\u00e8mes. Pour rappel, un infini d\u00e9nombrable est un infini que l'on peut compter : \\(\\mathbb{N}, \\mathbb{Z}, \\mathbb{Q}\\) sont d\u00e9nombrables par opposition \u00e0 \\(\\mathbb{R}\\) qui est ind\u00e9nombrable. Il est impossible de num\u00e9roter les nombres r\u00e9els. L'infini ind\u00e9nombrable des nombres r\u00e9els est bien plus grand que l'infini d\u00e9nombrable des entiers. De m\u00eame que la majorit\u00e9 des nombres sont des nombres r\u00e9els (bien plus nombreux que les entiers), la majorit\u00e9 des probl\u00e8mes ne sont pas d\u00e9cidables !","title":"Un point historique"},{"location":"terminale/bloc4/chapitre-02/COURS/#le-probleme-de-larret","text":"","title":"Le probl\u00e8me de l'arr\u00eat"},{"location":"terminale/bloc4/chapitre-02/COURS/#contexte","text":"Soit la fonction suivante : 1 2 3 4 def ma_fonction ( n ): while n != 10 : n = n + 1 return n Question ma_fonction termine-t-elle ? Si oui, dans quels cas ? Si non, dans quels autres cas ? R\u00e9ponse ma_fonction traduit le \"cauchemar\" de tout programmeur. Dans certains cas, une fonction \"tombe\" dans une boucle infinie et ne s'arr\u00eate jamais. Dans ce cas, le logiciel est incapable de fournir la r\u00e9ponse attendue par l'utilisateur. Un programme qui permettrait de tester si un autre programme va finir par s'arr\u00eater, quel que soit le cas trait\u00e9, serait d'une grande aide pour tous les d\u00e9veloppeurs du monde ! Si on pouvait utiliser les instructions suivantes, nous aurions des \u00e9l\u00e9ments de r\u00e9ponses ! 1 2 3 4 5 6 7 8 9 >>> arret ( ma_fonction , 1 ) True >>> arret ( ma_fonction , 2 ) True ... >>> arret ( ma_fonction , 9 ) True >>> arret ( ma_fonction , 10 ) False","title":"Contexte"},{"location":"terminale/bloc4/chapitre-02/COURS/#programmation-de-la-fonction","text":"Maintenant que nous savons qu'un programme peut \u00eatre la donn\u00e9e d'un autre programme, \u00e9tudions la fonction arret Soir \\(f\\) , une fonction, et \\(n\\) la valeur d'entr\u00e9e de \\(f\\) , posons l'hypoth\u00e8se qu'il existe la fonction arret suivante : \\[ arret(f, n) = \\left\\{ \\begin{array}{ll} True & \\mbox{si le calcul de } f(n) \\mbox{ s'arr\u00eate} \\\\ False & \\mbox{sinon.} \\end{array} \\right. \\] Pour tester notre hypoth\u00e8se, d\u00e9finissons une fonction une_fonction : 1 2 3 4 5 def une_fonction ( n ): if arret ( une_fonction , n ): return une_fonction ( n ) else : return 1 Question Que vaut une_fonction(1) ? Analyse 2 cas sont possibles : arret(une_fonction, 1) renvoie True , alors par l'instruction 3, une_fonction(1) est appel\u00e9 par r\u00e9cursion, de mani\u00e8re successive et...sans se terminer ; ce qui est en contradiction avec le fait que arret(une_fonction, 1) renvoie True \u21d2 Le calcul de une_fonction(1) ne s'arr\u00eate pas si et seulement si il s'arr\u00eate. arret(une_fonction, 1) renvoie False , alors par l'instruction 5, une_fonction(1) se termine et renvoie 1; ce qui est une contraction avec le fait que arret(une_fonction, 1) renvoie False \u21d2 Le calcul de une_fonction(1) s'arr\u00eate si et seulement si il ne s'arr\u00eate pas. Conclusion Ainsi, dans l'ensemble des cas possibles, l'hypoth\u00e8se que la fonction arret existe m\u00e8ne \u00e0 une situation contradictoire. Nous pouvons donc conclure notre raisonnement par l\u2019absurde et affirmer que l'hypoth\u00e8se de d\u00e9part, \u00e0 savoir qu'il existe une fonction arret telle que d\u00e9finie ci-dessus est fausse. Le programme arret n'est pas programmable ! Une ressource vid\u00e9o qui illustre cette d\u00e9monstration : Proof That Computers Can't Do Everything (The Halting Problem) Source : Youtube","title":"Programmation de la fonction ?"},{"location":"terminale/bloc4/chapitre-02/COURS/#autres-problemes","text":"D\u00e9finition Th\u00e9or\u00e8me de H.G.Rice (1951) : Toute propri\u00e9t\u00e9 non triviale (c.-\u00e0-d. qui n'est pas toujours vraie ou toujours fausse) des programmes est ind\u00e9cidable. Concr\u00e8tement, les probl\u00e8mes suivants sont ind\u00e9cidables : d\u00e9cider si un programme est conforme \u00e0 une sp\u00e9cification, d\u00e9cider si deux programmes sont \u00e9gaux, i.e ont les m\u00eames comportements pour les m\u00eames entr\u00e9es, corriger automatiquement des projets d'\u00e9l\u00e8ves, ... et bien d'autres !","title":"Autres probl\u00e8mes"},{"location":"terminale/bloc4/chapitre-02/COURS/#exercices-correspondance-de-post","text":"Le proble\u0300me de Post est un proble\u0300me de de\u0301cision. On se fixe un alphabet \\(A\\) . On d\u00e9finit un ensemble \\(D\\) de \u00ab dominos \u00bb sur chacun desquels on e\u0301crit deux mots. Une instance du proble\u0300me est ainsi une suite finie \\((u_1, v_1), (u_2, v_2), . . . , (u_n, v_n)\\) de couples de mots. Le proble\u0300me consiste a\u0300 savoir si on peut aligner des dominos de sorte que les mots re\u0301sultant sur chaque moitie\u0301 sont les me\u0302mes : existe-t-il une suite \\(k_1, k_2, ..., k_p\\) d\u2019indices a\u0300 prendre dans \\([1, n]\\) (on peut choisir plusieurs fois le me\u0302me indice) telle que les mots \\(u_{k_1}u_{k_2} ...u_{k_p}\\) et \\(v_{k_1}v_{k_2} ...v_{k_p}\\) soient identiques.","title":"Exercices - Correspondance de Post"},{"location":"terminale/bloc4/chapitre-02/COURS/#pour-aller-plus-loin","text":"","title":"Pour aller plus loin"},{"location":"terminale/bloc4/chapitre-02/COURS/#autres-exemples-de-problemes-indecidables","text":"Castor Affair\u00e9 Pavage d'un plan par des tuiles de Wang","title":"Autres exemples de probl\u00e8mes ind\u00e9cidables"},{"location":"terminale/bloc4/chapitre-02/COURS/#sur-le-probleme-de-larret","text":"Are There Problems That Computers Can't Solve? Source : Youtube","title":"Sur le Probl\u00e8me de l'arr\u00eat"},{"location":"terminale/bloc4/chapitre-02/COURS/#sur-la-theorie-de-lincompletude-de-godel","text":"Les th\u00e9or\u00e8mes d'incompl\u00e9tude de G\u00f6del Source : Youtube","title":"Sur la th\u00e9orie de l'incompl\u00e9tude de G\u00f6del"},{"location":"terminale/bloc4/chapitre-02/TURING/","text":"Machine de Turing Pr\u00e9ambule En informatique th\u00e9orique, une machine de Turing est un mod\u00e8le abstrait du fonctionnement des appareils m\u00e9caniques de calcul, tel un ordinateur. Ce mod\u00e8le a \u00e9t\u00e9 imagin\u00e9 par Alan Turing en 1936, en vue de donner une d\u00e9finition pr\u00e9cise au concept d\u2019algorithme ou de \u00ab proc\u00e9dure m\u00e9canique \u00bb. Alan Turing Source : Wikip\u00e9dia Une Machine de Turing est un concept abstrait, un mod\u00e8le virtuel , mais fondamental en informatique. La th\u00e8se de Church postule que tout probl\u00e8me de calcul fond\u00e9 sur une proc\u00e9dure algorithmique peut \u00eatre r\u00e9solu par une machine de Turing. Autrement dit, tout ce qui peut \u00eatre programmer sur un ordinateur peut l'\u00eatre sur une machine de Turing est inversement. D\u00e9finition e 1 Registre d'\u00e9tat Table de transitions \u00c9tat courant Symbole lu Symbole \u00e9crit Mouvement Nouvel \u00e9tat e 1 0 (Arr\u00eat) 1 0 Droite e 2 e 2 0 1 Droite e 2 1 1 Gauche e 1 1 0 0 1 1 1 0 \u25b2 Ruban infini et T\u00eate de lecture/\u00e9criture Une machine de Turing comporte les \u00e9l\u00e9ments suivants : Un ruban infini divis\u00e9 en cases cons\u00e9cutives. Chaque case contient un symbole d'un alphabet fini donn\u00e9. L'alphabet contient un symbole sp\u00e9cial appel\u00e9 \u00ab symbole blanc \u00bb et un ou plusieurs autres symboles. Le ruban est suppos\u00e9 \u00eatre de longueur infinie vers la gauche ou vers la droite, en d'autres termes la machine doit toujours avoir assez de longueur de ruban pour son ex\u00e9cution. On consid\u00e8re que les cases du ruban contiennent par d\u00e9faut le \u00ab symbole blanc \u00bb ; Une t\u00eate de lecture/\u00e9criture qui peut lire et \u00e9crire les symboles sur le ruban, et se d\u00e9placer vers la gauche ou vers la droite du ruban ; Un registre d'\u00e9tat qui m\u00e9morise l'\u00e9tat courant de la machine de Turing. Le nombre d'\u00e9tats possibles est toujours fini, et il existe un \u00e9tat sp\u00e9cial appel\u00e9 \u00ab \u00e9tat de d\u00e9part \u00bb qui est l'\u00e9tat initial de la machine avant son ex\u00e9cution ; Une table de transitions qui indique \u00e0 la machine quel symbole \u00e9crire sur le ruban, comment d\u00e9placer la t\u00eate de lecture (par exemple \u00ab \\(\\leftarrow\\) \u00bb pour une case vers la gauche, \u00ab \\(\\rightarrow\\) \u00bb pour une case vers la droite), et quel est le nouvel \u00e9tat, en fonction du symbole lu sur le ruban et de l'\u00e9tat courant de la machine. Si aucune action n'existe pour une combinaison donn\u00e9e d'un symbole lu et d'un \u00e9tat courant, la machine s'arr\u00eate. Exercices Exercice 1 Soit la machine de Turing \\(M\\) , dont la table de transitions et le registre d'\u00e9tat sont les suivants : e 1 Registre d'\u00e9tat Table de transitions \u00c9tat courant Symbole lu Symbole \u00e9crit Mouvement Nouvel \u00e9tat e 1 VIDE VIDE Droite e 2 e 2 0 0 Droite e 2 1 1 Droite e 2 VIDE VIDE Gauche e 3 e 3 0 1 Gauche (Arr\u00eat) 1 0 Gauche e 3 VIDE 1 Gauche (Arr\u00eat) 1 - Quel est le r\u00e9sultat obtenu (sur le ruban) de \\(M\\) si le ruban et la t\u00eate de lecture/\u00e9criture sont initialis\u00e9s avec les valeurs suivantes ? 1 0 \u25b2 Ruban infini et T\u00eate de lecture/\u00e9criture 2 - Quel est le r\u00e9sultat obtenu (sur le ruban) de \\(M\\) si le ruban et la t\u00eate de lecture/\u00e9criture sont initialis\u00e9s avec les valeurs suivantes ? 1 1 1 \u25b2 Ruban infini et T\u00eate de lecture/\u00e9criture 3 - Quel est le r\u00e9sultat obtenu (sur le ruban) de \\(M\\) si le ruban et la t\u00eate de lecture/\u00e9criture sont initialis\u00e9s avec les valeurs suivantes ? 1 0 1 0 1 1 \u25b2 Ruban infini et T\u00eate de lecture/\u00e9criture 4 - Qu'en d\u00e9duisez-vous sur l'op\u00e9ration effectu\u00e9e par la machine \\(M\\) ? Pour aller plus loin Comment fonctionne une machine de Turing ? , Article sur le site Interstices.info avec une animation sur quelques machines de Turing.","title":"Machine de Turing"},{"location":"terminale/bloc4/chapitre-02/TURING/#machine-de-turing","text":"","title":"Machine de Turing"},{"location":"terminale/bloc4/chapitre-02/TURING/#preambule","text":"En informatique th\u00e9orique, une machine de Turing est un mod\u00e8le abstrait du fonctionnement des appareils m\u00e9caniques de calcul, tel un ordinateur. Ce mod\u00e8le a \u00e9t\u00e9 imagin\u00e9 par Alan Turing en 1936, en vue de donner une d\u00e9finition pr\u00e9cise au concept d\u2019algorithme ou de \u00ab proc\u00e9dure m\u00e9canique \u00bb. Alan Turing Source : Wikip\u00e9dia Une Machine de Turing est un concept abstrait, un mod\u00e8le virtuel , mais fondamental en informatique. La th\u00e8se de Church postule que tout probl\u00e8me de calcul fond\u00e9 sur une proc\u00e9dure algorithmique peut \u00eatre r\u00e9solu par une machine de Turing. Autrement dit, tout ce qui peut \u00eatre programmer sur un ordinateur peut l'\u00eatre sur une machine de Turing est inversement.","title":"Pr\u00e9ambule"},{"location":"terminale/bloc4/chapitre-02/TURING/#definition","text":"e 1 Registre d'\u00e9tat Table de transitions \u00c9tat courant Symbole lu Symbole \u00e9crit Mouvement Nouvel \u00e9tat e 1 0 (Arr\u00eat) 1 0 Droite e 2 e 2 0 1 Droite e 2 1 1 Gauche e 1 1 0 0 1 1 1 0 \u25b2 Ruban infini et T\u00eate de lecture/\u00e9criture Une machine de Turing comporte les \u00e9l\u00e9ments suivants : Un ruban infini divis\u00e9 en cases cons\u00e9cutives. Chaque case contient un symbole d'un alphabet fini donn\u00e9. L'alphabet contient un symbole sp\u00e9cial appel\u00e9 \u00ab symbole blanc \u00bb et un ou plusieurs autres symboles. Le ruban est suppos\u00e9 \u00eatre de longueur infinie vers la gauche ou vers la droite, en d'autres termes la machine doit toujours avoir assez de longueur de ruban pour son ex\u00e9cution. On consid\u00e8re que les cases du ruban contiennent par d\u00e9faut le \u00ab symbole blanc \u00bb ; Une t\u00eate de lecture/\u00e9criture qui peut lire et \u00e9crire les symboles sur le ruban, et se d\u00e9placer vers la gauche ou vers la droite du ruban ; Un registre d'\u00e9tat qui m\u00e9morise l'\u00e9tat courant de la machine de Turing. Le nombre d'\u00e9tats possibles est toujours fini, et il existe un \u00e9tat sp\u00e9cial appel\u00e9 \u00ab \u00e9tat de d\u00e9part \u00bb qui est l'\u00e9tat initial de la machine avant son ex\u00e9cution ; Une table de transitions qui indique \u00e0 la machine quel symbole \u00e9crire sur le ruban, comment d\u00e9placer la t\u00eate de lecture (par exemple \u00ab \\(\\leftarrow\\) \u00bb pour une case vers la gauche, \u00ab \\(\\rightarrow\\) \u00bb pour une case vers la droite), et quel est le nouvel \u00e9tat, en fonction du symbole lu sur le ruban et de l'\u00e9tat courant de la machine. Si aucune action n'existe pour une combinaison donn\u00e9e d'un symbole lu et d'un \u00e9tat courant, la machine s'arr\u00eate.","title":"D\u00e9finition"},{"location":"terminale/bloc4/chapitre-02/TURING/#exercices","text":"","title":"Exercices"},{"location":"terminale/bloc4/chapitre-02/TURING/#exercice-1","text":"Soit la machine de Turing \\(M\\) , dont la table de transitions et le registre d'\u00e9tat sont les suivants : e 1 Registre d'\u00e9tat Table de transitions \u00c9tat courant Symbole lu Symbole \u00e9crit Mouvement Nouvel \u00e9tat e 1 VIDE VIDE Droite e 2 e 2 0 0 Droite e 2 1 1 Droite e 2 VIDE VIDE Gauche e 3 e 3 0 1 Gauche (Arr\u00eat) 1 0 Gauche e 3 VIDE 1 Gauche (Arr\u00eat) 1 - Quel est le r\u00e9sultat obtenu (sur le ruban) de \\(M\\) si le ruban et la t\u00eate de lecture/\u00e9criture sont initialis\u00e9s avec les valeurs suivantes ? 1 0 \u25b2 Ruban infini et T\u00eate de lecture/\u00e9criture 2 - Quel est le r\u00e9sultat obtenu (sur le ruban) de \\(M\\) si le ruban et la t\u00eate de lecture/\u00e9criture sont initialis\u00e9s avec les valeurs suivantes ? 1 1 1 \u25b2 Ruban infini et T\u00eate de lecture/\u00e9criture 3 - Quel est le r\u00e9sultat obtenu (sur le ruban) de \\(M\\) si le ruban et la t\u00eate de lecture/\u00e9criture sont initialis\u00e9s avec les valeurs suivantes ? 1 0 1 0 1 1 \u25b2 Ruban infini et T\u00eate de lecture/\u00e9criture 4 - Qu'en d\u00e9duisez-vous sur l'op\u00e9ration effectu\u00e9e par la machine \\(M\\) ?","title":"Exercice 1"},{"location":"terminale/bloc4/chapitre-02/TURING/#pour-aller-plus-loin","text":"Comment fonctionne une machine de Turing ? , Article sur le site Interstices.info avec une animation sur quelques machines de Turing.","title":"Pour aller plus loin"},{"location":"terminale/bloc4/chapitre-03/","text":"R\u00e9cursivit\u00e9 Point commun entre ces 3 photos : elles comportent toutes une structure r\u00e9cursive . Une poup\u00e9e russe, c\u2019est une poup\u00e9e avec une poup\u00e9e russe \u00e0 l\u2019int\u00e9rieur. Une boite de vache qui rit c'est une boite qui contient une photo de vache qui a une boucle d'oreille en forme de boite qui contient une photo de vache qui a une boucle d'oreille... En programmation, nombreux sont les probl\u00e8mes qu\u2019on r\u00e9sout en r\u00e9p\u00e9tant plusieurs fois des s\u00e9quences d\u2019instructions (par le biais de boucles born\u00e9es ou non). Mais certains probl\u00e8mes se r\u00e9solvent simplement en r\u00e9solvant un sous probl\u00e8me de m\u00eame nature, mais plus simple. Cette m\u00e9thode de r\u00e9solution s\u2019appelle la r\u00e9cursivit\u00e9. D\u00e9finition D\u00e9finition Propri\u00e9t\u00e9 que poss\u00e8de une r\u00e8gle ou un \u00e9l\u00e9ment constituant de pouvoir se r\u00e9p\u00e9ter de mani\u00e8re th\u00e9oriquement ind\u00e9finie. Illustrations Factorielle d'un entier naturel La fonction math\u00e9matique factorielle de \\(n\\) s'exprime par : \\[ \\begin{align*} n! = \\prod _{1\\leqslant i\\leqslant n}i & = n \\times (n - 1) \\times (n - 2) ... \\times 1\\\\ & = n \\times \\underbrace{{\\color{red}{(n - 1) \\times (n - 2) ... \\times 1}}}_{(n - 1)!}\\\\& = n \\times (n - 1) ! \\end{align*} \\] Travail \u00c9crire l'algorithme r\u00e9cursif factorielle , qui prend en param\u00e8tre un entier \\(n\\) , et renvoie la factorielle de \\(n\\) . R\u00e9ponse 1 2 3 4 def factorielle ( n ): if n == 0 or n == 1 : return 1 return n * factorielle ( n - 1 ) Somme des premiers termes La fonction math\u00e9matique Somme des \\(n\\) premiers termes, pour \\(n \\in \\mathbb{N}\\) s'exprime par : \\[ \\begin{align*} \\sum_{i=1}^{n} i & = 1 + 2 + 3 + ... + n \\\\ & = 1 + \\underbrace{{\\color{red}{2 + 3 + ... + n}}}_{\\sum_{i=2}^{n} i } \\\\ & = 1 + 2 + \\underbrace{{\\color{red}{3 + ... + n}}}_{\\sum_{i=3}^{n} i } \\end{align*} \\] Travail \u00c9crire l'algorithme r\u00e9cursif somme , qui prend en param\u00e8tre un entier \\(n\\) , et renvoie la somme des entiers jusque \\(n\\) . R\u00e9ponse 1 2 3 4 def somme ( n ): if n == 0 : return 0 return n + somme ( n - 1 ) Parit\u00e9 / Imparit\u00e9 d'un entier naturel Sachant que 0 est pair, et 1 impair. Pour tout \\(n \\geq 2\\) , que peut-on dire de : pair( \\(n\\) ) par rapport \u00e0 pair( \\(n - 2\\) ), de pair ( \\(n - 4\\) ) ...? impair( \\(n\\) ) par rapport \u00e0 de impair( \\(n - 2\\) ), de impair ( \\(n - 4\\) ) ...? Travail \u00c9crire un algorithme r\u00e9cursif pair , prenant un entier \\(n\\) en param\u00e8tre, et renvoie Vrai si \\(n\\) est pair, Faux sinon. \u00c9crire un algorithme r\u00e9cursif impair , prenant un entier \\(n\\) en param\u00e8tre, et renvoie Vrai si \\(n\\) est impair, Faux sinon. R\u00e9ponse 1 1 2 3 4 5 6 def pair ( n ): if n == 0 : return True if n == 1 : return False return pair ( n - 2 ) R\u00e9ponse 2 1 2 3 4 5 6 def impair ( n ): if n == 0 : return False if n == 1 : return True return impair ( n - 2 ) Question Que peut-on dire de : pair(12) par rapport \u00e0 impair(11) ? impair(7) par rapport \u00e0 pair(6) ? pair( \\(n\\) ) par rapport \u00e0 impair( \\(n - 1\\) ) ? impair( \\(n\\) ) par rapport \u00e0 pair( \\(n - 1\\) ) ? R\u00e9ponse pair( \\(n\\) ) = impair( \\(n - 1\\) ) impair( \\(n\\) ) = pair( \\(n - 1\\) ) Travail Modifier l'algorithme r\u00e9cursif pair , afin ne d'utiliser que l'algorithme impair . Modifier l'algorithme r\u00e9cursif impair , afin ne d'utiliser que l'algorithme pair . R\u00e9ponse 1 2 3 4 5 6 7 8 9 10 11 12 13 def pair ( n ): if n == 0 : return True if n == 1 : return False return impair ( n - 1 ) def impair ( n ): if n == 0 : return False if n == 1 : return True return pair ( n - 1 ) Propri\u00e9t\u00e9s Des travaux pr\u00e9c\u00e9dents, on peut tirer 2 r\u00e8gles pour \u00e9crire un algorithme r\u00e9cursif : 1.Tout algorithme r\u00e9cursif doit distinguer plusieurs cas dont l\u2019un au moins ne doit pas contenir d\u2019appels r\u00e9cursifs. Sinon, il y a risque de cercle vicieux et de calcul infini. 2.Tout appel r\u00e9cursif doit se faire avec des donn\u00e9es plus proches de donn\u00e9es satisfaisant les conditions de terminaison. 3.Deux algorithmes sont mutuellement r\u00e9cursifs si l\u2019un fait appel \u00e0 l\u2019autre et l\u2019autre \u00e0 l\u2019un. \\[ \\begin{align*} fact(4) & = 4 \\times fact(3) \\\\ & = 4 \\times 3 \\times fact(2) \\\\ & = 4 \\times 3 \\times 2 \\times fact(1) \\\\ & = 4 \\times 3 \\times 2 \\times 1 \\times fact(0) \\\\ & = 4 \\times 3 \\times 2 \\times 1 \\times 1 \\\\ & = 24 \\end{align*} \\] On note que des calculs restent en attente, jusqu\u2019\u00e0 ce qu\u2019on atteigne le cas o\u00f9 il ne reste plus d\u2019appel \u00e0 la fonction \ud835\ude8f\ud835\ude8a\ud835\ude8c\ud835\ude9d dans l\u2019expression \u00e0 calculer. D\u00e9recursiver Exercice : Probl\u00e8me des tours de Hanoi Travail Regarder et r\u00e9pondre aux questions pos\u00e9es durant la vid\u00e9o. Travail \u00c9crire l'algorithme r\u00e9cursif hanoi , qui prend en param\u00e8tres : \\(n\\) : le nombre de disques \u00e0 d\u00e9placer, \\(d\\) : le num\u00e9ro de disque de d\u00e9part, \\(i\\) : le num\u00e9ro de disque interm\u00e9diaire, \\(a\\) : le num\u00e9ro de dique d'arriv\u00e9e. Et a pour effet de bord de d\u00e9placer tous les disques dans le bon ordre sur le disque d'arriv\u00e9e. R\u00e9ponse 1 2 3 4 5 6 Algorithme hanoi ( n , d , a , i ): Si n != 0 hanoi ( n - 1 , d , i , a ) deplacer d vers a hanoi ( n - 1 , i , a , d ) FinSi","title":"R\u00e9cursivit\u00e9"},{"location":"terminale/bloc4/chapitre-03/#recursivite","text":"Point commun entre ces 3 photos : elles comportent toutes une structure r\u00e9cursive . Une poup\u00e9e russe, c\u2019est une poup\u00e9e avec une poup\u00e9e russe \u00e0 l\u2019int\u00e9rieur. Une boite de vache qui rit c'est une boite qui contient une photo de vache qui a une boucle d'oreille en forme de boite qui contient une photo de vache qui a une boucle d'oreille... En programmation, nombreux sont les probl\u00e8mes qu\u2019on r\u00e9sout en r\u00e9p\u00e9tant plusieurs fois des s\u00e9quences d\u2019instructions (par le biais de boucles born\u00e9es ou non). Mais certains probl\u00e8mes se r\u00e9solvent simplement en r\u00e9solvant un sous probl\u00e8me de m\u00eame nature, mais plus simple. Cette m\u00e9thode de r\u00e9solution s\u2019appelle la r\u00e9cursivit\u00e9.","title":"R\u00e9cursivit\u00e9"},{"location":"terminale/bloc4/chapitre-03/#definition","text":"D\u00e9finition Propri\u00e9t\u00e9 que poss\u00e8de une r\u00e8gle ou un \u00e9l\u00e9ment constituant de pouvoir se r\u00e9p\u00e9ter de mani\u00e8re th\u00e9oriquement ind\u00e9finie.","title":"D\u00e9finition"},{"location":"terminale/bloc4/chapitre-03/#illustrations","text":"","title":"Illustrations"},{"location":"terminale/bloc4/chapitre-03/#factorielle-dun-entier-naturel","text":"La fonction math\u00e9matique factorielle de \\(n\\) s'exprime par : \\[ \\begin{align*} n! = \\prod _{1\\leqslant i\\leqslant n}i & = n \\times (n - 1) \\times (n - 2) ... \\times 1\\\\ & = n \\times \\underbrace{{\\color{red}{(n - 1) \\times (n - 2) ... \\times 1}}}_{(n - 1)!}\\\\& = n \\times (n - 1) ! \\end{align*} \\] Travail \u00c9crire l'algorithme r\u00e9cursif factorielle , qui prend en param\u00e8tre un entier \\(n\\) , et renvoie la factorielle de \\(n\\) . R\u00e9ponse 1 2 3 4 def factorielle ( n ): if n == 0 or n == 1 : return 1 return n * factorielle ( n - 1 )","title":"Factorielle d'un entier naturel"},{"location":"terminale/bloc4/chapitre-03/#somme-des-premiers-termes","text":"La fonction math\u00e9matique Somme des \\(n\\) premiers termes, pour \\(n \\in \\mathbb{N}\\) s'exprime par : \\[ \\begin{align*} \\sum_{i=1}^{n} i & = 1 + 2 + 3 + ... + n \\\\ & = 1 + \\underbrace{{\\color{red}{2 + 3 + ... + n}}}_{\\sum_{i=2}^{n} i } \\\\ & = 1 + 2 + \\underbrace{{\\color{red}{3 + ... + n}}}_{\\sum_{i=3}^{n} i } \\end{align*} \\] Travail \u00c9crire l'algorithme r\u00e9cursif somme , qui prend en param\u00e8tre un entier \\(n\\) , et renvoie la somme des entiers jusque \\(n\\) . R\u00e9ponse 1 2 3 4 def somme ( n ): if n == 0 : return 0 return n + somme ( n - 1 )","title":"Somme des premiers termes"},{"location":"terminale/bloc4/chapitre-03/#parite-imparite-dun-entier-naturel","text":"Sachant que 0 est pair, et 1 impair. Pour tout \\(n \\geq 2\\) , que peut-on dire de : pair( \\(n\\) ) par rapport \u00e0 pair( \\(n - 2\\) ), de pair ( \\(n - 4\\) ) ...? impair( \\(n\\) ) par rapport \u00e0 de impair( \\(n - 2\\) ), de impair ( \\(n - 4\\) ) ...? Travail \u00c9crire un algorithme r\u00e9cursif pair , prenant un entier \\(n\\) en param\u00e8tre, et renvoie Vrai si \\(n\\) est pair, Faux sinon. \u00c9crire un algorithme r\u00e9cursif impair , prenant un entier \\(n\\) en param\u00e8tre, et renvoie Vrai si \\(n\\) est impair, Faux sinon. R\u00e9ponse 1 1 2 3 4 5 6 def pair ( n ): if n == 0 : return True if n == 1 : return False return pair ( n - 2 ) R\u00e9ponse 2 1 2 3 4 5 6 def impair ( n ): if n == 0 : return False if n == 1 : return True return impair ( n - 2 ) Question Que peut-on dire de : pair(12) par rapport \u00e0 impair(11) ? impair(7) par rapport \u00e0 pair(6) ? pair( \\(n\\) ) par rapport \u00e0 impair( \\(n - 1\\) ) ? impair( \\(n\\) ) par rapport \u00e0 pair( \\(n - 1\\) ) ? R\u00e9ponse pair( \\(n\\) ) = impair( \\(n - 1\\) ) impair( \\(n\\) ) = pair( \\(n - 1\\) ) Travail Modifier l'algorithme r\u00e9cursif pair , afin ne d'utiliser que l'algorithme impair . Modifier l'algorithme r\u00e9cursif impair , afin ne d'utiliser que l'algorithme pair . R\u00e9ponse 1 2 3 4 5 6 7 8 9 10 11 12 13 def pair ( n ): if n == 0 : return True if n == 1 : return False return impair ( n - 1 ) def impair ( n ): if n == 0 : return False if n == 1 : return True return pair ( n - 1 )","title":"Parit\u00e9 / Imparit\u00e9 d'un entier naturel"},{"location":"terminale/bloc4/chapitre-03/#proprietes","text":"Des travaux pr\u00e9c\u00e9dents, on peut tirer 2 r\u00e8gles pour \u00e9crire un algorithme r\u00e9cursif : 1.Tout algorithme r\u00e9cursif doit distinguer plusieurs cas dont l\u2019un au moins ne doit pas contenir d\u2019appels r\u00e9cursifs. Sinon, il y a risque de cercle vicieux et de calcul infini. 2.Tout appel r\u00e9cursif doit se faire avec des donn\u00e9es plus proches de donn\u00e9es satisfaisant les conditions de terminaison. 3.Deux algorithmes sont mutuellement r\u00e9cursifs si l\u2019un fait appel \u00e0 l\u2019autre et l\u2019autre \u00e0 l\u2019un. \\[ \\begin{align*} fact(4) & = 4 \\times fact(3) \\\\ & = 4 \\times 3 \\times fact(2) \\\\ & = 4 \\times 3 \\times 2 \\times fact(1) \\\\ & = 4 \\times 3 \\times 2 \\times 1 \\times fact(0) \\\\ & = 4 \\times 3 \\times 2 \\times 1 \\times 1 \\\\ & = 24 \\end{align*} \\] On note que des calculs restent en attente, jusqu\u2019\u00e0 ce qu\u2019on atteigne le cas o\u00f9 il ne reste plus d\u2019appel \u00e0 la fonction \ud835\ude8f\ud835\ude8a\ud835\ude8c\ud835\ude9d dans l\u2019expression \u00e0 calculer.","title":"Propri\u00e9t\u00e9s"},{"location":"terminale/bloc4/chapitre-03/#derecursiver","text":"","title":"D\u00e9recursiver"},{"location":"terminale/bloc4/chapitre-03/#exercice-probleme-des-tours-de-hanoi","text":"Travail Regarder et r\u00e9pondre aux questions pos\u00e9es durant la vid\u00e9o. Travail \u00c9crire l'algorithme r\u00e9cursif hanoi , qui prend en param\u00e8tres : \\(n\\) : le nombre de disques \u00e0 d\u00e9placer, \\(d\\) : le num\u00e9ro de disque de d\u00e9part, \\(i\\) : le num\u00e9ro de disque interm\u00e9diaire, \\(a\\) : le num\u00e9ro de dique d'arriv\u00e9e. Et a pour effet de bord de d\u00e9placer tous les disques dans le bon ordre sur le disque d'arriv\u00e9e. R\u00e9ponse 1 2 3 4 5 6 Algorithme hanoi ( n , d , a , i ): Si n != 0 hanoi ( n - 1 , d , i , a ) deplacer d vers a hanoi ( n - 1 , i , a , d ) FinSi","title":"Exercice : Probl\u00e8me des tours de Hanoi"},{"location":"terminale/bloc4/chapitre-04/","text":"Sommaire Programmation Orient\u00e9e Objet Les contenus le tp le cours le quiz Programme Contenus : Vocabulaire de la programmation objet : classes, attributs, m\u00e9thodes, objets. Capacit\u00e9s attendues : \u00c9crire la d\u00e9finition d\u2019une classe. Acc\u00e9der aux attributs et m\u00e9thodes d\u2019une classe. Commentaires : On n\u2019aborde pas ici tous les aspects de la programmation objet comme le polymorphisme et l\u2019h\u00e9ritage","title":"Sommaire"},{"location":"terminale/bloc4/chapitre-04/#sommaire","text":"","title":"Sommaire"},{"location":"terminale/bloc4/chapitre-04/#programmation-orientee-objet","text":"","title":"Programmation Orient\u00e9e Objet"},{"location":"terminale/bloc4/chapitre-04/#les-contenus","text":"le tp le cours le quiz","title":"Les contenus"},{"location":"terminale/bloc4/chapitre-04/#programme","text":"Contenus : Vocabulaire de la programmation objet : classes, attributs, m\u00e9thodes, objets. Capacit\u00e9s attendues : \u00c9crire la d\u00e9finition d\u2019une classe. Acc\u00e9der aux attributs et m\u00e9thodes d\u2019une classe. Commentaires : On n\u2019aborde pas ici tous les aspects de la programmation objet comme le polymorphisme et l\u2019h\u00e9ritage","title":"Programme"},{"location":"terminale/bloc4/chapitre-04/COURS/","text":"Cours Contexte Un concessionnaire dispose de voitures Elles ont diff\u00e9rentes marques, couleurs, mod\u00e8les etc. Il existe diff\u00e9rentes fa\u00e7ons de placer ces informations dans des variables Travail \u00e0 faire Proposer une fa\u00e7on de stocker dans des variables les caract\u00e9ristiques des diff\u00e9rentes voitures du concessionnaire (Caract\u00e9ristiques identifi\u00e9es : marque, mod\u00e8le, couleur, nombre de roues, nombre de portes) Solution 1 Par variables \u00e9l\u00e9mentaires : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Voiture 1 = Chevrolet Corvette >>> marque1 = \"Chevrolet\" >>> modele1 = \"Corvette\" >>> couleur1 = \"rouge\" >>> roues1 = 4 >>> portes1 = 3 # Voiture 2 = Renault Clio >>> marque2 = \"Renault\" >>> modele2 = \"Clio\" >>> couleur2 = \"bleue\" >>> roues2 = 4 >>> portes2 = 5 # Voiture 2 = Renault Clio >>> marque3 = \"Mercedes\" >>> modele3 = \"G63\" >>> couleur3 = \"noire\" >>> roues3 = 6 >>> nbportes3 = 5 Solution 2 Par tableau : 1 2 3 >>> voiture1 = [ \"Chevrolet\" , \"Corvette\" , \"rouge\" , 4 , 3 ] >>> voiture2 = [ \"Renault\" , \"Clio\" , \"bleue\" , 4 , 5 ] >>> voiture3 = [ \"Mercedes\" , \"G63\" , \"noire\" , 6 , 5 ] ou par p-uplet : 1 2 3 >>> voiture1 = ( \"Chevrolet\" , \"Corvette\" , \"rouge\" , 4 , 3 ) >>> voiture2 = ( \"Renault\" , \"Clio\" , \"bleue\" , 4 , 5 ) >>> voiture3 = ( \"Mercedes\" , \"G63\" , \"noire\" , 6 , 5 ) Solution 3 Par dictionnaire : 1 2 3 >>> voiture1 = { \"marque\" : \"Chevrolet\" , \"mod\u00e8le\" : \"Corvette\" , \"couleur\" : \"rouge\" , \"roues\" : 4 , \"portes\" : 3 } >>> voiture2 = { \"marque\" : \"Renault\" , \"mod\u00e8le\" : \"Clio\" , \"couleur\" : \"bleue\" , \"roues\" : 4 , \"portes\" : 5 } >>> voiture3 = { \"marque\" : \"Mercedes\" , \"mod\u00e8le\" : \"G63\" , \"couleur\" : \"noire\" , \"roues\" : 6 , \"portes\" : 5 } Question Comment r\u00e9cup\u00e9rer la valeur d'un attribut d'une voiture ? Y a-t-il des diff\u00e9rences selon la structure de donn\u00e9es ? Description En programmation oriente\u0301e objet , on fabrique de nouveau types de donne\u0301es correspondant aux besoin du programme. On re\u0301fle\u0301chit alors aux caracte\u0301ristiques des objets qui seront de ce type et aux actions possibles a\u0300 partir de ces objets. Avec ce paradigme, les objectifs sont de : mod\u00e9liser un objet concret ou abstrait; masquer la structure interne de stockage; fournir une interface \u00e0 l'utilisateur de l'objet. Un peu d'histoire La programmation oriente\u0301e objet , qui fait ses de\u0301buts dans les anne\u0301es 1960 avec les re\u0301alisations dans le langages Lisp , a e\u0301te\u0301 formellement de\u0301finie avec les langages Simula (vers 1970) puis SmallTalk . Puis elle s\u2019est de\u0301veloppe\u0301e dans les langages anciens comme le Fortran , le Cobol et est me\u0302me incontournable dans des langages re\u0301cents comme Java et ... Python . Concept et Implantation en Python Illustration avec la classe list Le type de donn\u00e9es list est une classe 1 2 3 >>> l = [ 1 , 6 , 3 ] >>> type ( l ) < class ' list '> Une action possible sur les objets de type list est le tri de celle-ci avec la m\u00e9thode nomm\u00e9e sort() . 1 2 3 4 >>> l = [ 1 , 6 , 3 ] >>> l . sort () >>> l [ 1 , 3 , 6 ] Vocabulaire D\u00e9finition Classe : Conteneur logiciel qui d\u00e9crit les caract\u00e9ristiques d'un objet. Regroupe les m\u00e9thodes et attributs communs \u00e0 un ensemble d'objets. Cr\u00e9ation d'une classe pas \u00e0 pas On utilise le mot cl\u00e9 class suivi du nom de la classe : 1 2 3 4 class Voiture : ''' classe mod\u00e9lisant l'objet Voiture ''' Par convention, une classe s'\u00e9crit toujours avec la premi\u00e8re lettre en majuscule. On d\u00e9finit une m\u00e9thode __init__ , dite constructeur : 1 2 3 4 5 6 class Voiture : def __init__ ( self , ... ): ''' Constructeur de la classe Voiture ''' Le constructeur est la m\u00e9thode appel\u00e9e lorsque l'on ex\u00e9cute les instructions suivantes : 1 2 >>> voiture1 = Voiture () >>> voiture2 = Voiture () On dit que voiture1 et voiture2 sont des instances de la classe Voiture, le constructeur __init__ est appel\u00e9e implicitement par l'interpr\u00e9teur python lors de l'instruction Voiture() Le param\u00e8tre particulier self d\u00e9signe l'objet auquel s'applique la m\u00e9thode. On peut constater que les variables voiture1 et voiture2 sont du type Voiture : 1 2 >>> type ( voiture1 ) < class ' Voiture '> D\u00e9finition Instance : Exemplaire d'un objet. D\u00e9finition Attribut : Caract\u00e9ristique propre d'un objet. Par exemple, les attributs d'une Voiture sont les suivants : marque, mod\u00e8le, couleur, nombre de portes Les valeurs des attributs sont pass\u00e9es en param\u00e8tre du constructeur : 1 2 3 4 5 6 7 8 9 10 class Voiture : def __init__ ( self , marque , modele , couleur , portes ): ''' Constructeur de la classe Voiture ''' self . marque = marque self . modele = modele self . couleur = couleur self . portes = portes A l'instanciation, les valeurs sont pass\u00e9es comme param\u00e8tre : 1 2 3 >>> voiture1 = Voiture ( 'Chevrolet' , 'Corvette' , 'rouge' , 3 ) >>> voiture2 = Voiture ( 'Renault' , 'Clio' , 'noire' , '5' ) >>> voiture3 = Voiture ( 'Mercedes' , 'G63' , 'noire' , '5' ) D\u00e9finition M\u00e9thode : Action possible sur un objet. Une m\u00e9thode est une fonction d\u00e9finie dans le corps de la classe. Comme le constructeur de la classe, son premier argument doit \u00eatre self , i.e la r\u00e9f\u00e9rence \u00e0 l'instance sur laquelle elle s'applique. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Voiture ( object ): # mot cl\u00e9 pour d\u00e9finir une classe def __init__ ( self , marque , modele , couleur , roues , portes ): ''' Constructeur param self : instance en cours ''' self . marque = marque self . model = modele self . couleur = couleur self . roues = roues self . portes = portes def afficher ( self ): ''' param self : instance en cours ''' print ( f \"Voici une { self . marque } { self . modele } de couleur { self . couleur } avec { self . roues } roues et { self . portes } portes.\" ) Pour appeler la m\u00e9thode sur l'instance : 1 2 3 4 5 6 >>> voiture1 . afficher () # appel de la m\u00e9thode sur l'instance \"Voici une Chevrolet Corvette de couleur rouge avec 4 roues et 3 portes.\" >>> voiture2 . afficher () \"Voici une Renault Clio de couleur bleue avec 4 roues et 5 portes.\" >>> voiture3 . afficher () \"Voici une Mercedes G63 de couleur noire avec 6 roues et 5 portes.\" D\u00e9finition L\u2019 encapsulation d\u00e9signe le principe de regrouper des donn\u00e9es brutes avec un ensemble de routines (m\u00e9thodes) permettant de les lire ou de les manipuler. But de l\u2019encapsulation : cacher la repr\u00e9sentation interne des classes; simplifier la vie du programmeur qui les utilise; masquer leur complexit\u00e9; permettre de modifier celle-ci sans changer le reste du programme; la liste des m\u00e9thodes devient une sorte de mode d\u2019emploi de la classe. Accesseur ou \"getter\" Pour acc\u00e9der aux valeurs des attributs, on utilise des m\u00e9thodes d\u00e9di\u00e9es dont le r\u00f4le est de faire l\u2019interface entre l\u2019utilisateur de l\u2019objet et la repr\u00e9sentation interne de l\u2019objet (ses attributs). 1 2 3 4 5 def get_marque ( self ): ''' Renvoie le mod\u00e8le de la Voiture ''' return self . marque Par convention, le nom d'un accesseur est g\u00e9n\u00e9ralement sous la forme get_nom_attribut() **. Mutateur ou \"setter\" Pour modifier la valeur d'un attribut d'une instance, on utilise des m\u00e9thodes d\u00e9di\u00e9es. 1 2 3 4 5 def set_marque ( self , marque ): ''' Modifie le mod\u00e8le de la Voiture ''' self . marque = marque Par convention, le nom d'un mutateur est g\u00e9n\u00e9ralement sous la forme set_nom_attribut() **. Travail Modifier la structure interne pour repr\u00e9senter les attributs d'une Voiture avec un tableau, un p-uplet ou un dictionnaire. Quel(s) changements observez-vous sur le constructeur, les accesseurs et mutateurs de la classe ? Synth\u00e8se Terme D\u00e9finitions Classe Type de donn\u00e9es avec ses caract\u00e9ristiques et ses actions possibles Attribut Caract\u00e9ristiques de la classe M\u00e9thode Actions possibles sur la classe Constructeur M\u00e9thode qui initialise un objet. Un appel au constructeur cr\u00e9e une instance d'une classe. Encapsulation D\u00e9signe le principe de regrouper des donn\u00e9es brutes avec un ensemble de m\u00e9thodes permettant de les lire ou de les manipuler. Accesseur ou getter M\u00e9thode qui renvoie la valeur d\u2019un attribut de l\u2019objet. Par convention son nom est g\u00e9n\u00e9ralement sous la forme : get_nom_attribut() . Mutateur ou setter M\u00e9thode qui modifie la valeur d\u2019un attribut d\u2019un objet. Son nom est g\u00e9n\u00e9ralement sous la forme : set_nom_attribut() .","title":"Cours"},{"location":"terminale/bloc4/chapitre-04/COURS/#cours","text":"","title":"Cours"},{"location":"terminale/bloc4/chapitre-04/COURS/#contexte","text":"Un concessionnaire dispose de voitures Elles ont diff\u00e9rentes marques, couleurs, mod\u00e8les etc. Il existe diff\u00e9rentes fa\u00e7ons de placer ces informations dans des variables Travail \u00e0 faire Proposer une fa\u00e7on de stocker dans des variables les caract\u00e9ristiques des diff\u00e9rentes voitures du concessionnaire (Caract\u00e9ristiques identifi\u00e9es : marque, mod\u00e8le, couleur, nombre de roues, nombre de portes) Solution 1 Par variables \u00e9l\u00e9mentaires : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Voiture 1 = Chevrolet Corvette >>> marque1 = \"Chevrolet\" >>> modele1 = \"Corvette\" >>> couleur1 = \"rouge\" >>> roues1 = 4 >>> portes1 = 3 # Voiture 2 = Renault Clio >>> marque2 = \"Renault\" >>> modele2 = \"Clio\" >>> couleur2 = \"bleue\" >>> roues2 = 4 >>> portes2 = 5 # Voiture 2 = Renault Clio >>> marque3 = \"Mercedes\" >>> modele3 = \"G63\" >>> couleur3 = \"noire\" >>> roues3 = 6 >>> nbportes3 = 5 Solution 2 Par tableau : 1 2 3 >>> voiture1 = [ \"Chevrolet\" , \"Corvette\" , \"rouge\" , 4 , 3 ] >>> voiture2 = [ \"Renault\" , \"Clio\" , \"bleue\" , 4 , 5 ] >>> voiture3 = [ \"Mercedes\" , \"G63\" , \"noire\" , 6 , 5 ] ou par p-uplet : 1 2 3 >>> voiture1 = ( \"Chevrolet\" , \"Corvette\" , \"rouge\" , 4 , 3 ) >>> voiture2 = ( \"Renault\" , \"Clio\" , \"bleue\" , 4 , 5 ) >>> voiture3 = ( \"Mercedes\" , \"G63\" , \"noire\" , 6 , 5 ) Solution 3 Par dictionnaire : 1 2 3 >>> voiture1 = { \"marque\" : \"Chevrolet\" , \"mod\u00e8le\" : \"Corvette\" , \"couleur\" : \"rouge\" , \"roues\" : 4 , \"portes\" : 3 } >>> voiture2 = { \"marque\" : \"Renault\" , \"mod\u00e8le\" : \"Clio\" , \"couleur\" : \"bleue\" , \"roues\" : 4 , \"portes\" : 5 } >>> voiture3 = { \"marque\" : \"Mercedes\" , \"mod\u00e8le\" : \"G63\" , \"couleur\" : \"noire\" , \"roues\" : 6 , \"portes\" : 5 } Question Comment r\u00e9cup\u00e9rer la valeur d'un attribut d'une voiture ? Y a-t-il des diff\u00e9rences selon la structure de donn\u00e9es ?","title":"Contexte"},{"location":"terminale/bloc4/chapitre-04/COURS/#description","text":"En programmation oriente\u0301e objet , on fabrique de nouveau types de donne\u0301es correspondant aux besoin du programme. On re\u0301fle\u0301chit alors aux caracte\u0301ristiques des objets qui seront de ce type et aux actions possibles a\u0300 partir de ces objets. Avec ce paradigme, les objectifs sont de : mod\u00e9liser un objet concret ou abstrait; masquer la structure interne de stockage; fournir une interface \u00e0 l'utilisateur de l'objet.","title":"Description"},{"location":"terminale/bloc4/chapitre-04/COURS/#un-peu-dhistoire","text":"La programmation oriente\u0301e objet , qui fait ses de\u0301buts dans les anne\u0301es 1960 avec les re\u0301alisations dans le langages Lisp , a e\u0301te\u0301 formellement de\u0301finie avec les langages Simula (vers 1970) puis SmallTalk . Puis elle s\u2019est de\u0301veloppe\u0301e dans les langages anciens comme le Fortran , le Cobol et est me\u0302me incontournable dans des langages re\u0301cents comme Java et ... Python .","title":"Un peu d'histoire"},{"location":"terminale/bloc4/chapitre-04/COURS/#concept-et-implantation-en-python","text":"","title":"Concept et Implantation en Python"},{"location":"terminale/bloc4/chapitre-04/COURS/#illustration-avec-la-classe-list","text":"Le type de donn\u00e9es list est une classe 1 2 3 >>> l = [ 1 , 6 , 3 ] >>> type ( l ) < class ' list '> Une action possible sur les objets de type list est le tri de celle-ci avec la m\u00e9thode nomm\u00e9e sort() . 1 2 3 4 >>> l = [ 1 , 6 , 3 ] >>> l . sort () >>> l [ 1 , 3 , 6 ]","title":"Illustration avec la classe list"},{"location":"terminale/bloc4/chapitre-04/COURS/#vocabulaire","text":"D\u00e9finition Classe : Conteneur logiciel qui d\u00e9crit les caract\u00e9ristiques d'un objet. Regroupe les m\u00e9thodes et attributs communs \u00e0 un ensemble d'objets.","title":"Vocabulaire"},{"location":"terminale/bloc4/chapitre-04/COURS/#synthese","text":"Terme D\u00e9finitions Classe Type de donn\u00e9es avec ses caract\u00e9ristiques et ses actions possibles Attribut Caract\u00e9ristiques de la classe M\u00e9thode Actions possibles sur la classe Constructeur M\u00e9thode qui initialise un objet. Un appel au constructeur cr\u00e9e une instance d'une classe. Encapsulation D\u00e9signe le principe de regrouper des donn\u00e9es brutes avec un ensemble de m\u00e9thodes permettant de les lire ou de les manipuler. Accesseur ou getter M\u00e9thode qui renvoie la valeur d\u2019un attribut de l\u2019objet. Par convention son nom est g\u00e9n\u00e9ralement sous la forme : get_nom_attribut() . Mutateur ou setter M\u00e9thode qui modifie la valeur d\u2019un attribut d\u2019un objet. Son nom est g\u00e9n\u00e9ralement sous la forme : set_nom_attribut() .","title":"Synth\u00e8se"},{"location":"terminale/bloc4/chapitre-04/PRECIEUX/","text":"Mon pr\u00e9cieux Description Dans les monts brumeux de la terre du milieu, Bilbo le Hobbit d\u00e9couvre un anneau unique, aux pouvoirs extraordinaires. Cependant le propri\u00e9taire de cet anneau, Gollum, une cr\u00e9ature n\u00e9faste et belliqueuse revendique cet anneau. Les 2 personnages vont devoir se battre en duel pour d\u00e9cider qui sera le d\u00e9tenteur de l'anneau unique. Source : Pixabay Partie 1 - Mod\u00e9lisation des personnages Nous allons commencer par \u00e9crire une classe Personnage (qui sera dans un premier temps une coquille vide) et, \u00e0 partir de cette classe cr\u00e9er 2 instances : bilbo et gollum . Un personnage a deux attributs : nom : le nom du personnage, vie : le nombre de points de vie du personnage \u00c9crire une classe Personnage qui implante ces r\u00e8gles de gestion. Pour instancier les 2 personnages, on pourra \u00e9crire les instructions suivantes dans un programme pincipal : 1 2 bilbo = Personnage ( \"bilbo\" , 15 ) gollum = Personnage ( \"gollum\" , 20 ) Recopier et adapter la m\u00e9thode dans votre classe Personnage : 1 2 def afficher ( self ): print ( f \" { self . xxx } a { self . yyy } points de vie\" ) pour qu'elle renvoie le r\u00e9sultat suivant lorsqu'elle est appel\u00e9e sur une instance de Personnage : 1 2 3 4 bilbo . afficher () \"Bilbo a 15 points de vie\" gollum . afficher () \"Gollum a 20 points de vie\" Partie 2 - Pr\u00e9paratif au combat Nous allons cr\u00e9er 2 nouvelles m\u00e9thodes : Une m\u00e9thode qui enl\u00e8vera un point de vie au personnage bless\u00e9, Une m\u00e9thode qui renverra le nombre de points de vie restants. \u00c9crire la m\u00e9thode de classe get_etat qui renvoie le nombre de points de vie actuel du personnage \u00c9crire la m\u00e9thode de classe perd_vie , qui a pour effet de bord d'enlever un point de vie au personnage Pour tester vos m\u00e9thodes, tapez successivement les instructions suivantes : 1 2 3 4 5 6 >>> gollum . get_etat () >>> bilbo . get_etat () >>> gollum . perd_vie () >>> gollum . get_etat () >>> bilbo . perd_vie () >>> bilbo . get_etat () Vous avez sans doute remarqu\u00e9 que lors de \u201cl\u2019utilisation\u201d des instances bilbo et gollum, nous avons uniquement utilis\u00e9 des m\u00e9thodes et nous n\u2019avons plus directement utilis\u00e9 des attributs (plus de \u201cgollum.vie\u201d). Nos personnages peuvent boire une potion qui leur ajoute un point de vie. \u00c9crire la m\u00e9thode boirePotion Ajouter l'import de la biblioth\u00e8que random et remplacer la m\u00e9thode perd_vie avec la suivante : 1 2 3 4 5 6 def perd_vie ( self ): if random . random () > 0.5 : nbPoint = 1 else : nbPoint = 2 self . vie = self . vie - nbPoint Expliquer le fonctionnement de la m\u00e9thode perd_vie Partie 3 - Au combat pour l'anneau Le combat pour l'anneau se passe de la mani\u00e8re suivante : Met en duel 2 personnages, Tant que les personnages ont des points de vie, on fait appel \u00e0 perd_vie de chaque personnage, Le personnage qui a des points de vie \u00e0 l'issu du combat est le nouveau d\u00e9tenteur de l'anneau. Si aucun des personnages n'a de point de vie, l'anneau n'appartient \u00e0 personne. \u00c9crire une proc\u00e9dure combat qui code l'algorithme d\u00e9crit ci-dessus. Pour tester le programme, ex\u00e9cutez la proc\u00e9dure combat dans une console. V\u00e9rifiez que l\u2019on peut obtenir des r\u00e9sultats diff\u00e9rents en ex\u00e9cutant plusieurs fois la proc\u00e9dure. Partie 4 - Aller plus loin Am\u00e9liorez encore la proc\u00e9dure game pour qu\u2019elle affiche un journal d\u00e9taill\u00e9 du combat : 1 2 3 4 5 6 7 8 9 >>> aragorn = Personnage ( 10 ) >>> orc = Personnage ( 10 ) >>> game ( aragorn , orc ) Aragorn perd un point de vie Orc perd deux points de vie ... Aragorn perd deux points de vie Orc perd deux points de vie Orc est vainqueur , il lui reste encore 3 points alors que Aragorn est mort On veut cr\u00e9er un attribut chance lors de l\u2019instanciation du personnage. C\u2019est un entier entre 0 et 4. L\u2019effet de la chance est le suivant : dans la m\u00e9thode perd_vie , on tire toujours un nombre al\u00e9atoire entre 0 et 1. Si ce nombre multipli\u00e9 par 10 d\u00e9passe la chance du personnage, il perd un point de vie. Sinon il ne perd pas de vie et on affiche \u201cAragorn a de la chance !\" Par exemple, Aragorn a 2 de chance. dans perd_vie , on tire 0.3, \\(10 * 0.3 = 3\\) et \\(3 > 2\\) : il perd un point de vie. dans perd_vie , on tire 0.12345 \\(10 * 0.12345 = 1.2345\\) et \\(1.2345 < 2\\) : il ne perd pas de vie. Il faut aussi changer la m\u00e9thode __init__ pour pouvoir cr\u00e9er nos personnages ainsi : 1 aragorn = Personnage ( \"Aragorn\" , 30 , 2 ) Impl\u00e9mentez la chance et faites quelques essais. Attention , si vous donnez une chance trop \u00e9lev\u00e9e, le personnage ne perdra jamais de vie et la boucle de la fonction game sera infinie ! Maintenant qu\u2019on peut donner un attribut chance, il faut prot\u00e9ger le programme. Une valeur de chance trop \u00e9lev\u00e9e peut conduire \u00e0 un programme qui ne termine jamais, il suffit de donner une chance de 10 pour qu\u2019un personnage soit invicible ! Nous allons cr\u00e9er une m\u00e9thode interne __limiter_chance qui emp\u00eache la chance d\u2019\u00eatre sup\u00e9rieure \u00e0 4. Si le param\u00e8tre chance est inf\u00e9rieure ou \u00e9gale \u00e0 4, il est inchang\u00e9, S\u2019il d\u00e9passe 4, il est ramen\u00e9 \u00e0 4. Cette m\u00e9thode interne ne sera pas appel\u00e9e par les \u00e9l\u00e9ments ext\u00e9rieurs au programme, seulement par le programme lui m\u00eame ! On utilise cette m\u00e9thode interne dans __init__ , il faut penser \u00e0 l\u2019appeler. On pourrait aussi cr\u00e9er des m\u00e9thodes comme taper dans personnage, qui d\u00e9pendrait de la chance et d\u2019un attribut force \u00e0 d\u00e9finir\u2026 taper pourrait renvoyer un nombre al\u00e9atoire entre 1 et force , par exemple. Et c\u2019est ce nombre qui d\u00e9finirait le nombre de points perdus par le Personnage \u2026 Ce ne sont que des id\u00e9es, je vous laisse libre de choisir une am\u00e9lioration.","title":"Mon pr\u00e9cieux"},{"location":"terminale/bloc4/chapitre-04/PRECIEUX/#mon-precieux","text":"","title":"Mon pr\u00e9cieux"},{"location":"terminale/bloc4/chapitre-04/PRECIEUX/#description","text":"Dans les monts brumeux de la terre du milieu, Bilbo le Hobbit d\u00e9couvre un anneau unique, aux pouvoirs extraordinaires. Cependant le propri\u00e9taire de cet anneau, Gollum, une cr\u00e9ature n\u00e9faste et belliqueuse revendique cet anneau. Les 2 personnages vont devoir se battre en duel pour d\u00e9cider qui sera le d\u00e9tenteur de l'anneau unique. Source : Pixabay","title":"Description"},{"location":"terminale/bloc4/chapitre-04/PRECIEUX/#partie-1-modelisation-des-personnages","text":"Nous allons commencer par \u00e9crire une classe Personnage (qui sera dans un premier temps une coquille vide) et, \u00e0 partir de cette classe cr\u00e9er 2 instances : bilbo et gollum . Un personnage a deux attributs : nom : le nom du personnage, vie : le nombre de points de vie du personnage \u00c9crire une classe Personnage qui implante ces r\u00e8gles de gestion. Pour instancier les 2 personnages, on pourra \u00e9crire les instructions suivantes dans un programme pincipal : 1 2 bilbo = Personnage ( \"bilbo\" , 15 ) gollum = Personnage ( \"gollum\" , 20 ) Recopier et adapter la m\u00e9thode dans votre classe Personnage : 1 2 def afficher ( self ): print ( f \" { self . xxx } a { self . yyy } points de vie\" ) pour qu'elle renvoie le r\u00e9sultat suivant lorsqu'elle est appel\u00e9e sur une instance de Personnage : 1 2 3 4 bilbo . afficher () \"Bilbo a 15 points de vie\" gollum . afficher () \"Gollum a 20 points de vie\"","title":"Partie 1 - Mod\u00e9lisation des personnages"},{"location":"terminale/bloc4/chapitre-04/PRECIEUX/#partie-2-preparatif-au-combat","text":"Nous allons cr\u00e9er 2 nouvelles m\u00e9thodes : Une m\u00e9thode qui enl\u00e8vera un point de vie au personnage bless\u00e9, Une m\u00e9thode qui renverra le nombre de points de vie restants. \u00c9crire la m\u00e9thode de classe get_etat qui renvoie le nombre de points de vie actuel du personnage \u00c9crire la m\u00e9thode de classe perd_vie , qui a pour effet de bord d'enlever un point de vie au personnage Pour tester vos m\u00e9thodes, tapez successivement les instructions suivantes : 1 2 3 4 5 6 >>> gollum . get_etat () >>> bilbo . get_etat () >>> gollum . perd_vie () >>> gollum . get_etat () >>> bilbo . perd_vie () >>> bilbo . get_etat () Vous avez sans doute remarqu\u00e9 que lors de \u201cl\u2019utilisation\u201d des instances bilbo et gollum, nous avons uniquement utilis\u00e9 des m\u00e9thodes et nous n\u2019avons plus directement utilis\u00e9 des attributs (plus de \u201cgollum.vie\u201d). Nos personnages peuvent boire une potion qui leur ajoute un point de vie. \u00c9crire la m\u00e9thode boirePotion Ajouter l'import de la biblioth\u00e8que random et remplacer la m\u00e9thode perd_vie avec la suivante : 1 2 3 4 5 6 def perd_vie ( self ): if random . random () > 0.5 : nbPoint = 1 else : nbPoint = 2 self . vie = self . vie - nbPoint Expliquer le fonctionnement de la m\u00e9thode perd_vie","title":"Partie 2 - Pr\u00e9paratif au combat"},{"location":"terminale/bloc4/chapitre-04/PRECIEUX/#partie-3-au-combat-pour-lanneau","text":"Le combat pour l'anneau se passe de la mani\u00e8re suivante : Met en duel 2 personnages, Tant que les personnages ont des points de vie, on fait appel \u00e0 perd_vie de chaque personnage, Le personnage qui a des points de vie \u00e0 l'issu du combat est le nouveau d\u00e9tenteur de l'anneau. Si aucun des personnages n'a de point de vie, l'anneau n'appartient \u00e0 personne. \u00c9crire une proc\u00e9dure combat qui code l'algorithme d\u00e9crit ci-dessus. Pour tester le programme, ex\u00e9cutez la proc\u00e9dure combat dans une console. V\u00e9rifiez que l\u2019on peut obtenir des r\u00e9sultats diff\u00e9rents en ex\u00e9cutant plusieurs fois la proc\u00e9dure.","title":"Partie 3 - Au combat pour l'anneau"},{"location":"terminale/bloc4/chapitre-04/PRECIEUX/#partie-4-aller-plus-loin","text":"Am\u00e9liorez encore la proc\u00e9dure game pour qu\u2019elle affiche un journal d\u00e9taill\u00e9 du combat : 1 2 3 4 5 6 7 8 9 >>> aragorn = Personnage ( 10 ) >>> orc = Personnage ( 10 ) >>> game ( aragorn , orc ) Aragorn perd un point de vie Orc perd deux points de vie ... Aragorn perd deux points de vie Orc perd deux points de vie Orc est vainqueur , il lui reste encore 3 points alors que Aragorn est mort On veut cr\u00e9er un attribut chance lors de l\u2019instanciation du personnage. C\u2019est un entier entre 0 et 4. L\u2019effet de la chance est le suivant : dans la m\u00e9thode perd_vie , on tire toujours un nombre al\u00e9atoire entre 0 et 1. Si ce nombre multipli\u00e9 par 10 d\u00e9passe la chance du personnage, il perd un point de vie. Sinon il ne perd pas de vie et on affiche \u201cAragorn a de la chance !\" Par exemple, Aragorn a 2 de chance. dans perd_vie , on tire 0.3, \\(10 * 0.3 = 3\\) et \\(3 > 2\\) : il perd un point de vie. dans perd_vie , on tire 0.12345 \\(10 * 0.12345 = 1.2345\\) et \\(1.2345 < 2\\) : il ne perd pas de vie. Il faut aussi changer la m\u00e9thode __init__ pour pouvoir cr\u00e9er nos personnages ainsi : 1 aragorn = Personnage ( \"Aragorn\" , 30 , 2 ) Impl\u00e9mentez la chance et faites quelques essais. Attention , si vous donnez une chance trop \u00e9lev\u00e9e, le personnage ne perdra jamais de vie et la boucle de la fonction game sera infinie ! Maintenant qu\u2019on peut donner un attribut chance, il faut prot\u00e9ger le programme. Une valeur de chance trop \u00e9lev\u00e9e peut conduire \u00e0 un programme qui ne termine jamais, il suffit de donner une chance de 10 pour qu\u2019un personnage soit invicible ! Nous allons cr\u00e9er une m\u00e9thode interne __limiter_chance qui emp\u00eache la chance d\u2019\u00eatre sup\u00e9rieure \u00e0 4. Si le param\u00e8tre chance est inf\u00e9rieure ou \u00e9gale \u00e0 4, il est inchang\u00e9, S\u2019il d\u00e9passe 4, il est ramen\u00e9 \u00e0 4. Cette m\u00e9thode interne ne sera pas appel\u00e9e par les \u00e9l\u00e9ments ext\u00e9rieurs au programme, seulement par le programme lui m\u00eame ! On utilise cette m\u00e9thode interne dans __init__ , il faut penser \u00e0 l\u2019appeler. On pourrait aussi cr\u00e9er des m\u00e9thodes comme taper dans personnage, qui d\u00e9pendrait de la chance et d\u2019un attribut force \u00e0 d\u00e9finir\u2026 taper pourrait renvoyer un nombre al\u00e9atoire entre 1 et force , par exemple. Et c\u2019est ce nombre qui d\u00e9finirait le nombre de points perdus par le Personnage \u2026 Ce ne sont que des id\u00e9es, je vous laisse libre de choisir une am\u00e9lioration.","title":"Partie 4 - Aller plus loin"},{"location":"terminale/bloc4/chapitre-05/","text":"Mise au point de programme / Gestion des bugs Contexte Programmer sans erreur est une t\u00e2che difficile en raison de la taille des logiciels, du nombre de personnes impliqu\u00e9es dans leur confection et de leur historique. Pourtant cela est un enjeu critique , voire vital . Une erreur dans un programme peut amener \u00e0 un blocage, une perte financi\u00e8re...voire la mort. 1996 : Destruction de la fus\u00e9e Ariane 5, d\u00fb \u00e0 un mauvais typage d'une variable ( d\u00e9tails ), 1985 : Le logiciel Therac-25, plusieurs d\u00e9c\u00e8s de patients d\u00fb \u00e0 des erreurs de conception et absences de tests( d\u00e9tails ), 2004 : Blocage de la billeterie aux guichets de la SNCF pendant 2 jours, d\u00fb \u00e0 un probl\u00e8me de mise \u00e0 jour d'un logiciel ( d\u00e9tails ). D'autres exemples : Software Horror Stories Ressources [1] En 2038, Un bug qui montrera la fragilit\u00e9 de l'informatique, Le Temps , 26 F\u00e9vrier 2021, Site letemps.ch","title":"Mise au point de programme / Gestion des bugs"},{"location":"terminale/bloc4/chapitre-05/#mise-au-point-de-programme-gestion-des-bugs","text":"","title":"Mise au point de programme / Gestion des bugs"},{"location":"terminale/bloc4/chapitre-05/#contexte","text":"Programmer sans erreur est une t\u00e2che difficile en raison de la taille des logiciels, du nombre de personnes impliqu\u00e9es dans leur confection et de leur historique. Pourtant cela est un enjeu critique , voire vital . Une erreur dans un programme peut amener \u00e0 un blocage, une perte financi\u00e8re...voire la mort. 1996 : Destruction de la fus\u00e9e Ariane 5, d\u00fb \u00e0 un mauvais typage d'une variable ( d\u00e9tails ), 1985 : Le logiciel Therac-25, plusieurs d\u00e9c\u00e8s de patients d\u00fb \u00e0 des erreurs de conception et absences de tests( d\u00e9tails ), 2004 : Blocage de la billeterie aux guichets de la SNCF pendant 2 jours, d\u00fb \u00e0 un probl\u00e8me de mise \u00e0 jour d'un logiciel ( d\u00e9tails ). D'autres exemples : Software Horror Stories","title":"Contexte"},{"location":"terminale/bloc4/chapitre-05/#ressources","text":"[1] En 2038, Un bug qui montrera la fragilit\u00e9 de l'informatique, Le Temps , 26 F\u00e9vrier 2021, Site letemps.ch","title":"Ressources"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/","text":"Algorithme de Dijsktra Contexte Mettons-nous dans la place d'un livreur Super-eats qui se d\u00e9place en v\u00e9lo. Il se situe actuellement aux abords d'un restaurant, situ\u00e9 au point \\(D\\) , et doit livrer une commande \u00e0 un client situ\u00e9 au point \\(G\\) . Source : les contributeurs d'OpenStreetMap En tant que cycliste, le livreur se d\u00e9place uniquement sur les pistes cyclables. La carte suivante indique les pistes permettant de relier le point d'arriv\u00e9e, ainsi que les temps pour atteindre les points interm\u00e9diaires. Source : les contributeurs d'OpenStreetMap Quel est le le plus court chemin que doit emprunter le livreur pour effectuer sa livraison ? Mod\u00e9lisation Les donn\u00e9es du probl\u00e8me du livreur peuvent \u00eatre mod\u00e9lis\u00e9es sous la forme d'un graphe pond\u00e9r\u00e9 o\u00f9 : chaque sommet est un point d'intersection d'une piste cyclable, chaque ar\u00eate , une piste cyclable, le poids de chaque ar\u00eate, la dur\u00e9e en minutes pour parcourir la distance entre 2 sommets. Soit \\(C(x,y)\\) un chemin (ou une cha\u00eene) dans un graphe pond\u00e9r\u00e9 du sommet \\(x\\) vers le sommet \\(y\\) . La longueur de ce chemin est \u00e9gale \u00e0 la somme des poids de chacun arcs (ou de chacune des ar\u00eates) qui le constituent. Exemple : La chaine \\(D-B-C-F\\) a une longueur de \\(13 + 8 + 9 = 30\\) . Le probl\u00e8me du livreur Super-Eats est de d\u00e9terminer la plus courte cha\u00eene du graphe pond\u00e9r\u00e9 entre le sommet \\(D\\) et un sommet \\(G\\) . Pour r\u00e9soudre ce probl\u00e8me, une solution est d'appliquer l'algorithme de Dijkstra , cr\u00e9\u00e9 en 1959. Principe L'algorithme d\u00fb \u00e0 Dijkstra est bas\u00e9 sur le principe suivant : Si le plus court chemin reliant le sommet de d\u00e9part \\(s_0\\) \u00e0 un autre sommet \\(s_f\\) passe par les sommets \\(s_1, s_2, \\dots, s_k\\) alors, les diff\u00e9rentes \u00e9tapes sont aussi les plus courts chemins reliant \\(s_0\\) aux diff\u00e9rents sommets \\(s_1, s_2, \\dots, s_k\\) . On construit de proche en proche le chemin cherch\u00e9 en choisissant \u00e0 chaque it\u00e9ration de l'algorithme, un sommet \\(s_i\\) du graphe parmi ceux qui n'ont pas encore \u00e9t\u00e9 trait\u00e9s, tel que la longueur connue provisoirement du plus court chemin allant de \\(s_0\\) \u00e0 \\(s_i\\) soit la plus courte possible. L'algorithme construit un tableau de \\(n\\) \u00e9l\u00e9ments (o\u00f9 \\(n\\) est le nombre de sommets de \\(G\\) ) qui va contenir pour chaque case \\(i\\) le co\u00fbt du sommet (i.e la distance minimale du sommet de d\u00e9part au sommet \\(s_i\\) ) ainsi que le pr\u00e9d\u00e9cesseur du sommet \\(s_i\\) . Initialisation Au d\u00e9part : Chaque case \\(i\\) est initialis\u00e9e \u00e0 \\(+\\infty\\) , le pr\u00e9d\u00e9cesseur \u00e0 \\(\\emptyset\\) Le co\u00fbt du sommet de d\u00e9part \\(s_0\\) est initialis\u00e9e \u00e0 0 L'ensemble des sommets \\(s_i\\) sont marqu\u00e9s non visit\u00e9s \\[ \\begin{align} \\begin{array}{|c | c | c | c | c | c |} \\hline D & A & B & C & E & F & G \\\\ \\hline 0, \\emptyset& +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset \\\\ \\hline \\end{array} \\\\ \\mbox{Tableau \u00e0 l'initialisation} \\end{align} \\] D\u00e9roul\u00e9 A chaque \u00e9tape, On choisit le sommet \\(s\\) , non visit\u00e9, de co\u00fbt minimal, On met \u00e0 jour les co\u00fbts des voisins de \\(s\\) en ajoutant le co\u00fbt de \\(s\\) au poids des ar\u00eates s'il est inf\u00e9rieur au co\u00fbt actuel, On marque \\(s\\) comme pr\u00e9d\u00e9cesseur de chaque sommet dont le co\u00fbt a \u00e9t\u00e9 mis \u00e0 jour, On marque \\(s\\) comme sommet visit\u00e9. Exemple sur le graphe de la Figure 1 \\[ \\begin{align} \\begin{array}{| c | c | c | c | c | c |} \\hline D & A & B & C & E & F & G \\\\ \\hline 0, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset \\\\ \\hline \\end{array} \\\\ \\mbox{Etat du tableau des co\u00fbts \u00e0 l'initialisation} \\end{align} \\] Etape 1 on choisit le sommet \\(D\\) , non visit\u00e9 car il a le co\u00fbt minimal parmi l'ensemble des sommets non visit\u00e9s, on met \u00e0 jour les co\u00fbts des voisins de \\(D\\) en ajoutant le co\u00fbt de \\(D\\) au poids des ar\u00eates de \\(A\\) et \\(B\\) on marque \\(D\\) comme pr\u00e9d\u00e9cesseur de \\(A\\) et \\(B\\) car leurs co\u00fbts ont \u00e9t\u00e9 mis \u00e0 jour on marque \\(D\\) comme sommet visit\u00e9 \\[ \\begin{align} \\begin{array}{| c | c | c | c | c | c |} \\hline {\\color{red} D} & A & B & C & E & F & G \\\\ \\hline 0, \\emptyset & 14, D & 13, D & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset \\\\ \\hline \\end{array} \\\\ \\mbox{Etat du tableau des co\u00fbts \u00e0 l'\u00e9tape 1} \\end{align} \\] Etape 2 on choisit le sommet \\(B\\) , non visit\u00e9 car il a le co\u00fbt minimal parmi l'ensemble des sommets non visit\u00e9s, on met \u00e0 jour les co\u00fbts des voisins de \\(B\\) en ajoutant le co\u00fbt de \\(B\\) au poids des ar\u00eates de \\(C\\) et \\(E\\) on marque \\(B\\) comme pr\u00e9d\u00e9cesseur de \\(C\\) et \\(E\\) car leurs co\u00fbts ont \u00e9t\u00e9 mis \u00e0 jour on marque \\(B\\) comme sommet visit\u00e9 \\[ \\begin{align} \\begin{array}{| c | c | c | c | c | c |} \\hline {\\color{red} D} & A & {\\color{red} B} & C & E & F & G \\\\ \\hline 0, \\emptyset & 14, D & 13, D & 21, B & 38, B & +\\infty, \\emptyset & +\\infty, \\emptyset \\\\ \\hline \\end{array} \\\\ \\mbox{Etat du tableau des co\u00fbts \u00e0 l'\u00e9tape 2} \\end{align} \\] Etape 3 on choisit le sommet \\(A\\) , non visit\u00e9 car il a le co\u00fbt minimal parmi l'ensemble des sommets non visit\u00e9s, on met \u00e0 jour les co\u00fbts des voisins de \\(A\\) en ajoutant le co\u00fbt de \\(A\\) au poids des ar\u00eates de \\(F\\) on marque \\(A\\) comme pr\u00e9d\u00e9cesseur de \\(F\\) car son co\u00fbt a \u00e9t\u00e9 mis \u00e0 jour on marque \\(A\\) comme sommet visit\u00e9 \\[ \\begin{align} \\begin{array}{| c | c | c | c | c | c |} \\hline {\\color{red} D} & {\\color{red} A} & {\\color{red} B} & C & E & F & G \\\\ \\hline 0, \\emptyset & 14, D & 13, D & 21, B & 38, B & 29, A & +\\infty, \\emptyset \\\\ \\hline \\end{array} \\\\ \\mbox{Etat du tableau des co\u00fbts \u00e0 l'\u00e9tape 3} \\end{align} \\] Etape 4 on choisit le sommet \\(C\\) , non visit\u00e9 car il a le co\u00fbt minimal parmi l'ensemble des sommets non visit\u00e9s, on met \u00e0 jour les co\u00fbts des voisins de \\(C\\) en ajoutant le co\u00fbt de \\(C\\) au poids des ar\u00eates de \\(E\\) on marque \\(C\\) comme pr\u00e9d\u00e9cesseur de \\(E\\) car son co\u00fbt a \u00e9t\u00e9 mis \u00e0 jour on marque \\(C\\) comme sommet visit\u00e9 \\[ \\begin{align} \\begin{array}{| c | c | c | c | c | c |} \\hline {\\color{red} D} & {\\color{red} A} & {\\color{red} B} & {\\color{red} C} & E & F & G \\\\ \\hline 0, \\emptyset & 14, D & 13, D & 21, B & 26, C & 29, A & +\\infty, \\emptyset \\\\ \\hline \\end{array} \\\\ \\mbox{Etat du tableau des co\u00fbts \u00e0 l'\u00e9tape 4} \\end{align} \\] Etape 5 on choisit le sommet \\(E\\) , non visit\u00e9 car il a le co\u00fbt minimal parmi l'ensemble des sommets non visit\u00e9s, on met \u00e0 jour les co\u00fbts des voisins de \\(E\\) en ajoutant le co\u00fbt de \\(E\\) au poids des ar\u00eates de \\(G\\) on marque \\(E\\) comme pr\u00e9d\u00e9cesseur de \\(G\\) car son co\u00fbt a \u00e9t\u00e9 mis \u00e0 jour on marque \\(E\\) comme sommet visit\u00e9 \\[ \\begin{align} \\begin{array}{| c | c | c | c | c | c |} \\hline {\\color{red} D} & {\\color{red} A} & {\\color{red} B} & {\\color{red} C} & {\\color{red} E} & F & G \\\\ \\hline 0, \\emptyset & 14, D & 13, D & 21, B & 26, C & 29, A & 29, E \\\\ \\hline \\end{array} \\\\ \\mbox{Etat du tableau des co\u00fbts \u00e0 l'\u00e9tape 5} \\end{align} \\] Etape 6 on choisit le sommet \\(F\\) , non visit\u00e9 car il a le co\u00fbt minimal parmi l'ensemble des sommets non visit\u00e9s, on ne met \u00e0 jour aucun co\u00fbt des voisins de \\(F\\) on marque \\(F\\) comme sommet visit\u00e9 \\[ \\begin{align} \\begin{array}{| c | c | c | c | c | c |} \\hline {\\color{red} D} & {\\color{red} A} & {\\color{red} B} & {\\color{red} C} & {\\color{red} E} & {\\color{red} F} & G \\\\ \\hline 0, \\emptyset & 14, D & 13, D & 21, B & 26, C & 29, A & 29, E \\\\ \\hline \\end{array} \\\\ \\mbox{Etat du tableau des co\u00fbts \u00e0 l'\u00e9tape 6} \\end{align} \\] Etape 7 on choisit le sommet \\(G\\) , non visit\u00e9 car il a le co\u00fbt minimal parmi l'ensemble des sommets non visit\u00e9s, on ne met \u00e0 jour aucun co\u00fbt des voisins de \\(G\\) on marque \\(G\\) comme sommet visit\u00e9 \\[ \\begin{align} \\begin{array}{| c | c | c | c | c | c |} \\hline {\\color{red} D} & {\\color{red} A} & {\\color{red} B} & {\\color{red} C} & {\\color{red} E} & {\\color{red} F} & {\\color{red} G} \\\\ \\hline 0, \\emptyset & 14, D & 13, D & 21, B & 26, C & 29, A & 29, E \\\\ \\hline \\end{array} \\\\ \\mbox{Etat du tableau des co\u00fbts \u00e0 l'\u00e9tape 7} \\end{align} \\] Fin de l'algorithme L'algorithme de Dijsktra renvoie le tableau des co\u00fbts des distances entre le sommet de d\u00e9part et le sommet \\(i\\) . Le co\u00fbt de la chaine la plus courte entre le sommet de d\u00e9part et le sommet \\(i\\) est la valeur du co\u00fbt du sommet \\(i\\) Exemple sur la Figure 1 : le co\u00fbt de la chaine la plus courte entre \\(D\\) et \\(G\\) est \u00e9gale \u00e0 29 (co\u00fbt de \\(G\\) dans le tableau des co\u00fbts) La chaine entre le sommet de d\u00e9part et le sommet \\(i\\) est la liste invers\u00e9e des pr\u00e9d\u00e9cesseurs successifs du tableau des co\u00fbts en partant du sommet \\(i\\) . Exemple sur la Figure 1 : La liste des pr\u00e9d\u00e9cesseurs successifs en partant de \\(G\\) est : \\(E \\rightarrow C \\rightarrow B \\rightarrow D\\) La chaine la plus courte entre \\(D\\) et \\(G\\) est la liste invers\u00e9e : \\(D \\rightarrow B \\rightarrow C \\rightarrow E \\rightarrow G\\) Exercices Question 1 Appliquer l'algorithme de Dijkstra tel que d\u00e9crit pr\u00e9c\u00e9demment pour obtenir le tableau de co\u00fbts tel que le sommet de d\u00e9part est le sommet \\(G\\) . En d\u00e9duire la chaine la plus courte entre les sommets \\(G\\) et \\(A\\) . Solution Le chemin le plus court entre \\(G\\) et \\(A\\) est : \\(G \\rightarrow E \\rightarrow C \\rightarrow A\\) et vaut 18. Les \u00e9tats successifs du tableau des co\u00fbts sont : \\[ \\begin{align} \\begin{array}{| c | c | c | c | c | c | c |} \\hline G & A & B & C & D & E & F & \\mbox{noeud choisi} \\\\ \\hline 0, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & -\\\\ \\hline 0, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & 3, G & 12, G & G\\\\ \\hline 0, \\emptyset & +\\infty, \\emptyset & 28, E & 8, E & +\\infty, \\emptyset & 3, G & 12, G & E\\\\ \\hline 0, \\emptyset &18, C & 16, C & 8, E & +\\infty, \\emptyset & 3, G & 12, G & C\\\\ \\hline 0, \\emptyset &18, C & 16, C & 8, E & +\\infty, \\emptyset & 3, G & 12, G & F\\\\ \\hline 0, \\emptyset &18, C & 16, C & 8, E & 29, D & 3, G & 12, G & B\\\\ \\hline 0, \\emptyset &18, C & 16, C & 8, E & 29, D & 3, G & 12, G & A\\\\ \\hline 0, \\emptyset &18, C & 16, C & 8, E & 29, D & 3, G & 12, G & D\\\\ \\hline \\end{array} \\\\ \\mbox{Tableau des co\u00fbts pour le sommet de d\u00e9part $G$} \\end{align} \\] Question 2 \u00c9crire l'algorithme obtenir_chaine qui prend en param\u00e8tre un tableau \\(T\\) de co\u00fbts de distance, un sommet \\(x\\) de d\u00e9part et un sommet d'arriv\u00e9e \\(y\\) et renvoie la chaine la plus courte entre \\(x\\) et \\(y\\) sous la forme d'une liste de sommets, Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Algorithme obtenir_chaine ( T , x , y ) Entr\u00e9es : - T : un tableau de co\u00fbts de distance - x : le sommet de d\u00e9part - y : le sommet d 'arriv\u00e9e Sortie : la chaine la plus courte entre x et y sous la forme d 'une liste de sommets D\u00e9but chaine <- [] s = y Tant que s != x faire chaine <- [ s ] + chaine s <- T [ s ] . predecesseur FinTantQue chaine <- [ x ] + chaine Renvoyer chaine Fin Question 3 \u00c9crire l'algorithme initialisation , tel que d\u00e9crit pr\u00e9c\u00e9demment, qui prend en param\u00e8tre un graphe \\(G\\) et qui renvoie un tableau de co\u00fbt initialis\u00e9, Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Algorithme initialisation ( G , x ) Entr\u00e9es : - G , un graphe pond\u00e9r\u00e9 - x , le sommet de d\u00e9part Sortie : un tableau de co\u00fbt initialis\u00e9 D\u00e9but T <- [ | G . sommets | ] # un tableau de taille \u00e9gale \u00e0 l'ordre de G Pour tout sommet s de G . sommets faire T [ s ] . cout = + \u221e T [ s ] . predecesseur = \u00d8 FinPour T [ x ] . cout = 0 Renvoyer T Fin Question 4 \u00c9crire l'algorithme mettre_a_jour_voisins qui prend en param\u00e8tre un graphe \\(G\\) , un tableau de co\u00fbt \\(T\\) et un sommet \\(s\\) et a pour effet de bord de mettre \u00e0 jour les voisins de \\(s\\) tel que d\u00e9crit pr\u00e9c\u00e9demment, Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Algorithme mettre_a_jour_voisins ( G , T , s ) Entr\u00e9es : - G , un graphe pond\u00e9r\u00e9 - T , un tableau de co\u00fbt - s , un sommet Sortie : Aucune Effet de bord : Les co\u00fbts des voisins de s sont mis \u00e0 jour D\u00e9but Pour tout voisin v de G . voisins ( s ) Si T [ s ] + G . poids ( s , v ) < T [ v ] alors T [ v ] = T [ s ] + G . poids ( s , v ) Finsi FinPour Fin Question 5 \u00c9crire l'algorithme dijkstra , tel que d\u00e9crit pr\u00e9c\u00e9demment, qui prend en param\u00e8tre un graphe \\(G\\) et un sommet \\(s\\) de d\u00e9part et renvoie le tableau des co\u00fbts de distance. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Algorithme dijkstra ( G , s ) Entr\u00e9es : - G : un graphe pond\u00e9r\u00e9 - s : un sommet de G Sortie : le tableau des co\u00fbts des distances entre s et les sommets de G D\u00e9but T <- initialisation ( G , s ) non_visite <- G . sommets Tant que non_visite est non vide faire noeud <- choisir_min ( T ) non_visite <- non_visite - noeud mettre_a_jour_voisins ( G , T , noeud ) FinTantQue Renvoyer T Fin Analyse de l'algorithme de Dijkstra Terminaison L'algorithme dijkstra termine si la boucle Tant que principale termine. Le variant de boucle est la taille de l'ensemble des sommets non visit\u00e9s. Soit \\(v_i\\) , la taille de l'ensemble des sommets non visit\u00e9s \u00e0 l'it\u00e9ration \\(i\\) de la boucle Tant que , \\(v\\) d\u00e9crit une suite enti\u00e8re, positive et strictement d\u00e9croissante qui se d\u00e9finie par : \\[ v_i = \\left\\{ \\begin{array}{l l} |\\mbox{non_visite}| & i = 0\\\\ v_{i - 1} -1 & \\forall i > 0 \\end{array} \\right. \\] Par d\u00e9finition, une suite strictement d\u00e9croissante d\u2019entiers naturels est toujours finie (il n\u2019y a pas de suite infinie strictement d\u00e9croissante). Ainsi, la boucle Tant que se termine et l'algorithme dijkstra \u00e9galement. Correction Pour la preuve, on va proc\u00e9der par r\u00e9currence avec l'invariant suivante : \u201cTous les sommets ayant \u00e9t\u00e9 visit\u00e9s sont tels que leurs distances au sommet initial ont \u00e9t\u00e9 calcul\u00e9es et enregistr\u00e9es, et les sommets restants s\u2019il en est sont \u00e0 des distances toutes plus grandes\u201d. Complexit\u00e9 Soient : \\(n\\) , le nombre de sommets du graphe \\(G\\) \\(m\\) , le nombre d'ar\u00eates du graphe G Soit \\(C_{dijkstra}\\) la complexit\u00e9 de l'algorithme de Dijkstra Cas d'un graphe pond\u00e9r\u00e9 avec poids n\u00e9gatif Les donn\u00e9es du probl\u00e8me du livreur \u00e9voluent. Au lieu de consid\u00e9rer la distance, on consid\u00e8re le d\u00e9nivel\u00e9 des pistes cyclables. Ci-dessous, le graphe non orient\u00e9 pond\u00e9r\u00e9 o\u00f9 le poids des ar\u00eates correspond au d\u00e9nivel\u00e9 des pistes cyclables. Question Quel est le chemin, pr\u00e9sentant le moins de d\u00e9nivel\u00e9, que doit emprunter le livreur pour effectuer sa livraison ? Ressources [1] Utiliser l'algorithme de Dijkstra, Yvan Monka, Youtube , 25/12/2014 [2] \u00c9diteur en ligne de graphe et ex\u00e9cution de l'algorithme de Dijsktra Pour aller plus loin Algorithme de recherche de plus court chemin de Bellman-Ford (G\u00e8re les graphes pond\u00e9r\u00e9s de poids n\u00e9gatifs) Algorithme de recherche de plus court chemin A* (Am\u00e9lioration de Dijkstra lors de la s\u00e9lection du prochain noeud \u00e0 visiter)","title":"Algorithme de Dijsktra"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#algorithme-de-dijsktra","text":"","title":"Algorithme de Dijsktra"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#contexte","text":"Mettons-nous dans la place d'un livreur Super-eats qui se d\u00e9place en v\u00e9lo. Il se situe actuellement aux abords d'un restaurant, situ\u00e9 au point \\(D\\) , et doit livrer une commande \u00e0 un client situ\u00e9 au point \\(G\\) . Source : les contributeurs d'OpenStreetMap En tant que cycliste, le livreur se d\u00e9place uniquement sur les pistes cyclables. La carte suivante indique les pistes permettant de relier le point d'arriv\u00e9e, ainsi que les temps pour atteindre les points interm\u00e9diaires. Source : les contributeurs d'OpenStreetMap Quel est le le plus court chemin que doit emprunter le livreur pour effectuer sa livraison ?","title":"Contexte"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#modelisation","text":"Les donn\u00e9es du probl\u00e8me du livreur peuvent \u00eatre mod\u00e9lis\u00e9es sous la forme d'un graphe pond\u00e9r\u00e9 o\u00f9 : chaque sommet est un point d'intersection d'une piste cyclable, chaque ar\u00eate , une piste cyclable, le poids de chaque ar\u00eate, la dur\u00e9e en minutes pour parcourir la distance entre 2 sommets. Soit \\(C(x,y)\\) un chemin (ou une cha\u00eene) dans un graphe pond\u00e9r\u00e9 du sommet \\(x\\) vers le sommet \\(y\\) . La longueur de ce chemin est \u00e9gale \u00e0 la somme des poids de chacun arcs (ou de chacune des ar\u00eates) qui le constituent. Exemple : La chaine \\(D-B-C-F\\) a une longueur de \\(13 + 8 + 9 = 30\\) . Le probl\u00e8me du livreur Super-Eats est de d\u00e9terminer la plus courte cha\u00eene du graphe pond\u00e9r\u00e9 entre le sommet \\(D\\) et un sommet \\(G\\) . Pour r\u00e9soudre ce probl\u00e8me, une solution est d'appliquer l'algorithme de Dijkstra , cr\u00e9\u00e9 en 1959.","title":"Mod\u00e9lisation"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#principe","text":"L'algorithme d\u00fb \u00e0 Dijkstra est bas\u00e9 sur le principe suivant : Si le plus court chemin reliant le sommet de d\u00e9part \\(s_0\\) \u00e0 un autre sommet \\(s_f\\) passe par les sommets \\(s_1, s_2, \\dots, s_k\\) alors, les diff\u00e9rentes \u00e9tapes sont aussi les plus courts chemins reliant \\(s_0\\) aux diff\u00e9rents sommets \\(s_1, s_2, \\dots, s_k\\) . On construit de proche en proche le chemin cherch\u00e9 en choisissant \u00e0 chaque it\u00e9ration de l'algorithme, un sommet \\(s_i\\) du graphe parmi ceux qui n'ont pas encore \u00e9t\u00e9 trait\u00e9s, tel que la longueur connue provisoirement du plus court chemin allant de \\(s_0\\) \u00e0 \\(s_i\\) soit la plus courte possible. L'algorithme construit un tableau de \\(n\\) \u00e9l\u00e9ments (o\u00f9 \\(n\\) est le nombre de sommets de \\(G\\) ) qui va contenir pour chaque case \\(i\\) le co\u00fbt du sommet (i.e la distance minimale du sommet de d\u00e9part au sommet \\(s_i\\) ) ainsi que le pr\u00e9d\u00e9cesseur du sommet \\(s_i\\) .","title":"Principe"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#initialisation","text":"Au d\u00e9part : Chaque case \\(i\\) est initialis\u00e9e \u00e0 \\(+\\infty\\) , le pr\u00e9d\u00e9cesseur \u00e0 \\(\\emptyset\\) Le co\u00fbt du sommet de d\u00e9part \\(s_0\\) est initialis\u00e9e \u00e0 0 L'ensemble des sommets \\(s_i\\) sont marqu\u00e9s non visit\u00e9s \\[ \\begin{align} \\begin{array}{|c | c | c | c | c | c |} \\hline D & A & B & C & E & F & G \\\\ \\hline 0, \\emptyset& +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset \\\\ \\hline \\end{array} \\\\ \\mbox{Tableau \u00e0 l'initialisation} \\end{align} \\]","title":"Initialisation"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#deroule","text":"A chaque \u00e9tape, On choisit le sommet \\(s\\) , non visit\u00e9, de co\u00fbt minimal, On met \u00e0 jour les co\u00fbts des voisins de \\(s\\) en ajoutant le co\u00fbt de \\(s\\) au poids des ar\u00eates s'il est inf\u00e9rieur au co\u00fbt actuel, On marque \\(s\\) comme pr\u00e9d\u00e9cesseur de chaque sommet dont le co\u00fbt a \u00e9t\u00e9 mis \u00e0 jour, On marque \\(s\\) comme sommet visit\u00e9.","title":"D\u00e9roul\u00e9"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#exemple-sur-le-graphe-de-la-figure-1","text":"\\[ \\begin{align} \\begin{array}{| c | c | c | c | c | c |} \\hline D & A & B & C & E & F & G \\\\ \\hline 0, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset \\\\ \\hline \\end{array} \\\\ \\mbox{Etat du tableau des co\u00fbts \u00e0 l'initialisation} \\end{align} \\]","title":"Exemple sur le graphe de la Figure 1"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#exercices","text":"Question 1 Appliquer l'algorithme de Dijkstra tel que d\u00e9crit pr\u00e9c\u00e9demment pour obtenir le tableau de co\u00fbts tel que le sommet de d\u00e9part est le sommet \\(G\\) . En d\u00e9duire la chaine la plus courte entre les sommets \\(G\\) et \\(A\\) . Solution Le chemin le plus court entre \\(G\\) et \\(A\\) est : \\(G \\rightarrow E \\rightarrow C \\rightarrow A\\) et vaut 18. Les \u00e9tats successifs du tableau des co\u00fbts sont : \\[ \\begin{align} \\begin{array}{| c | c | c | c | c | c | c |} \\hline G & A & B & C & D & E & F & \\mbox{noeud choisi} \\\\ \\hline 0, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & -\\\\ \\hline 0, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & +\\infty, \\emptyset & 3, G & 12, G & G\\\\ \\hline 0, \\emptyset & +\\infty, \\emptyset & 28, E & 8, E & +\\infty, \\emptyset & 3, G & 12, G & E\\\\ \\hline 0, \\emptyset &18, C & 16, C & 8, E & +\\infty, \\emptyset & 3, G & 12, G & C\\\\ \\hline 0, \\emptyset &18, C & 16, C & 8, E & +\\infty, \\emptyset & 3, G & 12, G & F\\\\ \\hline 0, \\emptyset &18, C & 16, C & 8, E & 29, D & 3, G & 12, G & B\\\\ \\hline 0, \\emptyset &18, C & 16, C & 8, E & 29, D & 3, G & 12, G & A\\\\ \\hline 0, \\emptyset &18, C & 16, C & 8, E & 29, D & 3, G & 12, G & D\\\\ \\hline \\end{array} \\\\ \\mbox{Tableau des co\u00fbts pour le sommet de d\u00e9part $G$} \\end{align} \\] Question 2 \u00c9crire l'algorithme obtenir_chaine qui prend en param\u00e8tre un tableau \\(T\\) de co\u00fbts de distance, un sommet \\(x\\) de d\u00e9part et un sommet d'arriv\u00e9e \\(y\\) et renvoie la chaine la plus courte entre \\(x\\) et \\(y\\) sous la forme d'une liste de sommets, Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Algorithme obtenir_chaine ( T , x , y ) Entr\u00e9es : - T : un tableau de co\u00fbts de distance - x : le sommet de d\u00e9part - y : le sommet d 'arriv\u00e9e Sortie : la chaine la plus courte entre x et y sous la forme d 'une liste de sommets D\u00e9but chaine <- [] s = y Tant que s != x faire chaine <- [ s ] + chaine s <- T [ s ] . predecesseur FinTantQue chaine <- [ x ] + chaine Renvoyer chaine Fin Question 3 \u00c9crire l'algorithme initialisation , tel que d\u00e9crit pr\u00e9c\u00e9demment, qui prend en param\u00e8tre un graphe \\(G\\) et qui renvoie un tableau de co\u00fbt initialis\u00e9, Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Algorithme initialisation ( G , x ) Entr\u00e9es : - G , un graphe pond\u00e9r\u00e9 - x , le sommet de d\u00e9part Sortie : un tableau de co\u00fbt initialis\u00e9 D\u00e9but T <- [ | G . sommets | ] # un tableau de taille \u00e9gale \u00e0 l'ordre de G Pour tout sommet s de G . sommets faire T [ s ] . cout = + \u221e T [ s ] . predecesseur = \u00d8 FinPour T [ x ] . cout = 0 Renvoyer T Fin Question 4 \u00c9crire l'algorithme mettre_a_jour_voisins qui prend en param\u00e8tre un graphe \\(G\\) , un tableau de co\u00fbt \\(T\\) et un sommet \\(s\\) et a pour effet de bord de mettre \u00e0 jour les voisins de \\(s\\) tel que d\u00e9crit pr\u00e9c\u00e9demment, Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Algorithme mettre_a_jour_voisins ( G , T , s ) Entr\u00e9es : - G , un graphe pond\u00e9r\u00e9 - T , un tableau de co\u00fbt - s , un sommet Sortie : Aucune Effet de bord : Les co\u00fbts des voisins de s sont mis \u00e0 jour D\u00e9but Pour tout voisin v de G . voisins ( s ) Si T [ s ] + G . poids ( s , v ) < T [ v ] alors T [ v ] = T [ s ] + G . poids ( s , v ) Finsi FinPour Fin Question 5 \u00c9crire l'algorithme dijkstra , tel que d\u00e9crit pr\u00e9c\u00e9demment, qui prend en param\u00e8tre un graphe \\(G\\) et un sommet \\(s\\) de d\u00e9part et renvoie le tableau des co\u00fbts de distance. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Algorithme dijkstra ( G , s ) Entr\u00e9es : - G : un graphe pond\u00e9r\u00e9 - s : un sommet de G Sortie : le tableau des co\u00fbts des distances entre s et les sommets de G D\u00e9but T <- initialisation ( G , s ) non_visite <- G . sommets Tant que non_visite est non vide faire noeud <- choisir_min ( T ) non_visite <- non_visite - noeud mettre_a_jour_voisins ( G , T , noeud ) FinTantQue Renvoyer T Fin","title":"Exercices"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#analyse-de-lalgorithme-de-dijkstra","text":"","title":"Analyse de l'algorithme de Dijkstra"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#terminaison","text":"L'algorithme dijkstra termine si la boucle Tant que principale termine. Le variant de boucle est la taille de l'ensemble des sommets non visit\u00e9s. Soit \\(v_i\\) , la taille de l'ensemble des sommets non visit\u00e9s \u00e0 l'it\u00e9ration \\(i\\) de la boucle Tant que , \\(v\\) d\u00e9crit une suite enti\u00e8re, positive et strictement d\u00e9croissante qui se d\u00e9finie par : \\[ v_i = \\left\\{ \\begin{array}{l l} |\\mbox{non_visite}| & i = 0\\\\ v_{i - 1} -1 & \\forall i > 0 \\end{array} \\right. \\] Par d\u00e9finition, une suite strictement d\u00e9croissante d\u2019entiers naturels est toujours finie (il n\u2019y a pas de suite infinie strictement d\u00e9croissante). Ainsi, la boucle Tant que se termine et l'algorithme dijkstra \u00e9galement.","title":"Terminaison"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#correction","text":"Pour la preuve, on va proc\u00e9der par r\u00e9currence avec l'invariant suivante : \u201cTous les sommets ayant \u00e9t\u00e9 visit\u00e9s sont tels que leurs distances au sommet initial ont \u00e9t\u00e9 calcul\u00e9es et enregistr\u00e9es, et les sommets restants s\u2019il en est sont \u00e0 des distances toutes plus grandes\u201d.","title":"Correction"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#complexite","text":"Soient : \\(n\\) , le nombre de sommets du graphe \\(G\\) \\(m\\) , le nombre d'ar\u00eates du graphe G Soit \\(C_{dijkstra}\\) la complexit\u00e9 de l'algorithme de Dijkstra","title":"Complexit\u00e9"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#cas-dun-graphe-pondere-avec-poids-negatif","text":"Les donn\u00e9es du probl\u00e8me du livreur \u00e9voluent. Au lieu de consid\u00e9rer la distance, on consid\u00e8re le d\u00e9nivel\u00e9 des pistes cyclables. Ci-dessous, le graphe non orient\u00e9 pond\u00e9r\u00e9 o\u00f9 le poids des ar\u00eates correspond au d\u00e9nivel\u00e9 des pistes cyclables. Question Quel est le chemin, pr\u00e9sentant le moins de d\u00e9nivel\u00e9, que doit emprunter le livreur pour effectuer sa livraison ?","title":"Cas d'un graphe pond\u00e9r\u00e9 avec poids n\u00e9gatif"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#ressources","text":"[1] Utiliser l'algorithme de Dijkstra, Yvan Monka, Youtube , 25/12/2014 [2] \u00c9diteur en ligne de graphe et ex\u00e9cution de l'algorithme de Dijsktra","title":"Ressources"},{"location":"terminale/bloc5/chapitre-03/DIJKSTRA/#pour-aller-plus-loin","text":"Algorithme de recherche de plus court chemin de Bellman-Ford (G\u00e8re les graphes pond\u00e9r\u00e9s de poids n\u00e9gatifs) Algorithme de recherche de plus court chemin A* (Am\u00e9lioration de Dijkstra lors de la s\u00e9lection du prochain noeud \u00e0 visiter)","title":"Pour aller plus loin"}]}